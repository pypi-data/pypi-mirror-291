# coding: utf-8

"""
    qTest Manager API Version 11.0.0 - 2023.6

    qTest Manager API Version 11.0.0 - 2023.6  # noqa: E501

    OpenAPI spec version: 11.0.0 - 2023.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ObjectLinkApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def find(self, project_id, type, **kwargs):  # noqa: E501
        """Gets associated objects of given objects  # noqa: E501

        To retrieve associated objects of given objects  <strong>qTest Manager version:</strong> 7.5+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find(project_id, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param str type: Valid values include <em>releases</em>, <em>builds</em>, <em>requirements</em>,<em>test-cases</em>, <em>test-runs</em>, <em>test-logs</em>, <em>test-steps</em> or <em>defects</em> (required)
        :param list[int] ids: IDs of objects whose links you want to retrieve
        :param list[str] pids: In case of <em>type=defects</em>, you can specify a list of external defect id in this parameters.  It cannot be used for other types
        :param bool t_rof_sharedprojects:
        :return: list[LinkedArtifactContainer]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.find_with_http_info(project_id, type, **kwargs)  # noqa: E501
        else:
            (data) = self.find_with_http_info(project_id, type, **kwargs)  # noqa: E501
            return data

    def find_with_http_info(self, project_id, type, **kwargs):  # noqa: E501
        """Gets associated objects of given objects  # noqa: E501

        To retrieve associated objects of given objects  <strong>qTest Manager version:</strong> 7.5+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_with_http_info(project_id, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param str type: Valid values include <em>releases</em>, <em>builds</em>, <em>requirements</em>,<em>test-cases</em>, <em>test-runs</em>, <em>test-logs</em>, <em>test-steps</em> or <em>defects</em> (required)
        :param list[int] ids: IDs of objects whose links you want to retrieve
        :param list[str] pids: In case of <em>type=defects</em>, you can specify a list of external defect id in this parameters.  It cannot be used for other types
        :param bool t_rof_sharedprojects:
        :return: list[LinkedArtifactContainer]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'type', 'ids', 'pids', 't_rof_sharedprojects']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `find`")  # noqa: E501
        # verify the required parameter 'type' is set
        if self.api_client.client_side_validation and ('type' not in params or
                                                       params['type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `type` when calling `find`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'ids' in params:
            query_params.append(('ids', params['ids']))  # noqa: E501
            collection_formats['ids'] = 'multi'  # noqa: E501
        if 'pids' in params:
            query_params.append(('pids', params['pids']))  # noqa: E501
            collection_formats['pids'] = 'multi'  # noqa: E501
        if 't_rof_sharedprojects' in params:
            query_params.append(('TRofSharedprojects', params['t_rof_sharedprojects']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/linked-artifacts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[LinkedArtifactContainer]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def link_artifacts(self, project_id, object_type, type, body, object_id, **kwargs):  # noqa: E501
        """Creates links between objects  # noqa: E501

        To add associated objects to another object  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.link_artifacts(project_id, object_type, type, body, object_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param str object_type: The object type of the source object. Valid values include requirements, builds, test-steps, test-logs, releases (required)
        :param str type: The object type of the associated objects which are being added to the source object.   Valid values include releases, builds, requirements, test-cases, test-runs, test-logs, test-steps or defects (required)
        :param list[int] body: A JSONArray of associated object IDs which are being added to the source object  Notes:  When creating link between Test Case and Requirement, please make sure that:  - Data migration for Test Case version when turning on Test Case Settings to track Test Case - Requirement Link per version is completed (required)
        :param int object_id: ID of the source object (required)
        :return: list[LinkedArtifactContainer]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.link_artifacts_with_http_info(project_id, object_type, type, body, object_id, **kwargs)  # noqa: E501
        else:
            (data) = self.link_artifacts_with_http_info(project_id, object_type, type, body, object_id, **kwargs)  # noqa: E501
            return data

    def link_artifacts_with_http_info(self, project_id, object_type, type, body, object_id, **kwargs):  # noqa: E501
        """Creates links between objects  # noqa: E501

        To add associated objects to another object  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.link_artifacts_with_http_info(project_id, object_type, type, body, object_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param str object_type: The object type of the source object. Valid values include requirements, builds, test-steps, test-logs, releases (required)
        :param str type: The object type of the associated objects which are being added to the source object.   Valid values include releases, builds, requirements, test-cases, test-runs, test-logs, test-steps or defects (required)
        :param list[int] body: A JSONArray of associated object IDs which are being added to the source object  Notes:  When creating link between Test Case and Requirement, please make sure that:  - Data migration for Test Case version when turning on Test Case Settings to track Test Case - Requirement Link per version is completed (required)
        :param int object_id: ID of the source object (required)
        :return: list[LinkedArtifactContainer]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'object_type', 'type', 'body', 'object_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method link_artifacts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `link_artifacts`")  # noqa: E501
        # verify the required parameter 'object_type' is set
        if self.api_client.client_side_validation and ('object_type' not in params or
                                                       params['object_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_type` when calling `link_artifacts`")  # noqa: E501
        # verify the required parameter 'type' is set
        if self.api_client.client_side_validation and ('type' not in params or
                                                       params['type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `type` when calling `link_artifacts`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `link_artifacts`")  # noqa: E501
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `link_artifacts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'object_type' in params:
            path_params['objectType'] = params['object_type']  # noqa: E501
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/{objectType}/{objectId}/link', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[LinkedArtifactContainer]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def link_artifacts_by_pid(self, project_id, object_type, link_type, body, object_id, **kwargs):  # noqa: E501
        """Creates links between objects by pids  # noqa: E501

        To add associated objects to another object by pids or Jira Defects Ids  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.link_artifacts_by_pid(project_id, object_type, link_type, body, object_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param str object_type: The object type of the source object. Valid values include test-steps, test-logs (required)
        :param str link_type: The object type of the associated objects which are being added to the source object.   Valid value: defects (required)
        :param list[str] body: A JSONArray of associated object PIDs or Jira Defect which are being added to the source object (required)
        :param int object_id: (required)
        :return: list[LinkedDefectContainer]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.link_artifacts_by_pid_with_http_info(project_id, object_type, link_type, body, object_id, **kwargs)  # noqa: E501
        else:
            (data) = self.link_artifacts_by_pid_with_http_info(project_id, object_type, link_type, body, object_id, **kwargs)  # noqa: E501
            return data

    def link_artifacts_by_pid_with_http_info(self, project_id, object_type, link_type, body, object_id, **kwargs):  # noqa: E501
        """Creates links between objects by pids  # noqa: E501

        To add associated objects to another object by pids or Jira Defects Ids  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.link_artifacts_by_pid_with_http_info(project_id, object_type, link_type, body, object_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param str object_type: The object type of the source object. Valid values include test-steps, test-logs (required)
        :param str link_type: The object type of the associated objects which are being added to the source object.   Valid value: defects (required)
        :param list[str] body: A JSONArray of associated object PIDs or Jira Defect which are being added to the source object (required)
        :param int object_id: (required)
        :return: list[LinkedDefectContainer]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'object_type', 'link_type', 'body', 'object_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method link_artifacts_by_pid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `link_artifacts_by_pid`")  # noqa: E501
        # verify the required parameter 'object_type' is set
        if self.api_client.client_side_validation and ('object_type' not in params or
                                                       params['object_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_type` when calling `link_artifacts_by_pid`")  # noqa: E501
        # verify the required parameter 'link_type' is set
        if self.api_client.client_side_validation and ('link_type' not in params or
                                                       params['link_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `link_type` when calling `link_artifacts_by_pid`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `link_artifacts_by_pid`")  # noqa: E501
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `link_artifacts_by_pid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'object_type' in params:
            path_params['objectType'] = params['object_type']  # noqa: E501
        if 'link_type' in params:
            path_params['linkType'] = params['link_type']  # noqa: E501
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/{objectType}/{objectId}/{linkType}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[LinkedDefectContainer]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def unlink_artifacts(self, project_id, object_type, type, body, object_id, **kwargs):  # noqa: E501
        """Removes links between objects  # noqa: E501

        To remove associated objects from another object  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unlink_artifacts(project_id, object_type, type, body, object_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param str object_type: The object type of the source object. Valid values include requirements, builds, test-steps, test-logs, releases (required)
        :param str type: The object type of the associated objects which are being added to the source object.   Valid values include releases, builds, requirements, test-cases, test-runs, test-logs, test-steps or defects (required)
        :param list[int] body: A JSONArray of associated object IDs which are being removed from the source object  Notes:  When removing link between Test Case and Requirement, please make sure that:  - Data migration for Test Case version when turning on Test Case Settings to track Test Case - Requirement Link per version is completed (required)
        :param int object_id: ID of the source object (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.unlink_artifacts_with_http_info(project_id, object_type, type, body, object_id, **kwargs)  # noqa: E501
        else:
            (data) = self.unlink_artifacts_with_http_info(project_id, object_type, type, body, object_id, **kwargs)  # noqa: E501
            return data

    def unlink_artifacts_with_http_info(self, project_id, object_type, type, body, object_id, **kwargs):  # noqa: E501
        """Removes links between objects  # noqa: E501

        To remove associated objects from another object  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unlink_artifacts_with_http_info(project_id, object_type, type, body, object_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param str object_type: The object type of the source object. Valid values include requirements, builds, test-steps, test-logs, releases (required)
        :param str type: The object type of the associated objects which are being added to the source object.   Valid values include releases, builds, requirements, test-cases, test-runs, test-logs, test-steps or defects (required)
        :param list[int] body: A JSONArray of associated object IDs which are being removed from the source object  Notes:  When removing link between Test Case and Requirement, please make sure that:  - Data migration for Test Case version when turning on Test Case Settings to track Test Case - Requirement Link per version is completed (required)
        :param int object_id: ID of the source object (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'object_type', 'type', 'body', 'object_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unlink_artifacts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `unlink_artifacts`")  # noqa: E501
        # verify the required parameter 'object_type' is set
        if self.api_client.client_side_validation and ('object_type' not in params or
                                                       params['object_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_type` when calling `unlink_artifacts`")  # noqa: E501
        # verify the required parameter 'type' is set
        if self.api_client.client_side_validation and ('type' not in params or
                                                       params['type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `type` when calling `unlink_artifacts`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `unlink_artifacts`")  # noqa: E501
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `unlink_artifacts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'object_type' in params:
            path_params['objectType'] = params['object_type']  # noqa: E501
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/{objectType}/{objectId}/link', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def unlink_artifacts_by_pid(self, project_id, object_type, link_type, body, object_id, **kwargs):  # noqa: E501
        """Removes links between objects by pids  # noqa: E501

        To removes links between objects by pids  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unlink_artifacts_by_pid(project_id, object_type, link_type, body, object_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param str object_type: The object type of the source object. Valid values include test-steps, test-logs (required)
        :param str link_type: The object type of the associated objects which are being added to the source object.   Valid value: defects (required)
        :param list[str] body: A JSONArray of associated object PIDs which are being added to the source object (required)
        :param int object_id: (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.unlink_artifacts_by_pid_with_http_info(project_id, object_type, link_type, body, object_id, **kwargs)  # noqa: E501
        else:
            (data) = self.unlink_artifacts_by_pid_with_http_info(project_id, object_type, link_type, body, object_id, **kwargs)  # noqa: E501
            return data

    def unlink_artifacts_by_pid_with_http_info(self, project_id, object_type, link_type, body, object_id, **kwargs):  # noqa: E501
        """Removes links between objects by pids  # noqa: E501

        To removes links between objects by pids  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unlink_artifacts_by_pid_with_http_info(project_id, object_type, link_type, body, object_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param str object_type: The object type of the source object. Valid values include test-steps, test-logs (required)
        :param str link_type: The object type of the associated objects which are being added to the source object.   Valid value: defects (required)
        :param list[str] body: A JSONArray of associated object PIDs which are being added to the source object (required)
        :param int object_id: (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'object_type', 'link_type', 'body', 'object_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unlink_artifacts_by_pid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `unlink_artifacts_by_pid`")  # noqa: E501
        # verify the required parameter 'object_type' is set
        if self.api_client.client_side_validation and ('object_type' not in params or
                                                       params['object_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_type` when calling `unlink_artifacts_by_pid`")  # noqa: E501
        # verify the required parameter 'link_type' is set
        if self.api_client.client_side_validation and ('link_type' not in params or
                                                       params['link_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `link_type` when calling `unlink_artifacts_by_pid`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `unlink_artifacts_by_pid`")  # noqa: E501
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `unlink_artifacts_by_pid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'object_type' in params:
            path_params['objectType'] = params['object_type']  # noqa: E501
        if 'link_type' in params:
            path_params['linkType'] = params['link_type']  # noqa: E501
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/{objectType}/{objectId}/{linkType}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
