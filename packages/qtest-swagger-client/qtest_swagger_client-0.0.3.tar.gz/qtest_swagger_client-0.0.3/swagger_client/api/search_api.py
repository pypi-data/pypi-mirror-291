# coding: utf-8

"""
    qTest Manager API Version 11.0.0 - 2023.6

    qTest Manager API Version 11.0.0 - 2023.6  # noqa: E501

    OpenAPI spec version: 11.0.0 - 2023.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class SearchApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def query_histories(self, project_id, body, **kwargs):  # noqa: E501
        """Queries objects' histories  # noqa: E501

        To query histories of Requirements, Test Cases, Test Runs and <em>internal</em> Defects  <strong>qTest Manager version:</strong> 7.6+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.query_histories(project_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param HistoryQueryParams body: <em>object_type (required):</em> valid values include <em>requirements</em>, <em>test-cases</em>, <em>test-runs</em>, or <em>defects</em>  <em>fields:</em> specify which object fields you want to include in the response. If you omit it or specify an asterisk (*), all fields are included  <em>object_query:</em> specify a structured query to search for qTest objects. <br/>Refer to attribute <em>query</em> in the Request Body of <em>Queries Objects</em> API  <em>query:</em> specify a structured query to retrieve histories of objects specified in attribute <em>object_query</em> above. You can use operators <em>and</em> and <em>or</em> to combine multiple criteria. Only these 2 criteria are supported:  <br/>i) <em>created:</em> it can be used for querying by updated date of the object. Its values need to be in ISO Date format. Applicable operator include: =, <>, &lt;= and >=  <br/>ii) <em>author:</em> it can be used for querying by ID of the users who made the update. Applicable operators include: = and <> (required)
        :param int page_size: The result is paginated. By the default, the number of objects in each page is 100 if this is omitted. You can specify your custom number (up to 999) in this parameter
        :param int page: By default the first page is returned but you can specify any page number to retrieve objects
        :return: ArtifactHistoryResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.query_histories_with_http_info(project_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.query_histories_with_http_info(project_id, body, **kwargs)  # noqa: E501
            return data

    def query_histories_with_http_info(self, project_id, body, **kwargs):  # noqa: E501
        """Queries objects' histories  # noqa: E501

        To query histories of Requirements, Test Cases, Test Runs and <em>internal</em> Defects  <strong>qTest Manager version:</strong> 7.6+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.query_histories_with_http_info(project_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param HistoryQueryParams body: <em>object_type (required):</em> valid values include <em>requirements</em>, <em>test-cases</em>, <em>test-runs</em>, or <em>defects</em>  <em>fields:</em> specify which object fields you want to include in the response. If you omit it or specify an asterisk (*), all fields are included  <em>object_query:</em> specify a structured query to search for qTest objects. <br/>Refer to attribute <em>query</em> in the Request Body of <em>Queries Objects</em> API  <em>query:</em> specify a structured query to retrieve histories of objects specified in attribute <em>object_query</em> above. You can use operators <em>and</em> and <em>or</em> to combine multiple criteria. Only these 2 criteria are supported:  <br/>i) <em>created:</em> it can be used for querying by updated date of the object. Its values need to be in ISO Date format. Applicable operator include: =, <>, &lt;= and >=  <br/>ii) <em>author:</em> it can be used for querying by ID of the users who made the update. Applicable operators include: = and <> (required)
        :param int page_size: The result is paginated. By the default, the number of objects in each page is 100 if this is omitted. You can specify your custom number (up to 999) in this parameter
        :param int page: By default the first page is returned but you can specify any page number to retrieve objects
        :return: ArtifactHistoryResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'body', 'page_size', 'page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method query_histories" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `query_histories`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `query_histories`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/histories', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ArtifactHistoryResource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_artifact(self, project_id, body, **kwargs):  # noqa: E501
        """Queries objects  # noqa: E501

        This API mimics the Data Query function of qTest Manager web app. It provides the capability to query Requirements, Test Cases, Test Runs and <em>internal</em> Defects  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_artifact(project_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param ArtifactSearchParams body: <em>object_type (required):</em> Its value can be <em>releases</em>, <em>requirements</em>, <em>test-cases</em>, <em>test-runs</em>, <em>test-suites</em>, <em>test-cycles</em>, <em>test-logs</em>, <em>builds</em>, or <em>defects</em>.  <em>fields:</em> specify which object fields you want to include in the response. If you omit it or specify an asterisk (*), all fields are included.  <em>query:</em> specify a structured query to search for qTest Manager objects. Basically, you can use the Query Summary text as in qTest web app for this attribute.  <strong>IMPORTANT:</strong> When using Query Summary to specify the query, you will need to modify the Query Summary in some special cases as below:  - If there are spaces in the criteria name, put it between '  ' (single quotation marks).  - There need to be spaces between a criteria, an operator, and a value.  - You can use field name or field ID in the query.  - For the fields with datetime as the data type, convert the values to ISO Date Time format.  - Operator \"IN\" for fields with datetime as the data type will search for the values within this range: inputted date time &lt;= value &lt;= (inputted date time + 23h59m59s).  - <em>Affected Release/Build:</em> You can use either Affected Release or Affected Build as criteria in a query. This criterion can be used only for <em>defects</em>.  - <em>Target Release/Build:</em> You can use either Target Release or Target Build as criteria in a query. This criterion can be used for <em>requirements</em>, <em>test-runs</em>, <em>defects</em>, <em>test-logs</em>, and <em>test-cycles</em>. Release Id should be passed as Negative value.  - <em>Fixed Release/Build:</em> You can use either Fixed Release or Fixed Build as criteria in a query. This criterion can be used only for <em>defects</em>.  - <em>Subscribers</em>: Use user ID instead of username in the query for this criteria.  - You need to use id or pid for the following fields when using them in a query: Affected Release, Affected Build, Target Release, Target Build, Fixed Release, and Fixed Build.  - Use <em>~</em> for operator <em>contains</em>, and <em>!~</em> for operator <em>not contains</em>. Eg: instead of <em>Name contains \"login\"</em>, use <em>Name ~ \"login\"</em>  - Use operator <em>is not empty</em> in the following way: <strong>is 'not empty'</strong>. Eg: \"Name is 'not empty'\"  - For builds and test-cycles, you can use the following additional criterion: <em>Created Date</em> and <em>Last Modified Date</em> in a query. Eg: 'Created Date' > '2021-05-07T03:15:37.652Z'  - For test-logs, you can use the following additional criterion: <em>Execution Start Date</em> and <em>Execution End Date</em> in a query. Eg: 'Execution Start Date' > '2021-05-07T03:15:37.652Z' (required)
        :param bool append_test_steps:
        :param bool include_external_properties: By default, Requirement external properties are not included in the response. Specify includeExternalProperties=true to include them.
        :param int page_size: The result is paginated. By the default, the number of objects in each page is 100 if this is omitted. You can specify your custom number (up to 999) in this parameter
        :param int page: By default the first page is returned but you can specify any page number to retrieve objects
        :return: PagedResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_artifact_with_http_info(project_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.search_artifact_with_http_info(project_id, body, **kwargs)  # noqa: E501
            return data

    def search_artifact_with_http_info(self, project_id, body, **kwargs):  # noqa: E501
        """Queries objects  # noqa: E501

        This API mimics the Data Query function of qTest Manager web app. It provides the capability to query Requirements, Test Cases, Test Runs and <em>internal</em> Defects  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_artifact_with_http_info(project_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param ArtifactSearchParams body: <em>object_type (required):</em> Its value can be <em>releases</em>, <em>requirements</em>, <em>test-cases</em>, <em>test-runs</em>, <em>test-suites</em>, <em>test-cycles</em>, <em>test-logs</em>, <em>builds</em>, or <em>defects</em>.  <em>fields:</em> specify which object fields you want to include in the response. If you omit it or specify an asterisk (*), all fields are included.  <em>query:</em> specify a structured query to search for qTest Manager objects. Basically, you can use the Query Summary text as in qTest web app for this attribute.  <strong>IMPORTANT:</strong> When using Query Summary to specify the query, you will need to modify the Query Summary in some special cases as below:  - If there are spaces in the criteria name, put it between '  ' (single quotation marks).  - There need to be spaces between a criteria, an operator, and a value.  - You can use field name or field ID in the query.  - For the fields with datetime as the data type, convert the values to ISO Date Time format.  - Operator \"IN\" for fields with datetime as the data type will search for the values within this range: inputted date time &lt;= value &lt;= (inputted date time + 23h59m59s).  - <em>Affected Release/Build:</em> You can use either Affected Release or Affected Build as criteria in a query. This criterion can be used only for <em>defects</em>.  - <em>Target Release/Build:</em> You can use either Target Release or Target Build as criteria in a query. This criterion can be used for <em>requirements</em>, <em>test-runs</em>, <em>defects</em>, <em>test-logs</em>, and <em>test-cycles</em>. Release Id should be passed as Negative value.  - <em>Fixed Release/Build:</em> You can use either Fixed Release or Fixed Build as criteria in a query. This criterion can be used only for <em>defects</em>.  - <em>Subscribers</em>: Use user ID instead of username in the query for this criteria.  - You need to use id or pid for the following fields when using them in a query: Affected Release, Affected Build, Target Release, Target Build, Fixed Release, and Fixed Build.  - Use <em>~</em> for operator <em>contains</em>, and <em>!~</em> for operator <em>not contains</em>. Eg: instead of <em>Name contains \"login\"</em>, use <em>Name ~ \"login\"</em>  - Use operator <em>is not empty</em> in the following way: <strong>is 'not empty'</strong>. Eg: \"Name is 'not empty'\"  - For builds and test-cycles, you can use the following additional criterion: <em>Created Date</em> and <em>Last Modified Date</em> in a query. Eg: 'Created Date' > '2021-05-07T03:15:37.652Z'  - For test-logs, you can use the following additional criterion: <em>Execution Start Date</em> and <em>Execution End Date</em> in a query. Eg: 'Execution Start Date' > '2021-05-07T03:15:37.652Z' (required)
        :param bool append_test_steps:
        :param bool include_external_properties: By default, Requirement external properties are not included in the response. Specify includeExternalProperties=true to include them.
        :param int page_size: The result is paginated. By the default, the number of objects in each page is 100 if this is omitted. You can specify your custom number (up to 999) in this parameter
        :param int page: By default the first page is returned but you can specify any page number to retrieve objects
        :return: PagedResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'body', 'append_test_steps', 'include_external_properties', 'page_size', 'page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_artifact" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `search_artifact`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `search_artifact`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []
        if 'append_test_steps' in params:
            query_params.append(('appendTestSteps', params['append_test_steps']))  # noqa: E501
        if 'include_external_properties' in params:
            query_params.append(('includeExternalProperties', params['include_external_properties']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/search', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_comment_with_query(self, project_id, body, **kwargs):  # noqa: E501
        """Queries Comments  # noqa: E501

        To search for comments  <strong>qTest Manager version:</strong> 7.6+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_comment_with_query(project_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param CommentQueryParams body: <em>object_type (required):</em> valid values include requirements, test-cases, test-runs and defects  <em>object:</em> ID of the object from which you want to retrieve comments  <em>authors:</em> ID of the user who made the comments  <em>start:</em> This value needs to be in ISO Date format  <em>end:</em> This value needs to be in ISO Date format (required)
        :param int page: By default the first page is returned but you can specify any page number to retrieve objects
        :param int page_size: The result is paginated. By the default, the number of objects in each page is 100 if this is omitted. You can specify your custom number (up to 999) in this parameter
        :return: QueryCommentResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_comment_with_query_with_http_info(project_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.search_comment_with_query_with_http_info(project_id, body, **kwargs)  # noqa: E501
            return data

    def search_comment_with_query_with_http_info(self, project_id, body, **kwargs):  # noqa: E501
        """Queries Comments  # noqa: E501

        To search for comments  <strong>qTest Manager version:</strong> 7.6+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_comment_with_query_with_http_info(project_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param CommentQueryParams body: <em>object_type (required):</em> valid values include requirements, test-cases, test-runs and defects  <em>object:</em> ID of the object from which you want to retrieve comments  <em>authors:</em> ID of the user who made the comments  <em>start:</em> This value needs to be in ISO Date format  <em>end:</em> This value needs to be in ISO Date format (required)
        :param int page: By default the first page is returned but you can specify any page number to retrieve objects
        :param int page_size: The result is paginated. By the default, the number of objects in each page is 100 if this is omitted. You can specify your custom number (up to 999) in this parameter
        :return: QueryCommentResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'body', 'page', 'page_size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_comment_with_query" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `search_comment_with_query`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `search_comment_with_query`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/comments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QueryCommentResource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
