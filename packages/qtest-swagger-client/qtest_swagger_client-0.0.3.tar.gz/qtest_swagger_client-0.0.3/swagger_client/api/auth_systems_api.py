# coding: utf-8

"""
    qTest Manager API Version 11.0.0 - 2023.6

    qTest Manager API Version 11.0.0 - 2023.6  # noqa: E501

    OpenAPI spec version: 11.0.0 - 2023.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class AuthSystemsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_all(self, **kwargs):  # noqa: E501
        """Get multiple Authentication Systems  # noqa: E501

        To get multiple Authentication Systems  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: AuthSystemResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_all_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_all_with_http_info(self, **kwargs):  # noqa: E501
        """Get multiple Authentication Systems  # noqa: E501

        To get multiple Authentication Systems  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: AuthSystemResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/auth-systems', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AuthSystemResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_ldap_users(self, ldap_auth_config_id, **kwargs):  # noqa: E501
        """Get all LDAP users of an authentication LDAP config  # noqa: E501

        Get all LDAP users of an authentication LDAP config with pagination supported. Users are mapped with qTest users won't be returned.  If <strong>pageSize</strong> and <strong>page</strong> is omitted, all users will be returned without any default paging data.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_ldap_users(ldap_auth_config_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int ldap_auth_config_id: Id of the Authentication config (required)
        :param int page_size: Number of of item count per page. If this <strong>pageSize</strong> and <strong>page</strong> is omitted, all users will be returned without any default paging data.
        :param int page: Page number that you want to get the result. If this <strong>pageSize</strong> and <strong>page</strong> is omitted, all users will be returned without any default paging data.
        :return: LDAPUsersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_ldap_users_with_http_info(ldap_auth_config_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_ldap_users_with_http_info(ldap_auth_config_id, **kwargs)  # noqa: E501
            return data

    def get_all_ldap_users_with_http_info(self, ldap_auth_config_id, **kwargs):  # noqa: E501
        """Get all LDAP users of an authentication LDAP config  # noqa: E501

        Get all LDAP users of an authentication LDAP config with pagination supported. Users are mapped with qTest users won't be returned.  If <strong>pageSize</strong> and <strong>page</strong> is omitted, all users will be returned without any default paging data.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_ldap_users_with_http_info(ldap_auth_config_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int ldap_auth_config_id: Id of the Authentication config (required)
        :param int page_size: Number of of item count per page. If this <strong>pageSize</strong> and <strong>page</strong> is omitted, all users will be returned without any default paging data.
        :param int page: Page number that you want to get the result. If this <strong>pageSize</strong> and <strong>page</strong> is omitted, all users will be returned without any default paging data.
        :return: LDAPUsersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ldap_auth_config_id', 'page_size', 'page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_ldap_users" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ldap_auth_config_id' is set
        if self.api_client.client_side_validation and ('ldap_auth_config_id' not in params or
                                                       params['ldap_auth_config_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `ldap_auth_config_id` when calling `get_all_ldap_users`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ldap_auth_config_id' in params:
            path_params['ldapAuthConfigId'] = params['ldap_auth_config_id']  # noqa: E501

        query_params = []
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/auth-systems/ldap/{ldapAuthConfigId}/users', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LDAPUsersResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def import_l_dap_users(self, ldap_auth_config_id, body, **kwargs):  # noqa: E501
        """Associate Manager users with LDAP users  # noqa: E501

        Associate Manager users with LDAP users authentication LDAP config  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.import_l_dap_users(ldap_auth_config_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int ldap_auth_config_id: Id of the Authentication config (required)
        :param list[LdapUserResource] body: (required)
        :param bool merge_user: Option to merge LDAP account to qTest account if qTest email already exists in qTest (support true/false value, <strong>default = false</strong>)
        :return: ResponseWrapper
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.import_l_dap_users_with_http_info(ldap_auth_config_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.import_l_dap_users_with_http_info(ldap_auth_config_id, body, **kwargs)  # noqa: E501
            return data

    def import_l_dap_users_with_http_info(self, ldap_auth_config_id, body, **kwargs):  # noqa: E501
        """Associate Manager users with LDAP users  # noqa: E501

        Associate Manager users with LDAP users authentication LDAP config  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.import_l_dap_users_with_http_info(ldap_auth_config_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int ldap_auth_config_id: Id of the Authentication config (required)
        :param list[LdapUserResource] body: (required)
        :param bool merge_user: Option to merge LDAP account to qTest account if qTest email already exists in qTest (support true/false value, <strong>default = false</strong>)
        :return: ResponseWrapper
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ldap_auth_config_id', 'body', 'merge_user']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method import_l_dap_users" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ldap_auth_config_id' is set
        if self.api_client.client_side_validation and ('ldap_auth_config_id' not in params or
                                                       params['ldap_auth_config_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `ldap_auth_config_id` when calling `import_l_dap_users`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `import_l_dap_users`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ldap_auth_config_id' in params:
            path_params['ldapAuthConfigId'] = params['ldap_auth_config_id']  # noqa: E501

        query_params = []
        if 'merge_user' in params:
            query_params.append(('mergeUser', params['merge_user']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/auth-systems/ldap/{ldapAuthConfigId}/import', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResponseWrapper',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
