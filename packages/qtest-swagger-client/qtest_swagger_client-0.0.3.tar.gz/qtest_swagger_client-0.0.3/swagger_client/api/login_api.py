# coding: utf-8

"""
    qTest Manager API Version 11.0.0 - 2023.6

    qTest Manager API Version 11.0.0 - 2023.6  # noqa: E501

    OpenAPI spec version: 11.0.0 - 2023.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class LoginApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def post_access_token(self, **kwargs):  # noqa: E501
        """Log in  # noqa: E501

        To authenticate the API client against qTest Manager and acquire authorized access token.    Note: Please choose parameter <em>content-type=application/x-www-form-urlencoded</em>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_access_token(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str grant_type: Use <em>grant_type=password</em> or <em>grant_type=refresh_token</em> to refresh access token
        :param str username: Your qTest Manager username
        :param str password: Your qTest Manager password
        :param str refresh_token: qTest refresh token to refresh access token associate with provided refresh token
        :param str authorization: Basic + [base64 string of \"<strong>your qTest site name and colon</strong>\"]  or Basic cXRlc3QtYXBpOg== [base64 string of \"<strong>qtest-api:</strong>\"] to use refresh token (grant_type = refresh_token)  Example: qTest Manager site is: apitryout.qtestnet.com then site name is: apitryout + ':', then Authorization is: Basic YXBpdHJ5b3V0Og==
        :return: OAuthResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_access_token_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_access_token_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_access_token_with_http_info(self, **kwargs):  # noqa: E501
        """Log in  # noqa: E501

        To authenticate the API client against qTest Manager and acquire authorized access token.    Note: Please choose parameter <em>content-type=application/x-www-form-urlencoded</em>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_access_token_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str grant_type: Use <em>grant_type=password</em> or <em>grant_type=refresh_token</em> to refresh access token
        :param str username: Your qTest Manager username
        :param str password: Your qTest Manager password
        :param str refresh_token: qTest refresh token to refresh access token associate with provided refresh token
        :param str authorization: Basic + [base64 string of \"<strong>your qTest site name and colon</strong>\"]  or Basic cXRlc3QtYXBpOg== [base64 string of \"<strong>qtest-api:</strong>\"] to use refresh token (grant_type = refresh_token)  Example: qTest Manager site is: apitryout.qtestnet.com then site name is: apitryout + ':', then Authorization is: Basic YXBpdHJ5b3V0Og==
        :return: OAuthResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['grant_type', 'username', 'password', 'refresh_token', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_access_token" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}
        if 'grant_type' in params:
            form_params.append(('grant_type', params['grant_type']))  # noqa: E501
        if 'username' in params:
            form_params.append(('username', params['username']))  # noqa: E501
        if 'password' in params:
            form_params.append(('password', params['password']))  # noqa: E501
        if 'refresh_token' in params:
            form_params.append(('refresh_token', params['refresh_token']))  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/oauth/token', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OAuthResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def token_status(self, **kwargs):  # noqa: E501
        """Gets status of access token  # noqa: E501

        Gets status of access token  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.token_status(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: The qTest access token you want to check
        :return: OAuthTokenStatusVM
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.token_status_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.token_status_with_http_info(**kwargs)  # noqa: E501
            return data

    def token_status_with_http_info(self, **kwargs):  # noqa: E501
        """Gets status of access token  # noqa: E501

        Gets status of access token  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.token_status_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str authorization: The qTest access token you want to check
        :return: OAuthTokenStatusVM
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method token_status" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/oauth/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OAuthTokenStatusVM',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
