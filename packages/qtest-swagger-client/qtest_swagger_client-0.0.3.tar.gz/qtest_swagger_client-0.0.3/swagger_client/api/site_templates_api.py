# coding: utf-8

"""
    qTest Manager API Version 11.0.0 - 2023.6

    qTest Manager API Version 11.0.0 - 2023.6  # noqa: E501

    OpenAPI spec version: 11.0.0 - 2023.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class SiteTemplatesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_projects(self, template_id, body, **kwargs):  # noqa: E501
        """Apply template to existing projects.  # noqa: E501

        To apply template to existing projects.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_projects(template_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int template_id: Template id which you want to apply to existing projects. (required)
        :param ApplyTemplateQueryObject body: <em>project_ids:</em>List of Project IDs  <em>create_new_site_field_values:</em> Option to allow user to decide if they want to create new values to the site fields or keep the value private to the project when there are \"unique values in project fields that do not exist in site fields\" (default: true). (required)
        :return: list[ProjectResource]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_projects_with_http_info(template_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.add_projects_with_http_info(template_id, body, **kwargs)  # noqa: E501
            return data

    def add_projects_with_http_info(self, template_id, body, **kwargs):  # noqa: E501
        """Apply template to existing projects.  # noqa: E501

        To apply template to existing projects.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_projects_with_http_info(template_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int template_id: Template id which you want to apply to existing projects. (required)
        :param ApplyTemplateQueryObject body: <em>project_ids:</em>List of Project IDs  <em>create_new_site_field_values:</em> Option to allow user to decide if they want to create new values to the site fields or keep the value private to the project when there are \"unique values in project fields that do not exist in site fields\" (default: true). (required)
        :return: list[ProjectResource]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['template_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_projects" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'template_id' is set
        if self.api_client.client_side_validation and ('template_id' not in params or
                                                       params['template_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `template_id` when calling `add_projects`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `add_projects`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'template_id' in params:
            path_params['templateId'] = params['template_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/site-templates/{templateId}/projects', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ProjectResource]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_site_templates(self, **kwargs):  # noqa: E501
        """Get all site-templates  # noqa: E501

        To retrieve all site-templates  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_site_templates(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[SiteTemplateResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_site_templates_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_all_site_templates_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_all_site_templates_with_http_info(self, **kwargs):  # noqa: E501
        """Get all site-templates  # noqa: E501

        To retrieve all site-templates  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_site_templates_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[SiteTemplateResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_site_templates" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/site-templates', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[SiteTemplateResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_project_templates(self, template_id, body, **kwargs):  # noqa: E501
        """Remove projects from a site template.  # noqa: E501

        To remove projects from a site template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_project_templates(template_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int template_id: Template id which you want to detach it's projects. If <strong>0</strong> (unassigned template id) is placing here, remove all site templates associated to provided project ids list. (required)
        :param list[int] body: Array of project ids that you want to detach from site template. (required)
        :return: list[ProjectResource]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_project_templates_with_http_info(template_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_project_templates_with_http_info(template_id, body, **kwargs)  # noqa: E501
            return data

    def remove_project_templates_with_http_info(self, template_id, body, **kwargs):  # noqa: E501
        """Remove projects from a site template.  # noqa: E501

        To remove projects from a site template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_project_templates_with_http_info(template_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int template_id: Template id which you want to detach it's projects. If <strong>0</strong> (unassigned template id) is placing here, remove all site templates associated to provided project ids list. (required)
        :param list[int] body: Array of project ids that you want to detach from site template. (required)
        :return: list[ProjectResource]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['template_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_project_templates" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'template_id' is set
        if self.api_client.client_side_validation and ('template_id' not in params or
                                                       params['template_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `template_id` when calling `remove_project_templates`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `remove_project_templates`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'template_id' in params:
            path_params['templateId'] = params['template_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/site-templates/{templateId}/projects', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ProjectResource]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
