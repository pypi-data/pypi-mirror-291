# coding: utf-8

"""
    qTest Manager API Version 11.0.0 - 2023.6

    qTest Manager API Version 11.0.0 - 2023.6  # noqa: E501

    OpenAPI spec version: 11.0.0 - 2023.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class FieldApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_custom_field(self, project_id, body, object_type, **kwargs):  # noqa: E501
        """Creates a Custom Field of an Object Type  # noqa: E501

        To create a new custom Field for Release, Build, Requirement, Test Case, Test Suite, Test Run, or Defect  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_custom_field(project_id, body, object_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param FieldResource body: The field's properties and values  <strong>data_type (required):</strong> specify the field type. Its valid values include  - 1 - Text box  - 2 - Text area  - 3 - Combo box  - 4 - Date picker  - 5 - User list  - 6 - Rich text editor  - 7 - Number  - 8 - Check box  - 9 - Date time picker  - 12 - URL  - 17 - Multiple selection combobox  In case you are creating a multiple picklist typed field (data_type's value is 8 or 17), you will need to specify <em>multiple=true</em>  In case you are creating a picklist typed field, you can specify the field's values in the <em>allowed_values</em> array (required)
        :param str object_type: Valid values include releases, builds, requirements, test-cases, defects, test-suites and test-runs (required)
        :return: FieldResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_custom_field_with_http_info(project_id, body, object_type, **kwargs)  # noqa: E501
        else:
            (data) = self.create_custom_field_with_http_info(project_id, body, object_type, **kwargs)  # noqa: E501
            return data

    def create_custom_field_with_http_info(self, project_id, body, object_type, **kwargs):  # noqa: E501
        """Creates a Custom Field of an Object Type  # noqa: E501

        To create a new custom Field for Release, Build, Requirement, Test Case, Test Suite, Test Run, or Defect  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_custom_field_with_http_info(project_id, body, object_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param FieldResource body: The field's properties and values  <strong>data_type (required):</strong> specify the field type. Its valid values include  - 1 - Text box  - 2 - Text area  - 3 - Combo box  - 4 - Date picker  - 5 - User list  - 6 - Rich text editor  - 7 - Number  - 8 - Check box  - 9 - Date time picker  - 12 - URL  - 17 - Multiple selection combobox  In case you are creating a multiple picklist typed field (data_type's value is 8 or 17), you will need to specify <em>multiple=true</em>  In case you are creating a picklist typed field, you can specify the field's values in the <em>allowed_values</em> array (required)
        :param str object_type: Valid values include releases, builds, requirements, test-cases, defects, test-suites and test-runs (required)
        :return: FieldResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'body', 'object_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_custom_field" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `create_custom_field`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `create_custom_field`")  # noqa: E501
        # verify the required parameter 'object_type' is set
        if self.api_client.client_side_validation and ('object_type' not in params or
                                                       params['object_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_type` when calling `create_custom_field`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'object_type' in params:
            path_params['objectType'] = params['object_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/settings/{objectType}/fields', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FieldResource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_custom_site_field(self, object_type, body, **kwargs):  # noqa: E501
        """Creates a Custom Site Field of an Object Type  # noqa: E501

        To create a new Site Field for Release, Build, Requirement, Test Case, Test Step, Test Suite, Test Run, or Defect  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_custom_site_field(object_type, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_type: Valid values include releases, builds, requirements, test-cases, test-steps, defects, test-suites and test-runs (required)
        :param FieldInputResource body: The Site field's properties and values  <strong>label (required)</strong>: specify display name of the field  <strong>data_type (required)</strong>: specify the field type. Its valid values include  - 1 - Text box  - 2 - Text area  - 3 - Combo box  - 4 - Date picker  - 5 - User list  - 6 - Rich text editor  - 7 - Number  - 8 - Check box  - 9 - Date time picker  - 12 - URL  - 17 - Multiple selection combobox  In case you are creating a multiple picklist typed field (data_type's value is 8 or 17), you will need to specify <em>multiple=true</em>  In case you are creating a picklist typed field, you can specify the field's values in the <em>allowed_values array</em>  Order is not applicable when creating new field  For Test Steps,  - You can not create more than 2 custom fields   - You can not set field as required   - Number of characters in label should be less than or equal to 16   - You can only select Rich text editor / Combo Box / User List as <em>data_type</em>  (required)
        :return: FieldResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_custom_site_field_with_http_info(object_type, body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_custom_site_field_with_http_info(object_type, body, **kwargs)  # noqa: E501
            return data

    def create_custom_site_field_with_http_info(self, object_type, body, **kwargs):  # noqa: E501
        """Creates a Custom Site Field of an Object Type  # noqa: E501

        To create a new Site Field for Release, Build, Requirement, Test Case, Test Step, Test Suite, Test Run, or Defect  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_custom_site_field_with_http_info(object_type, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_type: Valid values include releases, builds, requirements, test-cases, test-steps, defects, test-suites and test-runs (required)
        :param FieldInputResource body: The Site field's properties and values  <strong>label (required)</strong>: specify display name of the field  <strong>data_type (required)</strong>: specify the field type. Its valid values include  - 1 - Text box  - 2 - Text area  - 3 - Combo box  - 4 - Date picker  - 5 - User list  - 6 - Rich text editor  - 7 - Number  - 8 - Check box  - 9 - Date time picker  - 12 - URL  - 17 - Multiple selection combobox  In case you are creating a multiple picklist typed field (data_type's value is 8 or 17), you will need to specify <em>multiple=true</em>  In case you are creating a picklist typed field, you can specify the field's values in the <em>allowed_values array</em>  Order is not applicable when creating new field  For Test Steps,  - You can not create more than 2 custom fields   - You can not set field as required   - Number of characters in label should be less than or equal to 16   - You can only select Rich text editor / Combo Box / User List as <em>data_type</em>  (required)
        :return: FieldResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_type', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_custom_site_field" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_type' is set
        if self.api_client.client_side_validation and ('object_type' not in params or
                                                       params['object_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_type` when calling `create_custom_site_field`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `create_custom_site_field`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_type' in params:
            path_params['objectType'] = params['object_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/fields/{objectType}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FieldResource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_project_field_allowed_values(self, project_id, object_type, field_id, body, **kwargs):  # noqa: E501
        """Creates allowed values of a Project Field  # noqa: E501

        Creates maximum 100 allowed values of a Project Field with Combo box/Multi selection combo box/Check box data type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_project_field_allowed_values(project_id, object_type, field_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param str object_type: Valid values include releases, builds, requirements, test-cases, defects, test-suites and test-runs (required)
        :param int field_id: ID of the field (required)
        :param list[AllowedValueResource] body: (required)
        :return: AllowedValueResponseResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_project_field_allowed_values_with_http_info(project_id, object_type, field_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_project_field_allowed_values_with_http_info(project_id, object_type, field_id, body, **kwargs)  # noqa: E501
            return data

    def create_project_field_allowed_values_with_http_info(self, project_id, object_type, field_id, body, **kwargs):  # noqa: E501
        """Creates allowed values of a Project Field  # noqa: E501

        Creates maximum 100 allowed values of a Project Field with Combo box/Multi selection combo box/Check box data type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_project_field_allowed_values_with_http_info(project_id, object_type, field_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param str object_type: Valid values include releases, builds, requirements, test-cases, defects, test-suites and test-runs (required)
        :param int field_id: ID of the field (required)
        :param list[AllowedValueResource] body: (required)
        :return: AllowedValueResponseResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'object_type', 'field_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_project_field_allowed_values" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `create_project_field_allowed_values`")  # noqa: E501
        # verify the required parameter 'object_type' is set
        if self.api_client.client_side_validation and ('object_type' not in params or
                                                       params['object_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_type` when calling `create_project_field_allowed_values`")  # noqa: E501
        # verify the required parameter 'field_id' is set
        if self.api_client.client_side_validation and ('field_id' not in params or
                                                       params['field_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `field_id` when calling `create_project_field_allowed_values`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `create_project_field_allowed_values`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'object_type' in params:
            path_params['objectType'] = params['object_type']  # noqa: E501
        if 'field_id' in params:
            path_params['fieldId'] = params['field_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/settings/{objectType}/fields/{fieldId}/allowed-values', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AllowedValueResponseResource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_site_field_allowed_values(self, object_type, field_id, body, **kwargs):  # noqa: E501
        """Creates allowed values of a Site Field  # noqa: E501

        Creates maximum 100 allowed values of a Site Field with Combo box/Multi selection combo box/Check box data type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_site_field_allowed_values(object_type, field_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_type: Valid values include releases, builds, requirements, test-cases, test-steps, defects, test-suites and test-runs (required)
        :param int field_id: ID of the field (required)
        :param list[AllowedValueResource] body: (required)
        :return: AllowedValueResponseResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_site_field_allowed_values_with_http_info(object_type, field_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_site_field_allowed_values_with_http_info(object_type, field_id, body, **kwargs)  # noqa: E501
            return data

    def create_site_field_allowed_values_with_http_info(self, object_type, field_id, body, **kwargs):  # noqa: E501
        """Creates allowed values of a Site Field  # noqa: E501

        Creates maximum 100 allowed values of a Site Field with Combo box/Multi selection combo box/Check box data type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_site_field_allowed_values_with_http_info(object_type, field_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_type: Valid values include releases, builds, requirements, test-cases, test-steps, defects, test-suites and test-runs (required)
        :param int field_id: ID of the field (required)
        :param list[AllowedValueResource] body: (required)
        :return: AllowedValueResponseResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_type', 'field_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_site_field_allowed_values" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_type' is set
        if self.api_client.client_side_validation and ('object_type' not in params or
                                                       params['object_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_type` when calling `create_site_field_allowed_values`")  # noqa: E501
        # verify the required parameter 'field_id' is set
        if self.api_client.client_side_validation and ('field_id' not in params or
                                                       params['field_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `field_id` when calling `create_site_field_allowed_values`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `create_site_field_allowed_values`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_type' in params:
            path_params['objectType'] = params['object_type']  # noqa: E501
        if 'field_id' in params:
            path_params['fieldId'] = params['field_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/fields/{objectType}/{fieldId}/allowed-values', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AllowedValueResponseResource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_custom_field(self, project_id, object_type, field_id, **kwargs):  # noqa: E501
        """Deletes a Custom Field of an Object Type  # noqa: E501

        To delete a custom field (at project level) for Release, Build, Requirement, Test Case, Test Suite, Test Run, or Defect  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_custom_field(project_id, object_type, field_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param str object_type: Valid values include releases, builds, requirements, test-cases, defects, test-suites and test-runs (required)
        :param int field_id: ID of the custom field (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_custom_field_with_http_info(project_id, object_type, field_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_custom_field_with_http_info(project_id, object_type, field_id, **kwargs)  # noqa: E501
            return data

    def delete_custom_field_with_http_info(self, project_id, object_type, field_id, **kwargs):  # noqa: E501
        """Deletes a Custom Field of an Object Type  # noqa: E501

        To delete a custom field (at project level) for Release, Build, Requirement, Test Case, Test Suite, Test Run, or Defect  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_custom_field_with_http_info(project_id, object_type, field_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param str object_type: Valid values include releases, builds, requirements, test-cases, defects, test-suites and test-runs (required)
        :param int field_id: ID of the custom field (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'object_type', 'field_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_custom_field" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `delete_custom_field`")  # noqa: E501
        # verify the required parameter 'object_type' is set
        if self.api_client.client_side_validation and ('object_type' not in params or
                                                       params['object_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_type` when calling `delete_custom_field`")  # noqa: E501
        # verify the required parameter 'field_id' is set
        if self.api_client.client_side_validation and ('field_id' not in params or
                                                       params['field_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `field_id` when calling `delete_custom_field`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'object_type' in params:
            path_params['objectType'] = params['object_type']  # noqa: E501
        if 'field_id' in params:
            path_params['fieldId'] = params['field_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/settings/{objectType}/fields/{fieldId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_custom_site_field(self, object_type, field_id, **kwargs):  # noqa: E501
        """Deletes a Custom Site Field of an Object Type  # noqa: E501

        To delete a custom field (at site level) for Release, Build, Requirement, Test Case, Test Step, Test Suite, Test Run, or Defect  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_custom_site_field(object_type, field_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_type: Valid values include releases, builds, requirements, test-cases, test-steps, defects, test-suites and test-runs (required)
        :param int field_id: ID of the custom field (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_custom_site_field_with_http_info(object_type, field_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_custom_site_field_with_http_info(object_type, field_id, **kwargs)  # noqa: E501
            return data

    def delete_custom_site_field_with_http_info(self, object_type, field_id, **kwargs):  # noqa: E501
        """Deletes a Custom Site Field of an Object Type  # noqa: E501

        To delete a custom field (at site level) for Release, Build, Requirement, Test Case, Test Step, Test Suite, Test Run, or Defect  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_custom_site_field_with_http_info(object_type, field_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_type: Valid values include releases, builds, requirements, test-cases, test-steps, defects, test-suites and test-runs (required)
        :param int field_id: ID of the custom field (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_type', 'field_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_custom_site_field" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_type' is set
        if self.api_client.client_side_validation and ('object_type' not in params or
                                                       params['object_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_type` when calling `delete_custom_site_field`")  # noqa: E501
        # verify the required parameter 'field_id' is set
        if self.api_client.client_side_validation and ('field_id' not in params or
                                                       params['field_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `field_id` when calling `delete_custom_site_field`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_type' in params:
            path_params['objectType'] = params['object_type']  # noqa: E501
        if 'field_id' in params:
            path_params['fieldId'] = params['field_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/fields/{objectType}/{fieldId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_project_field_value(self, project_id, object_type, field_id, value, **kwargs):  # noqa: E501
        """Deletes an allowed value of a Project Field  # noqa: E501

        To delete an allowed value of a Field (at project level) with Combo box/Multi selection combo box/Check box data type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_project_field_value(project_id, object_type, field_id, value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param str object_type: Valid values include releases, builds, requirements, test-cases, defects, test-suites and test-runs (required)
        :param int field_id: ID of the field (required)
        :param int value: ID (property \"value\") of allowed value (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_project_field_value_with_http_info(project_id, object_type, field_id, value, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_project_field_value_with_http_info(project_id, object_type, field_id, value, **kwargs)  # noqa: E501
            return data

    def delete_project_field_value_with_http_info(self, project_id, object_type, field_id, value, **kwargs):  # noqa: E501
        """Deletes an allowed value of a Project Field  # noqa: E501

        To delete an allowed value of a Field (at project level) with Combo box/Multi selection combo box/Check box data type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_project_field_value_with_http_info(project_id, object_type, field_id, value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param str object_type: Valid values include releases, builds, requirements, test-cases, defects, test-suites and test-runs (required)
        :param int field_id: ID of the field (required)
        :param int value: ID (property \"value\") of allowed value (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'object_type', 'field_id', 'value']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_project_field_value" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `delete_project_field_value`")  # noqa: E501
        # verify the required parameter 'object_type' is set
        if self.api_client.client_side_validation and ('object_type' not in params or
                                                       params['object_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_type` when calling `delete_project_field_value`")  # noqa: E501
        # verify the required parameter 'field_id' is set
        if self.api_client.client_side_validation and ('field_id' not in params or
                                                       params['field_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `field_id` when calling `delete_project_field_value`")  # noqa: E501
        # verify the required parameter 'value' is set
        if self.api_client.client_side_validation and ('value' not in params or
                                                       params['value'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `value` when calling `delete_project_field_value`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'object_type' in params:
            path_params['objectType'] = params['object_type']  # noqa: E501
        if 'field_id' in params:
            path_params['fieldId'] = params['field_id']  # noqa: E501
        if 'value' in params:
            path_params['value'] = params['value']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/settings/{objectType}/fields/{fieldId}/allowed-values/{value}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_site_field_value(self, object_type, field_id, value, **kwargs):  # noqa: E501
        """Deletes an allowed value of a Site Field  # noqa: E501

        To delete an allowed value of a Site Field with Combo box/Multi selection combo box/Check box data type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_site_field_value(object_type, field_id, value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_type: Valid values include releases, builds, requirements, test-cases, test-steps, defects, test-suites and test-runs (required)
        :param int field_id: ID of the field (required)
        :param int value: ID (property \"value\") of allowed value (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_site_field_value_with_http_info(object_type, field_id, value, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_site_field_value_with_http_info(object_type, field_id, value, **kwargs)  # noqa: E501
            return data

    def delete_site_field_value_with_http_info(self, object_type, field_id, value, **kwargs):  # noqa: E501
        """Deletes an allowed value of a Site Field  # noqa: E501

        To delete an allowed value of a Site Field with Combo box/Multi selection combo box/Check box data type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_site_field_value_with_http_info(object_type, field_id, value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_type: Valid values include releases, builds, requirements, test-cases, test-steps, defects, test-suites and test-runs (required)
        :param int field_id: ID of the field (required)
        :param int value: ID (property \"value\") of allowed value (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_type', 'field_id', 'value']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_site_field_value" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_type' is set
        if self.api_client.client_side_validation and ('object_type' not in params or
                                                       params['object_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_type` when calling `delete_site_field_value`")  # noqa: E501
        # verify the required parameter 'field_id' is set
        if self.api_client.client_side_validation and ('field_id' not in params or
                                                       params['field_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `field_id` when calling `delete_site_field_value`")  # noqa: E501
        # verify the required parameter 'value' is set
        if self.api_client.client_side_validation and ('value' not in params or
                                                       params['value'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `value` when calling `delete_site_field_value`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_type' in params:
            path_params['objectType'] = params['object_type']  # noqa: E501
        if 'field_id' in params:
            path_params['fieldId'] = params['field_id']  # noqa: E501
        if 'value' in params:
            path_params['value'] = params['value']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/fields/{objectType}/{fieldId}/allowed-values/{value}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_site_fields(self, object_type, **kwargs):  # noqa: E501
        """Gets all site field of an object type  # noqa: E501

        To get all fields (at site level) for Release, Build, Requirement, Test Case, Test Step, Test Suite, Test Run, or Defect  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_site_fields(object_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_type: Valid values include releases, builds, requirements, test-cases, test-steps, defects, test-suites and test-runs (required)
        :param int page: By default the first page is returned but you can specify any page number to retrieve objects
        :param int page_size: The result is paginated. By the default, the number of objects in each page is 100 if this is omitted. You can specify your custom number (up to 999) in this parameter
        :return: FieldResourceSwagger
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_site_fields_with_http_info(object_type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_site_fields_with_http_info(object_type, **kwargs)  # noqa: E501
            return data

    def get_all_site_fields_with_http_info(self, object_type, **kwargs):  # noqa: E501
        """Gets all site field of an object type  # noqa: E501

        To get all fields (at site level) for Release, Build, Requirement, Test Case, Test Step, Test Suite, Test Run, or Defect  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_site_fields_with_http_info(object_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_type: Valid values include releases, builds, requirements, test-cases, test-steps, defects, test-suites and test-runs (required)
        :param int page: By default the first page is returned but you can specify any page number to retrieve objects
        :param int page_size: The result is paginated. By the default, the number of objects in each page is 100 if this is omitted. You can specify your custom number (up to 999) in this parameter
        :return: FieldResourceSwagger
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_type', 'page', 'page_size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_site_fields" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_type' is set
        if self.api_client.client_side_validation and ('object_type' not in params or
                                                       params['object_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_type` when calling `get_all_site_fields`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_type' in params:
            path_params['objectType'] = params['object_type']  # noqa: E501

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/fields/{objectType}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FieldResourceSwagger',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_custom_field(self, project_id, object_type, field_id, **kwargs):  # noqa: E501
        """Gets a Custom Field of an Object Type  # noqa: E501

        To get a custom field (at project level) for Release, Build, Requirement, Test Case, Test Step, Test Suite, Test Run, or Defect  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_custom_field(project_id, object_type, field_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param str object_type: Valid values include releases, builds, requirements, test-cases, test-steps, defects, test-suites and test-runs (required)
        :param int field_id: ID of the custom field (required)
        :return: FieldResourceSwagger
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_custom_field_with_http_info(project_id, object_type, field_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_custom_field_with_http_info(project_id, object_type, field_id, **kwargs)  # noqa: E501
            return data

    def get_custom_field_with_http_info(self, project_id, object_type, field_id, **kwargs):  # noqa: E501
        """Gets a Custom Field of an Object Type  # noqa: E501

        To get a custom field (at project level) for Release, Build, Requirement, Test Case, Test Step, Test Suite, Test Run, or Defect  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_custom_field_with_http_info(project_id, object_type, field_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param str object_type: Valid values include releases, builds, requirements, test-cases, test-steps, defects, test-suites and test-runs (required)
        :param int field_id: ID of the custom field (required)
        :return: FieldResourceSwagger
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'object_type', 'field_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_custom_field" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `get_custom_field`")  # noqa: E501
        # verify the required parameter 'object_type' is set
        if self.api_client.client_side_validation and ('object_type' not in params or
                                                       params['object_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_type` when calling `get_custom_field`")  # noqa: E501
        # verify the required parameter 'field_id' is set
        if self.api_client.client_side_validation and ('field_id' not in params or
                                                       params['field_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `field_id` when calling `get_custom_field`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'object_type' in params:
            path_params['objectType'] = params['object_type']  # noqa: E501
        if 'field_id' in params:
            path_params['fieldId'] = params['field_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/settings/{objectType}/fields/{fieldId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FieldResourceSwagger',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_custom_site_field(self, object_type, field_id, **kwargs):  # noqa: E501
        """Gets a Custom Site Field of an Object Type  # noqa: E501

        To get a custom field (at site level) for Release, Build, Requirement, Test Case, Test Step, Test Suite, Test Run, or Defect  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_custom_site_field(object_type, field_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_type: Valid values include releases, builds, requirements, test-cases, test-steps, defects, test-suites and test-runs (required)
        :param int field_id: ID of the custom field (required)
        :return: FieldResourceSwagger
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_custom_site_field_with_http_info(object_type, field_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_custom_site_field_with_http_info(object_type, field_id, **kwargs)  # noqa: E501
            return data

    def get_custom_site_field_with_http_info(self, object_type, field_id, **kwargs):  # noqa: E501
        """Gets a Custom Site Field of an Object Type  # noqa: E501

        To get a custom field (at site level) for Release, Build, Requirement, Test Case, Test Step, Test Suite, Test Run, or Defect  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_custom_site_field_with_http_info(object_type, field_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_type: Valid values include releases, builds, requirements, test-cases, test-steps, defects, test-suites and test-runs (required)
        :param int field_id: ID of the custom field (required)
        :return: FieldResourceSwagger
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_type', 'field_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_custom_site_field" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_type' is set
        if self.api_client.client_side_validation and ('object_type' not in params or
                                                       params['object_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_type` when calling `get_custom_site_field`")  # noqa: E501
        # verify the required parameter 'field_id' is set
        if self.api_client.client_side_validation and ('field_id' not in params or
                                                       params['field_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `field_id` when calling `get_custom_site_field`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_type' in params:
            path_params['objectType'] = params['object_type']  # noqa: E501
        if 'field_id' in params:
            path_params['fieldId'] = params['field_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/fields/{objectType}/{fieldId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FieldResourceSwagger',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_fields(self, project_id, object_type, **kwargs):  # noqa: E501
        """Gets all Fields of an Object Type  # noqa: E501

        To retrieve Fields of an Object Type  <strong>qTest Manager version:</strong> 4+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_fields(project_id, object_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param str object_type: Valid values include releases, builds, requirements, test-cases, test-steps, defects, test-suites and test-runs (required)
        :param bool include_inactive: By default inactive Fields are excluded from the response. Specify <em>includeInactive=true</em> to include inactive fields
        :return: list[FieldResource]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_fields_with_http_info(project_id, object_type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_fields_with_http_info(project_id, object_type, **kwargs)  # noqa: E501
            return data

    def get_fields_with_http_info(self, project_id, object_type, **kwargs):  # noqa: E501
        """Gets all Fields of an Object Type  # noqa: E501

        To retrieve Fields of an Object Type  <strong>qTest Manager version:</strong> 4+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_fields_with_http_info(project_id, object_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param str object_type: Valid values include releases, builds, requirements, test-cases, test-steps, defects, test-suites and test-runs (required)
        :param bool include_inactive: By default inactive Fields are excluded from the response. Specify <em>includeInactive=true</em> to include inactive fields
        :return: list[FieldResource]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'object_type', 'include_inactive']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_fields" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `get_fields`")  # noqa: E501
        # verify the required parameter 'object_type' is set
        if self.api_client.client_side_validation and ('object_type' not in params or
                                                       params['object_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_type` when calling `get_fields`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'object_type' in params:
            path_params['objectType'] = params['object_type']  # noqa: E501

        query_params = []
        if 'include_inactive' in params:
            query_params.append(('includeInactive', params['include_inactive']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/settings/{objectType}/fields', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[FieldResource]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_project_field_allowed_values(self, project_id, object_type, field_id, **kwargs):  # noqa: E501
        """Gets all allowed values of a Project Field  # noqa: E501

        To get all allowed values of a Project Field with Combo box/Multi selection combo box/Check box/User list data type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_project_field_allowed_values(project_id, object_type, field_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param str object_type: Valid values include releases, builds, requirements, test-cases, test-steps, defects, test-suites and test-runs (required)
        :param int field_id: ID of the field (required)
        :param int page: By default the first page is returned but you can specify any page number to retrieve objects
        :param int page_size: The result is paginated. By the default, the number of objects in each page is 100 if this is omitted. You can specify your custom number (up to 999) in this parameter
        :return: list[AllowedValueResource]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_project_field_allowed_values_with_http_info(project_id, object_type, field_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_project_field_allowed_values_with_http_info(project_id, object_type, field_id, **kwargs)  # noqa: E501
            return data

    def get_project_field_allowed_values_with_http_info(self, project_id, object_type, field_id, **kwargs):  # noqa: E501
        """Gets all allowed values of a Project Field  # noqa: E501

        To get all allowed values of a Project Field with Combo box/Multi selection combo box/Check box/User list data type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_project_field_allowed_values_with_http_info(project_id, object_type, field_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param str object_type: Valid values include releases, builds, requirements, test-cases, test-steps, defects, test-suites and test-runs (required)
        :param int field_id: ID of the field (required)
        :param int page: By default the first page is returned but you can specify any page number to retrieve objects
        :param int page_size: The result is paginated. By the default, the number of objects in each page is 100 if this is omitted. You can specify your custom number (up to 999) in this parameter
        :return: list[AllowedValueResource]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'object_type', 'field_id', 'page', 'page_size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_project_field_allowed_values" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `get_project_field_allowed_values`")  # noqa: E501
        # verify the required parameter 'object_type' is set
        if self.api_client.client_side_validation and ('object_type' not in params or
                                                       params['object_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_type` when calling `get_project_field_allowed_values`")  # noqa: E501
        # verify the required parameter 'field_id' is set
        if self.api_client.client_side_validation and ('field_id' not in params or
                                                       params['field_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `field_id` when calling `get_project_field_allowed_values`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'object_type' in params:
            path_params['objectType'] = params['object_type']  # noqa: E501
        if 'field_id' in params:
            path_params['fieldId'] = params['field_id']  # noqa: E501

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/settings/{objectType}/fields/{fieldId}/allowed-values', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AllowedValueResource]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_site_field_allowed_values(self, object_type, field_id, **kwargs):  # noqa: E501
        """Gets all allowed values of a Site Field  # noqa: E501

        To get all allowed values of a Site Field with Combo box/Multi selection combo box/Check box/User list data type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_site_field_allowed_values(object_type, field_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_type: Valid values include releases, builds, requirements, test-cases, test-steps, defects, test-suites and test-runs (required)
        :param int field_id: ID of the field (required)
        :param int page: By default the first page is returned but you can specify any page number to retrieve objects
        :param int page_size: The result is paginated. By the default, the number of objects in each page is 100 if this is omitted. You can specify your custom number (up to 999) in this parameter
        :return: list[AllowedValueResource]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_site_field_allowed_values_with_http_info(object_type, field_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_site_field_allowed_values_with_http_info(object_type, field_id, **kwargs)  # noqa: E501
            return data

    def get_site_field_allowed_values_with_http_info(self, object_type, field_id, **kwargs):  # noqa: E501
        """Gets all allowed values of a Site Field  # noqa: E501

        To get all allowed values of a Site Field with Combo box/Multi selection combo box/Check box/User list data type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_site_field_allowed_values_with_http_info(object_type, field_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_type: Valid values include releases, builds, requirements, test-cases, test-steps, defects, test-suites and test-runs (required)
        :param int field_id: ID of the field (required)
        :param int page: By default the first page is returned but you can specify any page number to retrieve objects
        :param int page_size: The result is paginated. By the default, the number of objects in each page is 100 if this is omitted. You can specify your custom number (up to 999) in this parameter
        :return: list[AllowedValueResource]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_type', 'field_id', 'page', 'page_size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_site_field_allowed_values" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_type' is set
        if self.api_client.client_side_validation and ('object_type' not in params or
                                                       params['object_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_type` when calling `get_site_field_allowed_values`")  # noqa: E501
        # verify the required parameter 'field_id' is set
        if self.api_client.client_side_validation and ('field_id' not in params or
                                                       params['field_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `field_id` when calling `get_site_field_allowed_values`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_type' in params:
            path_params['objectType'] = params['object_type']  # noqa: E501
        if 'field_id' in params:
            path_params['fieldId'] = params['field_id']  # noqa: E501

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/fields/{objectType}/{fieldId}/allowed-values', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AllowedValueResource]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_custom_field(self, project_id, object_type, field_id, body, **kwargs):  # noqa: E501
        """Updates a Custom Field of an Object Type  # noqa: E501

        To update a custom field (at project level) for Release, Build, Requirement, Test Case, Test Suite, Test Run, or Defect  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_custom_field(project_id, object_type, field_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param str object_type: Valid values include releases, builds, requirements, test-cases, defects, test-suites and test-runs (required)
        :param int field_id: ID of the custom field (required)
        :param FieldInputResource body: The Field's updated properties & values  Notes:  - Not allow to update <strong>data_type</strong>  - To delete a value of a Combo box/Checkbox or Multiple selection combo box, exclude that value out of \"allowed_values\"  - To add more allowed_values for Project Field, refer [here](#/field/createProjectFieldAllowedValues)   - To update list allowed_values of Project Field, refer [here](#/field/updateProjectFieldAllowedValues) (required)
        :return: FieldResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_custom_field_with_http_info(project_id, object_type, field_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_custom_field_with_http_info(project_id, object_type, field_id, body, **kwargs)  # noqa: E501
            return data

    def update_custom_field_with_http_info(self, project_id, object_type, field_id, body, **kwargs):  # noqa: E501
        """Updates a Custom Field of an Object Type  # noqa: E501

        To update a custom field (at project level) for Release, Build, Requirement, Test Case, Test Suite, Test Run, or Defect  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_custom_field_with_http_info(project_id, object_type, field_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param str object_type: Valid values include releases, builds, requirements, test-cases, defects, test-suites and test-runs (required)
        :param int field_id: ID of the custom field (required)
        :param FieldInputResource body: The Field's updated properties & values  Notes:  - Not allow to update <strong>data_type</strong>  - To delete a value of a Combo box/Checkbox or Multiple selection combo box, exclude that value out of \"allowed_values\"  - To add more allowed_values for Project Field, refer [here](#/field/createProjectFieldAllowedValues)   - To update list allowed_values of Project Field, refer [here](#/field/updateProjectFieldAllowedValues) (required)
        :return: FieldResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'object_type', 'field_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_custom_field" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `update_custom_field`")  # noqa: E501
        # verify the required parameter 'object_type' is set
        if self.api_client.client_side_validation and ('object_type' not in params or
                                                       params['object_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_type` when calling `update_custom_field`")  # noqa: E501
        # verify the required parameter 'field_id' is set
        if self.api_client.client_side_validation and ('field_id' not in params or
                                                       params['field_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `field_id` when calling `update_custom_field`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `update_custom_field`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'object_type' in params:
            path_params['objectType'] = params['object_type']  # noqa: E501
        if 'field_id' in params:
            path_params['fieldId'] = params['field_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/settings/{objectType}/fields/{fieldId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FieldResource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_custom_site_field(self, object_type, field_id, body, **kwargs):  # noqa: E501
        """Updates a Custom Site Field of an Object Type  # noqa: E501

        To update a custom field (at site level) for Release, Build, Requirement, Test Case, Test Step, Test Suite, Test Run, or Defect  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_custom_site_field(object_type, field_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_type: Valid values include releases, builds, requirements, test-cases, test-steps, defects, test-suites and test-runs (required)
        :param int field_id: ID of the custom field (required)
        :param FieldInputResource body: The Site Field's updated properties & values  Notes:  - Not allow to update <strong>data_type</strong>  - To delete a value of a Combo box/Checkbox or Multiple selection combo box, exclude that value out of \"allowed_values\"  - To add more allowed_values for Site Field, refer [here](#/field/createSiteFieldAllowedValues)  - To update list allowed_values of Site Field, refer [here](#/field/updateSiteFieldAllowedValues)  - Can not set field as required for test steps  - Number of characters in label should be less than or equal to 16 for test steps (required)
        :return: FieldResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_custom_site_field_with_http_info(object_type, field_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_custom_site_field_with_http_info(object_type, field_id, body, **kwargs)  # noqa: E501
            return data

    def update_custom_site_field_with_http_info(self, object_type, field_id, body, **kwargs):  # noqa: E501
        """Updates a Custom Site Field of an Object Type  # noqa: E501

        To update a custom field (at site level) for Release, Build, Requirement, Test Case, Test Step, Test Suite, Test Run, or Defect  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_custom_site_field_with_http_info(object_type, field_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_type: Valid values include releases, builds, requirements, test-cases, test-steps, defects, test-suites and test-runs (required)
        :param int field_id: ID of the custom field (required)
        :param FieldInputResource body: The Site Field's updated properties & values  Notes:  - Not allow to update <strong>data_type</strong>  - To delete a value of a Combo box/Checkbox or Multiple selection combo box, exclude that value out of \"allowed_values\"  - To add more allowed_values for Site Field, refer [here](#/field/createSiteFieldAllowedValues)  - To update list allowed_values of Site Field, refer [here](#/field/updateSiteFieldAllowedValues)  - Can not set field as required for test steps  - Number of characters in label should be less than or equal to 16 for test steps (required)
        :return: FieldResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_type', 'field_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_custom_site_field" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_type' is set
        if self.api_client.client_side_validation and ('object_type' not in params or
                                                       params['object_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_type` when calling `update_custom_site_field`")  # noqa: E501
        # verify the required parameter 'field_id' is set
        if self.api_client.client_side_validation and ('field_id' not in params or
                                                       params['field_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `field_id` when calling `update_custom_site_field`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `update_custom_site_field`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_type' in params:
            path_params['objectType'] = params['object_type']  # noqa: E501
        if 'field_id' in params:
            path_params['fieldId'] = params['field_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/fields/{objectType}/{fieldId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FieldResource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_project_field_allowed_values(self, project_id, object_type, field_id, value, body, **kwargs):  # noqa: E501
        """Updates an allowed value of a Project Field  # noqa: E501

        Update allowed values of a Project Field with Combo box/Multi selection combo box/Check box data type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_project_field_allowed_values(project_id, object_type, field_id, value, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param str object_type: Valid values include releases, builds, requirements, test-cases, defects, test-suites and test-runs (required)
        :param int field_id: ID of the field (required)
        :param int value: ID (property \"value\") of allowed value (required)
        :param AllowedValueInputResource body: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_project_field_allowed_values_with_http_info(project_id, object_type, field_id, value, body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_project_field_allowed_values_with_http_info(project_id, object_type, field_id, value, body, **kwargs)  # noqa: E501
            return data

    def update_project_field_allowed_values_with_http_info(self, project_id, object_type, field_id, value, body, **kwargs):  # noqa: E501
        """Updates an allowed value of a Project Field  # noqa: E501

        Update allowed values of a Project Field with Combo box/Multi selection combo box/Check box data type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_project_field_allowed_values_with_http_info(project_id, object_type, field_id, value, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param str object_type: Valid values include releases, builds, requirements, test-cases, defects, test-suites and test-runs (required)
        :param int field_id: ID of the field (required)
        :param int value: ID (property \"value\") of allowed value (required)
        :param AllowedValueInputResource body: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'object_type', 'field_id', 'value', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_project_field_allowed_values" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `update_project_field_allowed_values`")  # noqa: E501
        # verify the required parameter 'object_type' is set
        if self.api_client.client_side_validation and ('object_type' not in params or
                                                       params['object_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_type` when calling `update_project_field_allowed_values`")  # noqa: E501
        # verify the required parameter 'field_id' is set
        if self.api_client.client_side_validation and ('field_id' not in params or
                                                       params['field_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `field_id` when calling `update_project_field_allowed_values`")  # noqa: E501
        # verify the required parameter 'value' is set
        if self.api_client.client_side_validation and ('value' not in params or
                                                       params['value'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `value` when calling `update_project_field_allowed_values`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `update_project_field_allowed_values`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'object_type' in params:
            path_params['objectType'] = params['object_type']  # noqa: E501
        if 'field_id' in params:
            path_params['fieldId'] = params['field_id']  # noqa: E501
        if 'value' in params:
            path_params['value'] = params['value']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/settings/{objectType}/fields/{fieldId}/allowed-values/{value}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_site_field_allowed_values(self, object_type, field_id, value, body, **kwargs):  # noqa: E501
        """Updates an allowed value of a Site Field  # noqa: E501

        Update allowed values of a Site Field with Combo box/Multi selection combo box/Check box data type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_site_field_allowed_values(object_type, field_id, value, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_type: Valid values include releases, builds, requirements, test-cases, test-steps, defects, test-suites and test-runs (required)
        :param int field_id: ID of the field (required)
        :param int value: ID (property \"value\") of allowed value (required)
        :param AllowedValueInputResource body: (required)
        :return: ResourceSupport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_site_field_allowed_values_with_http_info(object_type, field_id, value, body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_site_field_allowed_values_with_http_info(object_type, field_id, value, body, **kwargs)  # noqa: E501
            return data

    def update_site_field_allowed_values_with_http_info(self, object_type, field_id, value, body, **kwargs):  # noqa: E501
        """Updates an allowed value of a Site Field  # noqa: E501

        Update allowed values of a Site Field with Combo box/Multi selection combo box/Check box data type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_site_field_allowed_values_with_http_info(object_type, field_id, value, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_type: Valid values include releases, builds, requirements, test-cases, test-steps, defects, test-suites and test-runs (required)
        :param int field_id: ID of the field (required)
        :param int value: ID (property \"value\") of allowed value (required)
        :param AllowedValueInputResource body: (required)
        :return: ResourceSupport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_type', 'field_id', 'value', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_site_field_allowed_values" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'object_type' is set
        if self.api_client.client_side_validation and ('object_type' not in params or
                                                       params['object_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_type` when calling `update_site_field_allowed_values`")  # noqa: E501
        # verify the required parameter 'field_id' is set
        if self.api_client.client_side_validation and ('field_id' not in params or
                                                       params['field_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `field_id` when calling `update_site_field_allowed_values`")  # noqa: E501
        # verify the required parameter 'value' is set
        if self.api_client.client_side_validation and ('value' not in params or
                                                       params['value'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `value` when calling `update_site_field_allowed_values`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `update_site_field_allowed_values`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'object_type' in params:
            path_params['objectType'] = params['object_type']  # noqa: E501
        if 'field_id' in params:
            path_params['fieldId'] = params['field_id']  # noqa: E501
        if 'value' in params:
            path_params['value'] = params['value']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/fields/{objectType}/{fieldId}/allowed-values/{value}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResourceSupport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
