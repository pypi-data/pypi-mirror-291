# coding: utf-8

"""
    qTest Manager API Version 11.0.0 - 2023.6

    qTest Manager API Version 11.0.0 - 2023.6  # noqa: E501

    OpenAPI spec version: 11.0.0 - 2023.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ToscaExecutionEntryResource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tosca_unique_id': 'str',
        'name': 'str',
        'tosca_node_path': 'str',
        'tosca_url': 'str',
        'parent_id': 'int',
        'parent_type': 'str',
        'associated_tosca_test_case': 'ToscaTestCaseResource',
        'associated_tosca_test_case_id': 'str'
    }

    attribute_map = {
        'tosca_unique_id': 'toscaUniqueId',
        'name': 'name',
        'tosca_node_path': 'toscaNodePath',
        'tosca_url': 'toscaUrl',
        'parent_id': 'parentId',
        'parent_type': 'parentType',
        'associated_tosca_test_case': 'associatedToscaTestCase',
        'associated_tosca_test_case_id': 'associatedToscaTestCaseId'
    }

    def __init__(self, tosca_unique_id=None, name=None, tosca_node_path=None, tosca_url=None, parent_id=None, parent_type=None, associated_tosca_test_case=None, associated_tosca_test_case_id=None, _configuration=None):  # noqa: E501
        """ToscaExecutionEntryResource - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._tosca_unique_id = None
        self._name = None
        self._tosca_node_path = None
        self._tosca_url = None
        self._parent_id = None
        self._parent_type = None
        self._associated_tosca_test_case = None
        self._associated_tosca_test_case_id = None
        self.discriminator = None

        self.tosca_unique_id = tosca_unique_id
        self.name = name
        self.tosca_node_path = tosca_node_path
        if tosca_url is not None:
            self.tosca_url = tosca_url
        if parent_id is not None:
            self.parent_id = parent_id
        if parent_type is not None:
            self.parent_type = parent_type
        if associated_tosca_test_case is not None:
            self.associated_tosca_test_case = associated_tosca_test_case
        if associated_tosca_test_case_id is not None:
            self.associated_tosca_test_case_id = associated_tosca_test_case_id

    @property
    def tosca_unique_id(self):
        """Gets the tosca_unique_id of this ToscaExecutionEntryResource.  # noqa: E501


        :return: The tosca_unique_id of this ToscaExecutionEntryResource.  # noqa: E501
        :rtype: str
        """
        return self._tosca_unique_id

    @tosca_unique_id.setter
    def tosca_unique_id(self, tosca_unique_id):
        """Sets the tosca_unique_id of this ToscaExecutionEntryResource.


        :param tosca_unique_id: The tosca_unique_id of this ToscaExecutionEntryResource.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and tosca_unique_id is None:
            raise ValueError("Invalid value for `tosca_unique_id`, must not be `None`")  # noqa: E501

        self._tosca_unique_id = tosca_unique_id

    @property
    def name(self):
        """Gets the name of this ToscaExecutionEntryResource.  # noqa: E501


        :return: The name of this ToscaExecutionEntryResource.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ToscaExecutionEntryResource.


        :param name: The name of this ToscaExecutionEntryResource.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 500):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `500`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def tosca_node_path(self):
        """Gets the tosca_node_path of this ToscaExecutionEntryResource.  # noqa: E501


        :return: The tosca_node_path of this ToscaExecutionEntryResource.  # noqa: E501
        :rtype: str
        """
        return self._tosca_node_path

    @tosca_node_path.setter
    def tosca_node_path(self, tosca_node_path):
        """Sets the tosca_node_path of this ToscaExecutionEntryResource.


        :param tosca_node_path: The tosca_node_path of this ToscaExecutionEntryResource.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and tosca_node_path is None:
            raise ValueError("Invalid value for `tosca_node_path`, must not be `None`")  # noqa: E501

        self._tosca_node_path = tosca_node_path

    @property
    def tosca_url(self):
        """Gets the tosca_url of this ToscaExecutionEntryResource.  # noqa: E501


        :return: The tosca_url of this ToscaExecutionEntryResource.  # noqa: E501
        :rtype: str
        """
        return self._tosca_url

    @tosca_url.setter
    def tosca_url(self, tosca_url):
        """Sets the tosca_url of this ToscaExecutionEntryResource.


        :param tosca_url: The tosca_url of this ToscaExecutionEntryResource.  # noqa: E501
        :type: str
        """

        self._tosca_url = tosca_url

    @property
    def parent_id(self):
        """Gets the parent_id of this ToscaExecutionEntryResource.  # noqa: E501


        :return: The parent_id of this ToscaExecutionEntryResource.  # noqa: E501
        :rtype: int
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this ToscaExecutionEntryResource.


        :param parent_id: The parent_id of this ToscaExecutionEntryResource.  # noqa: E501
        :type: int
        """

        self._parent_id = parent_id

    @property
    def parent_type(self):
        """Gets the parent_type of this ToscaExecutionEntryResource.  # noqa: E501


        :return: The parent_type of this ToscaExecutionEntryResource.  # noqa: E501
        :rtype: str
        """
        return self._parent_type

    @parent_type.setter
    def parent_type(self, parent_type):
        """Sets the parent_type of this ToscaExecutionEntryResource.


        :param parent_type: The parent_type of this ToscaExecutionEntryResource.  # noqa: E501
        :type: str
        """

        self._parent_type = parent_type

    @property
    def associated_tosca_test_case(self):
        """Gets the associated_tosca_test_case of this ToscaExecutionEntryResource.  # noqa: E501


        :return: The associated_tosca_test_case of this ToscaExecutionEntryResource.  # noqa: E501
        :rtype: ToscaTestCaseResource
        """
        return self._associated_tosca_test_case

    @associated_tosca_test_case.setter
    def associated_tosca_test_case(self, associated_tosca_test_case):
        """Sets the associated_tosca_test_case of this ToscaExecutionEntryResource.


        :param associated_tosca_test_case: The associated_tosca_test_case of this ToscaExecutionEntryResource.  # noqa: E501
        :type: ToscaTestCaseResource
        """

        self._associated_tosca_test_case = associated_tosca_test_case

    @property
    def associated_tosca_test_case_id(self):
        """Gets the associated_tosca_test_case_id of this ToscaExecutionEntryResource.  # noqa: E501


        :return: The associated_tosca_test_case_id of this ToscaExecutionEntryResource.  # noqa: E501
        :rtype: str
        """
        return self._associated_tosca_test_case_id

    @associated_tosca_test_case_id.setter
    def associated_tosca_test_case_id(self, associated_tosca_test_case_id):
        """Sets the associated_tosca_test_case_id of this ToscaExecutionEntryResource.


        :param associated_tosca_test_case_id: The associated_tosca_test_case_id of this ToscaExecutionEntryResource.  # noqa: E501
        :type: str
        """

        self._associated_tosca_test_case_id = associated_tosca_test_case_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ToscaExecutionEntryResource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ToscaExecutionEntryResource):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ToscaExecutionEntryResource):
            return True

        return self.to_dict() != other.to_dict()
