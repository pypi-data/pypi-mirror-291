# coding: utf-8

"""
    qTest Manager API Version 11.0.0 - 2023.6

    qTest Manager API Version 11.0.0 - 2023.6  # noqa: E501

    OpenAPI spec version: 11.0.0 - 2023.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class UserProfileResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_profiles': 'list[Profile]',
        'admin_profiles': 'list[Profile]',
        'total_user_profiles': 'int',
        'total_admin_profiles': 'int'
    }

    attribute_map = {
        'user_profiles': 'user_profiles',
        'admin_profiles': 'admin_profiles',
        'total_user_profiles': 'total_user_profiles',
        'total_admin_profiles': 'total_admin_profiles'
    }

    def __init__(self, user_profiles=None, admin_profiles=None, total_user_profiles=None, total_admin_profiles=None, _configuration=None):  # noqa: E501
        """UserProfileResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._user_profiles = None
        self._admin_profiles = None
        self._total_user_profiles = None
        self._total_admin_profiles = None
        self.discriminator = None

        if user_profiles is not None:
            self.user_profiles = user_profiles
        if admin_profiles is not None:
            self.admin_profiles = admin_profiles
        if total_user_profiles is not None:
            self.total_user_profiles = total_user_profiles
        if total_admin_profiles is not None:
            self.total_admin_profiles = total_admin_profiles

    @property
    def user_profiles(self):
        """Gets the user_profiles of this UserProfileResponse.  # noqa: E501

        Arrays of User Profile  # noqa: E501

        :return: The user_profiles of this UserProfileResponse.  # noqa: E501
        :rtype: list[Profile]
        """
        return self._user_profiles

    @user_profiles.setter
    def user_profiles(self, user_profiles):
        """Sets the user_profiles of this UserProfileResponse.

        Arrays of User Profile  # noqa: E501

        :param user_profiles: The user_profiles of this UserProfileResponse.  # noqa: E501
        :type: list[Profile]
        """

        self._user_profiles = user_profiles

    @property
    def admin_profiles(self):
        """Gets the admin_profiles of this UserProfileResponse.  # noqa: E501

        Arrays of Admin Profile  # noqa: E501

        :return: The admin_profiles of this UserProfileResponse.  # noqa: E501
        :rtype: list[Profile]
        """
        return self._admin_profiles

    @admin_profiles.setter
    def admin_profiles(self, admin_profiles):
        """Sets the admin_profiles of this UserProfileResponse.

        Arrays of Admin Profile  # noqa: E501

        :param admin_profiles: The admin_profiles of this UserProfileResponse.  # noqa: E501
        :type: list[Profile]
        """

        self._admin_profiles = admin_profiles

    @property
    def total_user_profiles(self):
        """Gets the total_user_profiles of this UserProfileResponse.  # noqa: E501

        Total User Profile  # noqa: E501

        :return: The total_user_profiles of this UserProfileResponse.  # noqa: E501
        :rtype: int
        """
        return self._total_user_profiles

    @total_user_profiles.setter
    def total_user_profiles(self, total_user_profiles):
        """Sets the total_user_profiles of this UserProfileResponse.

        Total User Profile  # noqa: E501

        :param total_user_profiles: The total_user_profiles of this UserProfileResponse.  # noqa: E501
        :type: int
        """

        self._total_user_profiles = total_user_profiles

    @property
    def total_admin_profiles(self):
        """Gets the total_admin_profiles of this UserProfileResponse.  # noqa: E501

        Total Admin Profile  # noqa: E501

        :return: The total_admin_profiles of this UserProfileResponse.  # noqa: E501
        :rtype: int
        """
        return self._total_admin_profiles

    @total_admin_profiles.setter
    def total_admin_profiles(self, total_admin_profiles):
        """Sets the total_admin_profiles of this UserProfileResponse.

        Total Admin Profile  # noqa: E501

        :param total_admin_profiles: The total_admin_profiles of this UserProfileResponse.  # noqa: E501
        :type: int
        """

        self._total_admin_profiles = total_admin_profiles

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserProfileResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserProfileResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserProfileResponse):
            return True

        return self.to_dict() != other.to_dict()
