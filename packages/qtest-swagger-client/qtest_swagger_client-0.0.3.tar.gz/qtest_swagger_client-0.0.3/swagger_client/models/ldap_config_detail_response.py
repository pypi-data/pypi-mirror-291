# coding: utf-8

"""
    qTest Manager API Version 11.0.0 - 2023.6

    qTest Manager API Version 11.0.0 - 2023.6  # noqa: E501

    OpenAPI spec version: 11.0.0 - 2023.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class LdapConfigDetailResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'is_activated': 'bool',
        'auth_type': 'str',
        'name': 'str',
        'username': 'str',
        'url': 'str',
        'base': 'str',
        'base_search': 'str',
        'search_filter': 'str',
        'mapped_username': 'str',
        'mapped_firstname': 'str',
        'mapped_lastname': 'str',
        'mapped_email': 'str',
        'is_ldap_ssl': 'bool',
        'is_active_directory': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'is_activated': 'is_activated',
        'auth_type': 'auth_type',
        'name': 'name',
        'username': 'username',
        'url': 'url',
        'base': 'base',
        'base_search': 'base_search',
        'search_filter': 'search_filter',
        'mapped_username': 'mapped_username',
        'mapped_firstname': 'mapped_firstname',
        'mapped_lastname': 'mapped_lastname',
        'mapped_email': 'mapped_email',
        'is_ldap_ssl': 'is_ldap_ssl',
        'is_active_directory': 'is_active_directory'
    }

    def __init__(self, id=None, is_activated=False, auth_type=None, name=None, username=None, url=None, base=None, base_search=None, search_filter=None, mapped_username=None, mapped_firstname=None, mapped_lastname=None, mapped_email=None, is_ldap_ssl=False, is_active_directory=False, _configuration=None):  # noqa: E501
        """LdapConfigDetailResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._is_activated = None
        self._auth_type = None
        self._name = None
        self._username = None
        self._url = None
        self._base = None
        self._base_search = None
        self._search_filter = None
        self._mapped_username = None
        self._mapped_firstname = None
        self._mapped_lastname = None
        self._mapped_email = None
        self._is_ldap_ssl = None
        self._is_active_directory = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if is_activated is not None:
            self.is_activated = is_activated
        if auth_type is not None:
            self.auth_type = auth_type
        if name is not None:
            self.name = name
        if username is not None:
            self.username = username
        if url is not None:
            self.url = url
        if base is not None:
            self.base = base
        if base_search is not None:
            self.base_search = base_search
        if search_filter is not None:
            self.search_filter = search_filter
        if mapped_username is not None:
            self.mapped_username = mapped_username
        if mapped_firstname is not None:
            self.mapped_firstname = mapped_firstname
        if mapped_lastname is not None:
            self.mapped_lastname = mapped_lastname
        if mapped_email is not None:
            self.mapped_email = mapped_email
        if is_ldap_ssl is not None:
            self.is_ldap_ssl = is_ldap_ssl
        if is_active_directory is not None:
            self.is_active_directory = is_active_directory

    @property
    def id(self):
        """Gets the id of this LdapConfigDetailResponse.  # noqa: E501


        :return: The id of this LdapConfigDetailResponse.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LdapConfigDetailResponse.


        :param id: The id of this LdapConfigDetailResponse.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def is_activated(self):
        """Gets the is_activated of this LdapConfigDetailResponse.  # noqa: E501


        :return: The is_activated of this LdapConfigDetailResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_activated

    @is_activated.setter
    def is_activated(self, is_activated):
        """Sets the is_activated of this LdapConfigDetailResponse.


        :param is_activated: The is_activated of this LdapConfigDetailResponse.  # noqa: E501
        :type: bool
        """

        self._is_activated = is_activated

    @property
    def auth_type(self):
        """Gets the auth_type of this LdapConfigDetailResponse.  # noqa: E501

        Type of authentication system  # noqa: E501

        :return: The auth_type of this LdapConfigDetailResponse.  # noqa: E501
        :rtype: str
        """
        return self._auth_type

    @auth_type.setter
    def auth_type(self, auth_type):
        """Sets the auth_type of this LdapConfigDetailResponse.

        Type of authentication system  # noqa: E501

        :param auth_type: The auth_type of this LdapConfigDetailResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["INTERNAL", "LDAP", "SSO_SAML2", "TUA_OPENID"]  # noqa: E501
        if (self._configuration.client_side_validation and
                auth_type not in allowed_values):
            raise ValueError(
                "Invalid value for `auth_type` ({0}), must be one of {1}"  # noqa: E501
                .format(auth_type, allowed_values)
            )

        self._auth_type = auth_type

    @property
    def name(self):
        """Gets the name of this LdapConfigDetailResponse.  # noqa: E501


        :return: The name of this LdapConfigDetailResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LdapConfigDetailResponse.


        :param name: The name of this LdapConfigDetailResponse.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def username(self):
        """Gets the username of this LdapConfigDetailResponse.  # noqa: E501

        Username of Ldap system  # noqa: E501

        :return: The username of this LdapConfigDetailResponse.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this LdapConfigDetailResponse.

        Username of Ldap system  # noqa: E501

        :param username: The username of this LdapConfigDetailResponse.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def url(self):
        """Gets the url of this LdapConfigDetailResponse.  # noqa: E501

        The url of Ldap system  # noqa: E501

        :return: The url of this LdapConfigDetailResponse.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this LdapConfigDetailResponse.

        The url of Ldap system  # noqa: E501

        :param url: The url of this LdapConfigDetailResponse.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def base(self):
        """Gets the base of this LdapConfigDetailResponse.  # noqa: E501

        Base of Ldap system  # noqa: E501

        :return: The base of this LdapConfigDetailResponse.  # noqa: E501
        :rtype: str
        """
        return self._base

    @base.setter
    def base(self, base):
        """Sets the base of this LdapConfigDetailResponse.

        Base of Ldap system  # noqa: E501

        :param base: The base of this LdapConfigDetailResponse.  # noqa: E501
        :type: str
        """

        self._base = base

    @property
    def base_search(self):
        """Gets the base_search of this LdapConfigDetailResponse.  # noqa: E501

        Base search of Ldap system  # noqa: E501

        :return: The base_search of this LdapConfigDetailResponse.  # noqa: E501
        :rtype: str
        """
        return self._base_search

    @base_search.setter
    def base_search(self, base_search):
        """Sets the base_search of this LdapConfigDetailResponse.

        Base search of Ldap system  # noqa: E501

        :param base_search: The base_search of this LdapConfigDetailResponse.  # noqa: E501
        :type: str
        """

        self._base_search = base_search

    @property
    def search_filter(self):
        """Gets the search_filter of this LdapConfigDetailResponse.  # noqa: E501

        Search filter of Ldap system  # noqa: E501

        :return: The search_filter of this LdapConfigDetailResponse.  # noqa: E501
        :rtype: str
        """
        return self._search_filter

    @search_filter.setter
    def search_filter(self, search_filter):
        """Sets the search_filter of this LdapConfigDetailResponse.

        Search filter of Ldap system  # noqa: E501

        :param search_filter: The search_filter of this LdapConfigDetailResponse.  # noqa: E501
        :type: str
        """

        self._search_filter = search_filter

    @property
    def mapped_username(self):
        """Gets the mapped_username of this LdapConfigDetailResponse.  # noqa: E501

        The mapped username field of Ldap system  # noqa: E501

        :return: The mapped_username of this LdapConfigDetailResponse.  # noqa: E501
        :rtype: str
        """
        return self._mapped_username

    @mapped_username.setter
    def mapped_username(self, mapped_username):
        """Sets the mapped_username of this LdapConfigDetailResponse.

        The mapped username field of Ldap system  # noqa: E501

        :param mapped_username: The mapped_username of this LdapConfigDetailResponse.  # noqa: E501
        :type: str
        """

        self._mapped_username = mapped_username

    @property
    def mapped_firstname(self):
        """Gets the mapped_firstname of this LdapConfigDetailResponse.  # noqa: E501

        The mapped firstname field of Ldap system  # noqa: E501

        :return: The mapped_firstname of this LdapConfigDetailResponse.  # noqa: E501
        :rtype: str
        """
        return self._mapped_firstname

    @mapped_firstname.setter
    def mapped_firstname(self, mapped_firstname):
        """Sets the mapped_firstname of this LdapConfigDetailResponse.

        The mapped firstname field of Ldap system  # noqa: E501

        :param mapped_firstname: The mapped_firstname of this LdapConfigDetailResponse.  # noqa: E501
        :type: str
        """

        self._mapped_firstname = mapped_firstname

    @property
    def mapped_lastname(self):
        """Gets the mapped_lastname of this LdapConfigDetailResponse.  # noqa: E501

        The mapped lastname field of Ldap system  # noqa: E501

        :return: The mapped_lastname of this LdapConfigDetailResponse.  # noqa: E501
        :rtype: str
        """
        return self._mapped_lastname

    @mapped_lastname.setter
    def mapped_lastname(self, mapped_lastname):
        """Sets the mapped_lastname of this LdapConfigDetailResponse.

        The mapped lastname field of Ldap system  # noqa: E501

        :param mapped_lastname: The mapped_lastname of this LdapConfigDetailResponse.  # noqa: E501
        :type: str
        """

        self._mapped_lastname = mapped_lastname

    @property
    def mapped_email(self):
        """Gets the mapped_email of this LdapConfigDetailResponse.  # noqa: E501

        The mapped email field of Ldap system  # noqa: E501

        :return: The mapped_email of this LdapConfigDetailResponse.  # noqa: E501
        :rtype: str
        """
        return self._mapped_email

    @mapped_email.setter
    def mapped_email(self, mapped_email):
        """Sets the mapped_email of this LdapConfigDetailResponse.

        The mapped email field of Ldap system  # noqa: E501

        :param mapped_email: The mapped_email of this LdapConfigDetailResponse.  # noqa: E501
        :type: str
        """

        self._mapped_email = mapped_email

    @property
    def is_ldap_ssl(self):
        """Gets the is_ldap_ssl of this LdapConfigDetailResponse.  # noqa: E501

        Use SSL connect or not  # noqa: E501

        :return: The is_ldap_ssl of this LdapConfigDetailResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_ldap_ssl

    @is_ldap_ssl.setter
    def is_ldap_ssl(self, is_ldap_ssl):
        """Sets the is_ldap_ssl of this LdapConfigDetailResponse.

        Use SSL connect or not  # noqa: E501

        :param is_ldap_ssl: The is_ldap_ssl of this LdapConfigDetailResponse.  # noqa: E501
        :type: bool
        """

        self._is_ldap_ssl = is_ldap_ssl

    @property
    def is_active_directory(self):
        """Gets the is_active_directory of this LdapConfigDetailResponse.  # noqa: E501

        Is active directory or not  # noqa: E501

        :return: The is_active_directory of this LdapConfigDetailResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_active_directory

    @is_active_directory.setter
    def is_active_directory(self, is_active_directory):
        """Sets the is_active_directory of this LdapConfigDetailResponse.

        Is active directory or not  # noqa: E501

        :param is_active_directory: The is_active_directory of this LdapConfigDetailResponse.  # noqa: E501
        :type: bool
        """

        self._is_active_directory = is_active_directory

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LdapConfigDetailResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LdapConfigDetailResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LdapConfigDetailResponse):
            return True

        return self.to_dict() != other.to_dict()
