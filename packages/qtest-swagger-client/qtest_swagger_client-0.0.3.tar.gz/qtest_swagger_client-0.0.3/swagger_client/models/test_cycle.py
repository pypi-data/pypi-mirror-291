# coding: utf-8

"""
    qTest Manager API Version 11.0.0 - 2023.6

    qTest Manager API Version 11.0.0 - 2023.6  # noqa: E501

    OpenAPI spec version: 11.0.0 - 2023.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class TestCycle(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'creator_id': 'int',
        'created_date': 'datetime',
        'last_modified_user_id': 'int',
        'last_modified_date': 'datetime',
        'id': 'int',
        'pid': 'int',
        'parent_test_cycle_id': 'int',
        'obj_order': 'int',
        'name': 'str',
        'client_id': 'int',
        'test_cycle_type': 'int',
        'release_id': 'int',
        'build_id': 'int',
        'project_id': 'int',
        'deleted': 'bool',
        'description': 'str',
        'start_date': 'datetime',
        'end_date': 'datetime',
        'sub_cycles': 'list[TestCycle]',
        'tosca_unique_id': 'str',
        'tosca_node_path': 'str',
        'tosca_object_type': 'str',
        'tosca_url': 'str',
        'tosca_root_event_id': 'str',
        'deleted_tosca_object_type': 'str',
        'object_type': 'int',
        'tosca_key': 'str',
        'parent_artifact_id': 'int',
        'parent_object_type': 'int',
        'pid_with_prefix': 'str',
        'artifact_type': 'int',
        'long_id': 'int',
        'status_id': 'int',
        'create_date_time_string': 'str'
    }

    attribute_map = {
        'creator_id': 'creatorId',
        'created_date': 'createdDate',
        'last_modified_user_id': 'lastModifiedUserId',
        'last_modified_date': 'lastModifiedDate',
        'id': 'id',
        'pid': 'pid',
        'parent_test_cycle_id': 'parentTestCycleId',
        'obj_order': 'objOrder',
        'name': 'name',
        'client_id': 'clientId',
        'test_cycle_type': 'testCycleType',
        'release_id': 'releaseId',
        'build_id': 'buildId',
        'project_id': 'projectId',
        'deleted': 'deleted',
        'description': 'description',
        'start_date': 'startDate',
        'end_date': 'endDate',
        'sub_cycles': 'subCycles',
        'tosca_unique_id': 'toscaUniqueId',
        'tosca_node_path': 'toscaNodePath',
        'tosca_object_type': 'toscaObjectType',
        'tosca_url': 'toscaUrl',
        'tosca_root_event_id': 'toscaRootEventId',
        'deleted_tosca_object_type': 'deletedToscaObjectType',
        'object_type': 'objectType',
        'tosca_key': 'toscaKey',
        'parent_artifact_id': 'parentArtifactId',
        'parent_object_type': 'parentObjectType',
        'pid_with_prefix': 'pidWithPrefix',
        'artifact_type': 'artifactType',
        'long_id': 'longId',
        'status_id': 'statusId',
        'create_date_time_string': 'createDateTimeString'
    }

    def __init__(self, creator_id=None, created_date=None, last_modified_user_id=None, last_modified_date=None, id=None, pid=None, parent_test_cycle_id=None, obj_order=None, name=None, client_id=None, test_cycle_type=None, release_id=None, build_id=None, project_id=None, deleted=False, description=None, start_date=None, end_date=None, sub_cycles=None, tosca_unique_id=None, tosca_node_path=None, tosca_object_type=None, tosca_url=None, tosca_root_event_id=None, deleted_tosca_object_type=None, object_type=None, tosca_key=None, parent_artifact_id=None, parent_object_type=None, pid_with_prefix=None, artifact_type=None, long_id=None, status_id=None, create_date_time_string=None, _configuration=None):  # noqa: E501
        """TestCycle - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._creator_id = None
        self._created_date = None
        self._last_modified_user_id = None
        self._last_modified_date = None
        self._id = None
        self._pid = None
        self._parent_test_cycle_id = None
        self._obj_order = None
        self._name = None
        self._client_id = None
        self._test_cycle_type = None
        self._release_id = None
        self._build_id = None
        self._project_id = None
        self._deleted = None
        self._description = None
        self._start_date = None
        self._end_date = None
        self._sub_cycles = None
        self._tosca_unique_id = None
        self._tosca_node_path = None
        self._tosca_object_type = None
        self._tosca_url = None
        self._tosca_root_event_id = None
        self._deleted_tosca_object_type = None
        self._object_type = None
        self._tosca_key = None
        self._parent_artifact_id = None
        self._parent_object_type = None
        self._pid_with_prefix = None
        self._artifact_type = None
        self._long_id = None
        self._status_id = None
        self._create_date_time_string = None
        self.discriminator = None

        if creator_id is not None:
            self.creator_id = creator_id
        if created_date is not None:
            self.created_date = created_date
        if last_modified_user_id is not None:
            self.last_modified_user_id = last_modified_user_id
        if last_modified_date is not None:
            self.last_modified_date = last_modified_date
        if id is not None:
            self.id = id
        if pid is not None:
            self.pid = pid
        if parent_test_cycle_id is not None:
            self.parent_test_cycle_id = parent_test_cycle_id
        if obj_order is not None:
            self.obj_order = obj_order
        if name is not None:
            self.name = name
        if client_id is not None:
            self.client_id = client_id
        if test_cycle_type is not None:
            self.test_cycle_type = test_cycle_type
        if release_id is not None:
            self.release_id = release_id
        if build_id is not None:
            self.build_id = build_id
        if project_id is not None:
            self.project_id = project_id
        if deleted is not None:
            self.deleted = deleted
        if description is not None:
            self.description = description
        if start_date is not None:
            self.start_date = start_date
        if end_date is not None:
            self.end_date = end_date
        if sub_cycles is not None:
            self.sub_cycles = sub_cycles
        if tosca_unique_id is not None:
            self.tosca_unique_id = tosca_unique_id
        if tosca_node_path is not None:
            self.tosca_node_path = tosca_node_path
        if tosca_object_type is not None:
            self.tosca_object_type = tosca_object_type
        if tosca_url is not None:
            self.tosca_url = tosca_url
        if tosca_root_event_id is not None:
            self.tosca_root_event_id = tosca_root_event_id
        if deleted_tosca_object_type is not None:
            self.deleted_tosca_object_type = deleted_tosca_object_type
        if object_type is not None:
            self.object_type = object_type
        if tosca_key is not None:
            self.tosca_key = tosca_key
        if parent_artifact_id is not None:
            self.parent_artifact_id = parent_artifact_id
        if parent_object_type is not None:
            self.parent_object_type = parent_object_type
        if pid_with_prefix is not None:
            self.pid_with_prefix = pid_with_prefix
        if artifact_type is not None:
            self.artifact_type = artifact_type
        if long_id is not None:
            self.long_id = long_id
        if status_id is not None:
            self.status_id = status_id
        if create_date_time_string is not None:
            self.create_date_time_string = create_date_time_string

    @property
    def creator_id(self):
        """Gets the creator_id of this TestCycle.  # noqa: E501


        :return: The creator_id of this TestCycle.  # noqa: E501
        :rtype: int
        """
        return self._creator_id

    @creator_id.setter
    def creator_id(self, creator_id):
        """Sets the creator_id of this TestCycle.


        :param creator_id: The creator_id of this TestCycle.  # noqa: E501
        :type: int
        """

        self._creator_id = creator_id

    @property
    def created_date(self):
        """Gets the created_date of this TestCycle.  # noqa: E501


        :return: The created_date of this TestCycle.  # noqa: E501
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this TestCycle.


        :param created_date: The created_date of this TestCycle.  # noqa: E501
        :type: datetime
        """

        self._created_date = created_date

    @property
    def last_modified_user_id(self):
        """Gets the last_modified_user_id of this TestCycle.  # noqa: E501


        :return: The last_modified_user_id of this TestCycle.  # noqa: E501
        :rtype: int
        """
        return self._last_modified_user_id

    @last_modified_user_id.setter
    def last_modified_user_id(self, last_modified_user_id):
        """Sets the last_modified_user_id of this TestCycle.


        :param last_modified_user_id: The last_modified_user_id of this TestCycle.  # noqa: E501
        :type: int
        """

        self._last_modified_user_id = last_modified_user_id

    @property
    def last_modified_date(self):
        """Gets the last_modified_date of this TestCycle.  # noqa: E501


        :return: The last_modified_date of this TestCycle.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified_date

    @last_modified_date.setter
    def last_modified_date(self, last_modified_date):
        """Sets the last_modified_date of this TestCycle.


        :param last_modified_date: The last_modified_date of this TestCycle.  # noqa: E501
        :type: datetime
        """

        self._last_modified_date = last_modified_date

    @property
    def id(self):
        """Gets the id of this TestCycle.  # noqa: E501


        :return: The id of this TestCycle.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TestCycle.


        :param id: The id of this TestCycle.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def pid(self):
        """Gets the pid of this TestCycle.  # noqa: E501


        :return: The pid of this TestCycle.  # noqa: E501
        :rtype: int
        """
        return self._pid

    @pid.setter
    def pid(self, pid):
        """Sets the pid of this TestCycle.


        :param pid: The pid of this TestCycle.  # noqa: E501
        :type: int
        """

        self._pid = pid

    @property
    def parent_test_cycle_id(self):
        """Gets the parent_test_cycle_id of this TestCycle.  # noqa: E501


        :return: The parent_test_cycle_id of this TestCycle.  # noqa: E501
        :rtype: int
        """
        return self._parent_test_cycle_id

    @parent_test_cycle_id.setter
    def parent_test_cycle_id(self, parent_test_cycle_id):
        """Sets the parent_test_cycle_id of this TestCycle.


        :param parent_test_cycle_id: The parent_test_cycle_id of this TestCycle.  # noqa: E501
        :type: int
        """

        self._parent_test_cycle_id = parent_test_cycle_id

    @property
    def obj_order(self):
        """Gets the obj_order of this TestCycle.  # noqa: E501


        :return: The obj_order of this TestCycle.  # noqa: E501
        :rtype: int
        """
        return self._obj_order

    @obj_order.setter
    def obj_order(self, obj_order):
        """Sets the obj_order of this TestCycle.


        :param obj_order: The obj_order of this TestCycle.  # noqa: E501
        :type: int
        """

        self._obj_order = obj_order

    @property
    def name(self):
        """Gets the name of this TestCycle.  # noqa: E501


        :return: The name of this TestCycle.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TestCycle.


        :param name: The name of this TestCycle.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def client_id(self):
        """Gets the client_id of this TestCycle.  # noqa: E501


        :return: The client_id of this TestCycle.  # noqa: E501
        :rtype: int
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this TestCycle.


        :param client_id: The client_id of this TestCycle.  # noqa: E501
        :type: int
        """

        self._client_id = client_id

    @property
    def test_cycle_type(self):
        """Gets the test_cycle_type of this TestCycle.  # noqa: E501


        :return: The test_cycle_type of this TestCycle.  # noqa: E501
        :rtype: int
        """
        return self._test_cycle_type

    @test_cycle_type.setter
    def test_cycle_type(self, test_cycle_type):
        """Sets the test_cycle_type of this TestCycle.


        :param test_cycle_type: The test_cycle_type of this TestCycle.  # noqa: E501
        :type: int
        """

        self._test_cycle_type = test_cycle_type

    @property
    def release_id(self):
        """Gets the release_id of this TestCycle.  # noqa: E501


        :return: The release_id of this TestCycle.  # noqa: E501
        :rtype: int
        """
        return self._release_id

    @release_id.setter
    def release_id(self, release_id):
        """Sets the release_id of this TestCycle.


        :param release_id: The release_id of this TestCycle.  # noqa: E501
        :type: int
        """

        self._release_id = release_id

    @property
    def build_id(self):
        """Gets the build_id of this TestCycle.  # noqa: E501


        :return: The build_id of this TestCycle.  # noqa: E501
        :rtype: int
        """
        return self._build_id

    @build_id.setter
    def build_id(self, build_id):
        """Sets the build_id of this TestCycle.


        :param build_id: The build_id of this TestCycle.  # noqa: E501
        :type: int
        """

        self._build_id = build_id

    @property
    def project_id(self):
        """Gets the project_id of this TestCycle.  # noqa: E501


        :return: The project_id of this TestCycle.  # noqa: E501
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this TestCycle.


        :param project_id: The project_id of this TestCycle.  # noqa: E501
        :type: int
        """

        self._project_id = project_id

    @property
    def deleted(self):
        """Gets the deleted of this TestCycle.  # noqa: E501


        :return: The deleted of this TestCycle.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this TestCycle.


        :param deleted: The deleted of this TestCycle.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def description(self):
        """Gets the description of this TestCycle.  # noqa: E501


        :return: The description of this TestCycle.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TestCycle.


        :param description: The description of this TestCycle.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def start_date(self):
        """Gets the start_date of this TestCycle.  # noqa: E501


        :return: The start_date of this TestCycle.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this TestCycle.


        :param start_date: The start_date of this TestCycle.  # noqa: E501
        :type: datetime
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this TestCycle.  # noqa: E501


        :return: The end_date of this TestCycle.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this TestCycle.


        :param end_date: The end_date of this TestCycle.  # noqa: E501
        :type: datetime
        """

        self._end_date = end_date

    @property
    def sub_cycles(self):
        """Gets the sub_cycles of this TestCycle.  # noqa: E501


        :return: The sub_cycles of this TestCycle.  # noqa: E501
        :rtype: list[TestCycle]
        """
        return self._sub_cycles

    @sub_cycles.setter
    def sub_cycles(self, sub_cycles):
        """Sets the sub_cycles of this TestCycle.


        :param sub_cycles: The sub_cycles of this TestCycle.  # noqa: E501
        :type: list[TestCycle]
        """

        self._sub_cycles = sub_cycles

    @property
    def tosca_unique_id(self):
        """Gets the tosca_unique_id of this TestCycle.  # noqa: E501


        :return: The tosca_unique_id of this TestCycle.  # noqa: E501
        :rtype: str
        """
        return self._tosca_unique_id

    @tosca_unique_id.setter
    def tosca_unique_id(self, tosca_unique_id):
        """Sets the tosca_unique_id of this TestCycle.


        :param tosca_unique_id: The tosca_unique_id of this TestCycle.  # noqa: E501
        :type: str
        """

        self._tosca_unique_id = tosca_unique_id

    @property
    def tosca_node_path(self):
        """Gets the tosca_node_path of this TestCycle.  # noqa: E501


        :return: The tosca_node_path of this TestCycle.  # noqa: E501
        :rtype: str
        """
        return self._tosca_node_path

    @tosca_node_path.setter
    def tosca_node_path(self, tosca_node_path):
        """Sets the tosca_node_path of this TestCycle.


        :param tosca_node_path: The tosca_node_path of this TestCycle.  # noqa: E501
        :type: str
        """

        self._tosca_node_path = tosca_node_path

    @property
    def tosca_object_type(self):
        """Gets the tosca_object_type of this TestCycle.  # noqa: E501


        :return: The tosca_object_type of this TestCycle.  # noqa: E501
        :rtype: str
        """
        return self._tosca_object_type

    @tosca_object_type.setter
    def tosca_object_type(self, tosca_object_type):
        """Sets the tosca_object_type of this TestCycle.


        :param tosca_object_type: The tosca_object_type of this TestCycle.  # noqa: E501
        :type: str
        """

        self._tosca_object_type = tosca_object_type

    @property
    def tosca_url(self):
        """Gets the tosca_url of this TestCycle.  # noqa: E501


        :return: The tosca_url of this TestCycle.  # noqa: E501
        :rtype: str
        """
        return self._tosca_url

    @tosca_url.setter
    def tosca_url(self, tosca_url):
        """Sets the tosca_url of this TestCycle.


        :param tosca_url: The tosca_url of this TestCycle.  # noqa: E501
        :type: str
        """

        self._tosca_url = tosca_url

    @property
    def tosca_root_event_id(self):
        """Gets the tosca_root_event_id of this TestCycle.  # noqa: E501


        :return: The tosca_root_event_id of this TestCycle.  # noqa: E501
        :rtype: str
        """
        return self._tosca_root_event_id

    @tosca_root_event_id.setter
    def tosca_root_event_id(self, tosca_root_event_id):
        """Sets the tosca_root_event_id of this TestCycle.


        :param tosca_root_event_id: The tosca_root_event_id of this TestCycle.  # noqa: E501
        :type: str
        """

        self._tosca_root_event_id = tosca_root_event_id

    @property
    def deleted_tosca_object_type(self):
        """Gets the deleted_tosca_object_type of this TestCycle.  # noqa: E501


        :return: The deleted_tosca_object_type of this TestCycle.  # noqa: E501
        :rtype: str
        """
        return self._deleted_tosca_object_type

    @deleted_tosca_object_type.setter
    def deleted_tosca_object_type(self, deleted_tosca_object_type):
        """Sets the deleted_tosca_object_type of this TestCycle.


        :param deleted_tosca_object_type: The deleted_tosca_object_type of this TestCycle.  # noqa: E501
        :type: str
        """

        self._deleted_tosca_object_type = deleted_tosca_object_type

    @property
    def object_type(self):
        """Gets the object_type of this TestCycle.  # noqa: E501


        :return: The object_type of this TestCycle.  # noqa: E501
        :rtype: int
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """Sets the object_type of this TestCycle.


        :param object_type: The object_type of this TestCycle.  # noqa: E501
        :type: int
        """

        self._object_type = object_type

    @property
    def tosca_key(self):
        """Gets the tosca_key of this TestCycle.  # noqa: E501


        :return: The tosca_key of this TestCycle.  # noqa: E501
        :rtype: str
        """
        return self._tosca_key

    @tosca_key.setter
    def tosca_key(self, tosca_key):
        """Sets the tosca_key of this TestCycle.


        :param tosca_key: The tosca_key of this TestCycle.  # noqa: E501
        :type: str
        """

        self._tosca_key = tosca_key

    @property
    def parent_artifact_id(self):
        """Gets the parent_artifact_id of this TestCycle.  # noqa: E501


        :return: The parent_artifact_id of this TestCycle.  # noqa: E501
        :rtype: int
        """
        return self._parent_artifact_id

    @parent_artifact_id.setter
    def parent_artifact_id(self, parent_artifact_id):
        """Sets the parent_artifact_id of this TestCycle.


        :param parent_artifact_id: The parent_artifact_id of this TestCycle.  # noqa: E501
        :type: int
        """

        self._parent_artifact_id = parent_artifact_id

    @property
    def parent_object_type(self):
        """Gets the parent_object_type of this TestCycle.  # noqa: E501


        :return: The parent_object_type of this TestCycle.  # noqa: E501
        :rtype: int
        """
        return self._parent_object_type

    @parent_object_type.setter
    def parent_object_type(self, parent_object_type):
        """Sets the parent_object_type of this TestCycle.


        :param parent_object_type: The parent_object_type of this TestCycle.  # noqa: E501
        :type: int
        """

        self._parent_object_type = parent_object_type

    @property
    def pid_with_prefix(self):
        """Gets the pid_with_prefix of this TestCycle.  # noqa: E501


        :return: The pid_with_prefix of this TestCycle.  # noqa: E501
        :rtype: str
        """
        return self._pid_with_prefix

    @pid_with_prefix.setter
    def pid_with_prefix(self, pid_with_prefix):
        """Sets the pid_with_prefix of this TestCycle.


        :param pid_with_prefix: The pid_with_prefix of this TestCycle.  # noqa: E501
        :type: str
        """

        self._pid_with_prefix = pid_with_prefix

    @property
    def artifact_type(self):
        """Gets the artifact_type of this TestCycle.  # noqa: E501


        :return: The artifact_type of this TestCycle.  # noqa: E501
        :rtype: int
        """
        return self._artifact_type

    @artifact_type.setter
    def artifact_type(self, artifact_type):
        """Sets the artifact_type of this TestCycle.


        :param artifact_type: The artifact_type of this TestCycle.  # noqa: E501
        :type: int
        """

        self._artifact_type = artifact_type

    @property
    def long_id(self):
        """Gets the long_id of this TestCycle.  # noqa: E501


        :return: The long_id of this TestCycle.  # noqa: E501
        :rtype: int
        """
        return self._long_id

    @long_id.setter
    def long_id(self, long_id):
        """Sets the long_id of this TestCycle.


        :param long_id: The long_id of this TestCycle.  # noqa: E501
        :type: int
        """

        self._long_id = long_id

    @property
    def status_id(self):
        """Gets the status_id of this TestCycle.  # noqa: E501


        :return: The status_id of this TestCycle.  # noqa: E501
        :rtype: int
        """
        return self._status_id

    @status_id.setter
    def status_id(self, status_id):
        """Sets the status_id of this TestCycle.


        :param status_id: The status_id of this TestCycle.  # noqa: E501
        :type: int
        """

        self._status_id = status_id

    @property
    def create_date_time_string(self):
        """Gets the create_date_time_string of this TestCycle.  # noqa: E501


        :return: The create_date_time_string of this TestCycle.  # noqa: E501
        :rtype: str
        """
        return self._create_date_time_string

    @create_date_time_string.setter
    def create_date_time_string(self, create_date_time_string):
        """Sets the create_date_time_string of this TestCycle.


        :param create_date_time_string: The create_date_time_string of this TestCycle.  # noqa: E501
        :type: str
        """

        self._create_date_time_string = create_date_time_string

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TestCycle, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TestCycle):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TestCycle):
            return True

        return self.to_dict() != other.to_dict()
