# coding: utf-8

"""
    qTest Manager API Version 11.0.0 - 2023.6

    qTest Manager API Version 11.0.0 - 2023.6  # noqa: E501

    OpenAPI spec version: 11.0.0 - 2023.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class CommentQueryParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'start': 'datetime',
        'end': 'datetime',
        'object_type': 'str',
        'fields': 'list[str]',
        'object': 'int',
        'author': 'int'
    }

    attribute_map = {
        'start': 'start',
        'end': 'end',
        'object_type': 'object_type',
        'fields': 'fields',
        'object': 'object',
        'author': 'author'
    }

    def __init__(self, start=None, end=None, object_type=None, fields=None, object=None, author=None, _configuration=None):  # noqa: E501
        """CommentQueryParams - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._start = None
        self._end = None
        self._object_type = None
        self._fields = None
        self._object = None
        self._author = None
        self.discriminator = None

        if start is not None:
            self.start = start
        if end is not None:
            self.end = end
        self.object_type = object_type
        if fields is not None:
            self.fields = fields
        if object is not None:
            self.object = object
        if author is not None:
            self.author = author

    @property
    def start(self):
        """Gets the start of this CommentQueryParams.  # noqa: E501

        StartDate with format: yyyy-MM-dd'T'HH:mm:ss.SSSZ or yyyy-MM-dd'T'HH:mm:ssZZ\"  # noqa: E501

        :return: The start of this CommentQueryParams.  # noqa: E501
        :rtype: datetime
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this CommentQueryParams.

        StartDate with format: yyyy-MM-dd'T'HH:mm:ss.SSSZ or yyyy-MM-dd'T'HH:mm:ssZZ\"  # noqa: E501

        :param start: The start of this CommentQueryParams.  # noqa: E501
        :type: datetime
        """

        self._start = start

    @property
    def end(self):
        """Gets the end of this CommentQueryParams.  # noqa: E501

        EndDate with format: yyyy-MM-dd'T'HH:mm:ss.SSSZ or yyyy-MM-dd'T'HH:mm:ssZZ\"  # noqa: E501

        :return: The end of this CommentQueryParams.  # noqa: E501
        :rtype: datetime
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this CommentQueryParams.

        EndDate with format: yyyy-MM-dd'T'HH:mm:ss.SSSZ or yyyy-MM-dd'T'HH:mm:ssZZ\"  # noqa: E501

        :param end: The end of this CommentQueryParams.  # noqa: E501
        :type: datetime
        """

        self._end = end

    @property
    def object_type(self):
        """Gets the object_type of this CommentQueryParams.  # noqa: E501

        Only support comments for object types: [requirements, defects, test-cases, test-runs]  # noqa: E501

        :return: The object_type of this CommentQueryParams.  # noqa: E501
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """Sets the object_type of this CommentQueryParams.

        Only support comments for object types: [requirements, defects, test-cases, test-runs]  # noqa: E501

        :param object_type: The object_type of this CommentQueryParams.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and object_type is None:
            raise ValueError("Invalid value for `object_type`, must not be `None`")  # noqa: E501

        self._object_type = object_type

    @property
    def fields(self):
        """Gets the fields of this CommentQueryParams.  # noqa: E501

        Specify which object fields you want to include in the response. If you omit it or specify an asterisk (*), all fields are included  # noqa: E501

        :return: The fields of this CommentQueryParams.  # noqa: E501
        :rtype: list[str]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this CommentQueryParams.

        Specify which object fields you want to include in the response. If you omit it or specify an asterisk (*), all fields are included  # noqa: E501

        :param fields: The fields of this CommentQueryParams.  # noqa: E501
        :type: list[str]
        """

        self._fields = fields

    @property
    def object(self):
        """Gets the object of this CommentQueryParams.  # noqa: E501

        Id of the object from which you want to retrieve comments  # noqa: E501

        :return: The object of this CommentQueryParams.  # noqa: E501
        :rtype: int
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this CommentQueryParams.

        Id of the object from which you want to retrieve comments  # noqa: E501

        :param object: The object of this CommentQueryParams.  # noqa: E501
        :type: int
        """

        self._object = object

    @property
    def author(self):
        """Gets the author of this CommentQueryParams.  # noqa: E501

        Id of the user who made the comments  # noqa: E501

        :return: The author of this CommentQueryParams.  # noqa: E501
        :rtype: int
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this CommentQueryParams.

        Id of the user who made the comments  # noqa: E501

        :param author: The author of this CommentQueryParams.  # noqa: E501
        :type: int
        """

        self._author = author

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CommentQueryParams, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CommentQueryParams):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CommentQueryParams):
            return True

        return self.to_dict() != other.to_dict()
