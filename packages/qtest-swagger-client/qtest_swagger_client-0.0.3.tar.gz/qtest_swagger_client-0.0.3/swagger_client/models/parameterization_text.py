# coding: utf-8

"""
    qTest Manager API Version 11.0.0 - 2023.6

    qTest Manager API Version 11.0.0 - 2023.6  # noqa: E501

    OpenAPI spec version: 11.0.0 - 2023.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ParameterizationText(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'parameters': 'list[ParameterInfo]',
        'raw_text': 'str',
        'plain_text': 'str',
        'html_text': 'str',
        'plain_value_text': 'str',
        'edited_parameters': 'list[ParameterInfo]',
        'value_text': 'str'
    }

    attribute_map = {
        'parameters': 'parameters',
        'raw_text': 'rawText',
        'plain_text': 'plainText',
        'html_text': 'htmlText',
        'plain_value_text': 'plainValueText',
        'edited_parameters': 'editedParameters',
        'value_text': 'valueText'
    }

    def __init__(self, parameters=None, raw_text=None, plain_text=None, html_text=None, plain_value_text=None, edited_parameters=None, value_text=None, _configuration=None):  # noqa: E501
        """ParameterizationText - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._parameters = None
        self._raw_text = None
        self._plain_text = None
        self._html_text = None
        self._plain_value_text = None
        self._edited_parameters = None
        self._value_text = None
        self.discriminator = None

        if parameters is not None:
            self.parameters = parameters
        if raw_text is not None:
            self.raw_text = raw_text
        if plain_text is not None:
            self.plain_text = plain_text
        if html_text is not None:
            self.html_text = html_text
        if plain_value_text is not None:
            self.plain_value_text = plain_value_text
        if edited_parameters is not None:
            self.edited_parameters = edited_parameters
        if value_text is not None:
            self.value_text = value_text

    @property
    def parameters(self):
        """Gets the parameters of this ParameterizationText.  # noqa: E501


        :return: The parameters of this ParameterizationText.  # noqa: E501
        :rtype: list[ParameterInfo]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this ParameterizationText.


        :param parameters: The parameters of this ParameterizationText.  # noqa: E501
        :type: list[ParameterInfo]
        """

        self._parameters = parameters

    @property
    def raw_text(self):
        """Gets the raw_text of this ParameterizationText.  # noqa: E501


        :return: The raw_text of this ParameterizationText.  # noqa: E501
        :rtype: str
        """
        return self._raw_text

    @raw_text.setter
    def raw_text(self, raw_text):
        """Sets the raw_text of this ParameterizationText.


        :param raw_text: The raw_text of this ParameterizationText.  # noqa: E501
        :type: str
        """

        self._raw_text = raw_text

    @property
    def plain_text(self):
        """Gets the plain_text of this ParameterizationText.  # noqa: E501


        :return: The plain_text of this ParameterizationText.  # noqa: E501
        :rtype: str
        """
        return self._plain_text

    @plain_text.setter
    def plain_text(self, plain_text):
        """Sets the plain_text of this ParameterizationText.


        :param plain_text: The plain_text of this ParameterizationText.  # noqa: E501
        :type: str
        """

        self._plain_text = plain_text

    @property
    def html_text(self):
        """Gets the html_text of this ParameterizationText.  # noqa: E501


        :return: The html_text of this ParameterizationText.  # noqa: E501
        :rtype: str
        """
        return self._html_text

    @html_text.setter
    def html_text(self, html_text):
        """Sets the html_text of this ParameterizationText.


        :param html_text: The html_text of this ParameterizationText.  # noqa: E501
        :type: str
        """

        self._html_text = html_text

    @property
    def plain_value_text(self):
        """Gets the plain_value_text of this ParameterizationText.  # noqa: E501


        :return: The plain_value_text of this ParameterizationText.  # noqa: E501
        :rtype: str
        """
        return self._plain_value_text

    @plain_value_text.setter
    def plain_value_text(self, plain_value_text):
        """Sets the plain_value_text of this ParameterizationText.


        :param plain_value_text: The plain_value_text of this ParameterizationText.  # noqa: E501
        :type: str
        """

        self._plain_value_text = plain_value_text

    @property
    def edited_parameters(self):
        """Gets the edited_parameters of this ParameterizationText.  # noqa: E501


        :return: The edited_parameters of this ParameterizationText.  # noqa: E501
        :rtype: list[ParameterInfo]
        """
        return self._edited_parameters

    @edited_parameters.setter
    def edited_parameters(self, edited_parameters):
        """Sets the edited_parameters of this ParameterizationText.


        :param edited_parameters: The edited_parameters of this ParameterizationText.  # noqa: E501
        :type: list[ParameterInfo]
        """

        self._edited_parameters = edited_parameters

    @property
    def value_text(self):
        """Gets the value_text of this ParameterizationText.  # noqa: E501


        :return: The value_text of this ParameterizationText.  # noqa: E501
        :rtype: str
        """
        return self._value_text

    @value_text.setter
    def value_text(self, value_text):
        """Sets the value_text of this ParameterizationText.


        :param value_text: The value_text of this ParameterizationText.  # noqa: E501
        :type: str
        """

        self._value_text = value_text

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ParameterizationText, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ParameterizationText):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ParameterizationText):
            return True

        return self.to_dict() != other.to_dict()
