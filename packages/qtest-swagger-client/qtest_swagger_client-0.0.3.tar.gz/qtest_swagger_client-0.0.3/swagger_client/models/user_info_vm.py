# coding: utf-8

"""
    qTest Manager API Version 11.0.0 - 2023.6

    qTest Manager API Version 11.0.0 - 2023.6  # noqa: E501

    OpenAPI spec version: 11.0.0 - 2023.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class UserInfoVM(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'user_name': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'contact_email': 'str',
        'full_name': 'str',
        'user_dn': 'str'
    }

    attribute_map = {
        'id': 'id',
        'user_name': 'userName',
        'first_name': 'firstName',
        'last_name': 'lastName',
        'contact_email': 'contactEmail',
        'full_name': 'fullName',
        'user_dn': 'userDN'
    }

    def __init__(self, id=None, user_name=None, first_name=None, last_name=None, contact_email=None, full_name=None, user_dn=None, _configuration=None):  # noqa: E501
        """UserInfoVM - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._user_name = None
        self._first_name = None
        self._last_name = None
        self._contact_email = None
        self._full_name = None
        self._user_dn = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if user_name is not None:
            self.user_name = user_name
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if contact_email is not None:
            self.contact_email = contact_email
        if full_name is not None:
            self.full_name = full_name
        if user_dn is not None:
            self.user_dn = user_dn

    @property
    def id(self):
        """Gets the id of this UserInfoVM.  # noqa: E501


        :return: The id of this UserInfoVM.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserInfoVM.


        :param id: The id of this UserInfoVM.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def user_name(self):
        """Gets the user_name of this UserInfoVM.  # noqa: E501


        :return: The user_name of this UserInfoVM.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this UserInfoVM.


        :param user_name: The user_name of this UserInfoVM.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def first_name(self):
        """Gets the first_name of this UserInfoVM.  # noqa: E501


        :return: The first_name of this UserInfoVM.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this UserInfoVM.


        :param first_name: The first_name of this UserInfoVM.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this UserInfoVM.  # noqa: E501


        :return: The last_name of this UserInfoVM.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this UserInfoVM.


        :param last_name: The last_name of this UserInfoVM.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def contact_email(self):
        """Gets the contact_email of this UserInfoVM.  # noqa: E501


        :return: The contact_email of this UserInfoVM.  # noqa: E501
        :rtype: str
        """
        return self._contact_email

    @contact_email.setter
    def contact_email(self, contact_email):
        """Sets the contact_email of this UserInfoVM.


        :param contact_email: The contact_email of this UserInfoVM.  # noqa: E501
        :type: str
        """

        self._contact_email = contact_email

    @property
    def full_name(self):
        """Gets the full_name of this UserInfoVM.  # noqa: E501


        :return: The full_name of this UserInfoVM.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this UserInfoVM.


        :param full_name: The full_name of this UserInfoVM.  # noqa: E501
        :type: str
        """

        self._full_name = full_name

    @property
    def user_dn(self):
        """Gets the user_dn of this UserInfoVM.  # noqa: E501


        :return: The user_dn of this UserInfoVM.  # noqa: E501
        :rtype: str
        """
        return self._user_dn

    @user_dn.setter
    def user_dn(self, user_dn):
        """Sets the user_dn of this UserInfoVM.


        :param user_dn: The user_dn of this UserInfoVM.  # noqa: E501
        :type: str
        """

        self._user_dn = user_dn

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserInfoVM, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserInfoVM):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserInfoVM):
            return True

        return self.to_dict() != other.to_dict()
