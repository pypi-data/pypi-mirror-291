# coding: utf-8

"""
    qTest Manager API Version 11.0.0 - 2023.6

    qTest Manager API Version 11.0.0 - 2023.6  # noqa: E501

    OpenAPI spec version: 11.0.0 - 2023.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class OAuthTokenStatusVM(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'expiration': 'int',
        'validity_in_milliseconds': 'int'
    }

    attribute_map = {
        'expiration': 'expiration',
        'validity_in_milliseconds': 'validityInMilliseconds'
    }

    def __init__(self, expiration=None, validity_in_milliseconds=None, _configuration=None):  # noqa: E501
        """OAuthTokenStatusVM - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._expiration = None
        self._validity_in_milliseconds = None
        self.discriminator = None

        if expiration is not None:
            self.expiration = expiration
        if validity_in_milliseconds is not None:
            self.validity_in_milliseconds = validity_in_milliseconds

    @property
    def expiration(self):
        """Gets the expiration of this OAuthTokenStatusVM.  # noqa: E501


        :return: The expiration of this OAuthTokenStatusVM.  # noqa: E501
        :rtype: int
        """
        return self._expiration

    @expiration.setter
    def expiration(self, expiration):
        """Sets the expiration of this OAuthTokenStatusVM.


        :param expiration: The expiration of this OAuthTokenStatusVM.  # noqa: E501
        :type: int
        """

        self._expiration = expiration

    @property
    def validity_in_milliseconds(self):
        """Gets the validity_in_milliseconds of this OAuthTokenStatusVM.  # noqa: E501


        :return: The validity_in_milliseconds of this OAuthTokenStatusVM.  # noqa: E501
        :rtype: int
        """
        return self._validity_in_milliseconds

    @validity_in_milliseconds.setter
    def validity_in_milliseconds(self, validity_in_milliseconds):
        """Sets the validity_in_milliseconds of this OAuthTokenStatusVM.


        :param validity_in_milliseconds: The validity_in_milliseconds of this OAuthTokenStatusVM.  # noqa: E501
        :type: int
        """

        self._validity_in_milliseconds = validity_in_milliseconds

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OAuthTokenStatusVM, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OAuthTokenStatusVM):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OAuthTokenStatusVM):
            return True

        return self.to_dict() != other.to_dict()
