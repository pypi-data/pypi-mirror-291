# coding: utf-8

"""
    qTest Manager API Version 11.0.0 - 2023.6

    qTest Manager API Version 11.0.0 - 2023.6  # noqa: E501

    OpenAPI spec version: 11.0.0 - 2023.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class TestCasePermission(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'create': 'bool',
        'edit': 'bool',
        'delete': 'bool',
        'view': 'bool',
        'edit_assignment': 'bool',
        'export': 'bool',
        '_import': 'bool',
        'approve': 'bool'
    }

    attribute_map = {
        'create': 'create',
        'edit': 'edit',
        'delete': 'delete',
        'view': 'view',
        'edit_assignment': 'edit_assignment',
        'export': 'export',
        '_import': 'import',
        'approve': 'approve'
    }

    def __init__(self, create=False, edit=False, delete=False, view=False, edit_assignment=False, export=False, _import=False, approve=False, _configuration=None):  # noqa: E501
        """TestCasePermission - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._create = None
        self._edit = None
        self._delete = None
        self._view = None
        self._edit_assignment = None
        self._export = None
        self.__import = None
        self._approve = None
        self.discriminator = None

        if create is not None:
            self.create = create
        if edit is not None:
            self.edit = edit
        if delete is not None:
            self.delete = delete
        if view is not None:
            self.view = view
        if edit_assignment is not None:
            self.edit_assignment = edit_assignment
        if export is not None:
            self.export = export
        if _import is not None:
            self._import = _import
        if approve is not None:
            self.approve = approve

    @property
    def create(self):
        """Gets the create of this TestCasePermission.  # noqa: E501

        Can create Test Case  # noqa: E501

        :return: The create of this TestCasePermission.  # noqa: E501
        :rtype: bool
        """
        return self._create

    @create.setter
    def create(self, create):
        """Sets the create of this TestCasePermission.

        Can create Test Case  # noqa: E501

        :param create: The create of this TestCasePermission.  # noqa: E501
        :type: bool
        """

        self._create = create

    @property
    def edit(self):
        """Gets the edit of this TestCasePermission.  # noqa: E501

        Can edit Test Case  # noqa: E501

        :return: The edit of this TestCasePermission.  # noqa: E501
        :rtype: bool
        """
        return self._edit

    @edit.setter
    def edit(self, edit):
        """Sets the edit of this TestCasePermission.

        Can edit Test Case  # noqa: E501

        :param edit: The edit of this TestCasePermission.  # noqa: E501
        :type: bool
        """

        self._edit = edit

    @property
    def delete(self):
        """Gets the delete of this TestCasePermission.  # noqa: E501

        Can delete Test Case  # noqa: E501

        :return: The delete of this TestCasePermission.  # noqa: E501
        :rtype: bool
        """
        return self._delete

    @delete.setter
    def delete(self, delete):
        """Sets the delete of this TestCasePermission.

        Can delete Test Case  # noqa: E501

        :param delete: The delete of this TestCasePermission.  # noqa: E501
        :type: bool
        """

        self._delete = delete

    @property
    def view(self):
        """Gets the view of this TestCasePermission.  # noqa: E501

        Can view Test Case  # noqa: E501

        :return: The view of this TestCasePermission.  # noqa: E501
        :rtype: bool
        """
        return self._view

    @view.setter
    def view(self, view):
        """Sets the view of this TestCasePermission.

        Can view Test Case  # noqa: E501

        :param view: The view of this TestCasePermission.  # noqa: E501
        :type: bool
        """

        self._view = view

    @property
    def edit_assignment(self):
        """Gets the edit_assignment of this TestCasePermission.  # noqa: E501

        Can assign Test Case  # noqa: E501

        :return: The edit_assignment of this TestCasePermission.  # noqa: E501
        :rtype: bool
        """
        return self._edit_assignment

    @edit_assignment.setter
    def edit_assignment(self, edit_assignment):
        """Sets the edit_assignment of this TestCasePermission.

        Can assign Test Case  # noqa: E501

        :param edit_assignment: The edit_assignment of this TestCasePermission.  # noqa: E501
        :type: bool
        """

        self._edit_assignment = edit_assignment

    @property
    def export(self):
        """Gets the export of this TestCasePermission.  # noqa: E501

        Can export Test Case  # noqa: E501

        :return: The export of this TestCasePermission.  # noqa: E501
        :rtype: bool
        """
        return self._export

    @export.setter
    def export(self, export):
        """Sets the export of this TestCasePermission.

        Can export Test Case  # noqa: E501

        :param export: The export of this TestCasePermission.  # noqa: E501
        :type: bool
        """

        self._export = export

    @property
    def _import(self):
        """Gets the _import of this TestCasePermission.  # noqa: E501

        Can import Test Case  # noqa: E501

        :return: The _import of this TestCasePermission.  # noqa: E501
        :rtype: bool
        """
        return self.__import

    @_import.setter
    def _import(self, _import):
        """Sets the _import of this TestCasePermission.

        Can import Test Case  # noqa: E501

        :param _import: The _import of this TestCasePermission.  # noqa: E501
        :type: bool
        """

        self.__import = _import

    @property
    def approve(self):
        """Gets the approve of this TestCasePermission.  # noqa: E501

        Can approve Test Case  # noqa: E501

        :return: The approve of this TestCasePermission.  # noqa: E501
        :rtype: bool
        """
        return self._approve

    @approve.setter
    def approve(self, approve):
        """Sets the approve of this TestCasePermission.

        Can approve Test Case  # noqa: E501

        :param approve: The approve of this TestCasePermission.  # noqa: E501
        :type: bool
        """

        self._approve = approve

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TestCasePermission, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TestCasePermission):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TestCasePermission):
            return True

        return self.to_dict() != other.to_dict()
