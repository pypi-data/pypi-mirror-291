# coding: utf-8

"""
    qTest Manager API Version 11.0.0 - 2023.6

    qTest Manager API Version 11.0.0 - 2023.6  # noqa: E501

    OpenAPI spec version: 11.0.0 - 2023.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class UserResourceExtension(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'links': 'list[Link]',
        'id': 'int',
        'username': 'str',
        'email': 'str',
        'password': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'status': 'int',
        'avatar': 'str',
        'external_username': 'str',
        'authentication_system': 'str',
        'timezone_offset': 'str',
        'country_name': 'str'
    }

    attribute_map = {
        'links': 'links',
        'id': 'id',
        'username': 'username',
        'email': 'email',
        'password': 'password',
        'first_name': 'first_name',
        'last_name': 'last_name',
        'status': 'status',
        'avatar': 'avatar',
        'external_username': 'external_username',
        'authentication_system': 'authentication_system',
        'timezone_offset': 'timezone_offset',
        'country_name': 'country_name'
    }

    def __init__(self, links=None, id=None, username=None, email=None, password=None, first_name=None, last_name=None, status=None, avatar=None, external_username=None, authentication_system=None, timezone_offset=None, country_name=None, _configuration=None):  # noqa: E501
        """UserResourceExtension - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._links = None
        self._id = None
        self._username = None
        self._email = None
        self._password = None
        self._first_name = None
        self._last_name = None
        self._status = None
        self._avatar = None
        self._external_username = None
        self._authentication_system = None
        self._timezone_offset = None
        self._country_name = None
        self.discriminator = None

        if links is not None:
            self.links = links
        if id is not None:
            self.id = id
        if username is not None:
            self.username = username
        if email is not None:
            self.email = email
        if password is not None:
            self.password = password
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if status is not None:
            self.status = status
        if avatar is not None:
            self.avatar = avatar
        if external_username is not None:
            self.external_username = external_username
        if authentication_system is not None:
            self.authentication_system = authentication_system
        if timezone_offset is not None:
            self.timezone_offset = timezone_offset
        if country_name is not None:
            self.country_name = country_name

    @property
    def links(self):
        """Gets the links of this UserResourceExtension.  # noqa: E501

        Link to resource  # noqa: E501

        :return: The links of this UserResourceExtension.  # noqa: E501
        :rtype: list[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this UserResourceExtension.

        Link to resource  # noqa: E501

        :param links: The links of this UserResourceExtension.  # noqa: E501
        :type: list[Link]
        """

        self._links = links

    @property
    def id(self):
        """Gets the id of this UserResourceExtension.  # noqa: E501

        ID of the User  # noqa: E501

        :return: The id of this UserResourceExtension.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserResourceExtension.

        ID of the User  # noqa: E501

        :param id: The id of this UserResourceExtension.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def username(self):
        """Gets the username of this UserResourceExtension.  # noqa: E501

        Login username of the User  # noqa: E501

        :return: The username of this UserResourceExtension.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this UserResourceExtension.

        Login username of the User  # noqa: E501

        :param username: The username of this UserResourceExtension.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def email(self):
        """Gets the email of this UserResourceExtension.  # noqa: E501

        Contact email of the User  # noqa: E501

        :return: The email of this UserResourceExtension.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserResourceExtension.

        Contact email of the User  # noqa: E501

        :param email: The email of this UserResourceExtension.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def password(self):
        """Gets the password of this UserResourceExtension.  # noqa: E501

        Password of the User  # noqa: E501

        :return: The password of this UserResourceExtension.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this UserResourceExtension.

        Password of the User  # noqa: E501

        :param password: The password of this UserResourceExtension.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def first_name(self):
        """Gets the first_name of this UserResourceExtension.  # noqa: E501

        First name of the User  # noqa: E501

        :return: The first_name of this UserResourceExtension.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this UserResourceExtension.

        First name of the User  # noqa: E501

        :param first_name: The first_name of this UserResourceExtension.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this UserResourceExtension.  # noqa: E501

        Last name of the User  # noqa: E501

        :return: The last_name of this UserResourceExtension.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this UserResourceExtension.

        Last name of the User  # noqa: E501

        :param last_name: The last_name of this UserResourceExtension.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def status(self):
        """Gets the status of this UserResourceExtension.  # noqa: E501

        Status of the User  # noqa: E501

        :return: The status of this UserResourceExtension.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this UserResourceExtension.

        Status of the User  # noqa: E501

        :param status: The status of this UserResourceExtension.  # noqa: E501
        :type: int
        """

        self._status = status

    @property
    def avatar(self):
        """Gets the avatar of this UserResourceExtension.  # noqa: E501

        Avatar URL of the User  # noqa: E501

        :return: The avatar of this UserResourceExtension.  # noqa: E501
        :rtype: str
        """
        return self._avatar

    @avatar.setter
    def avatar(self, avatar):
        """Sets the avatar of this UserResourceExtension.

        Avatar URL of the User  # noqa: E501

        :param avatar: The avatar of this UserResourceExtension.  # noqa: E501
        :type: str
        """

        self._avatar = avatar

    @property
    def external_username(self):
        """Gets the external_username of this UserResourceExtension.  # noqa: E501

        External username, could be LDAP username or SSO username  # noqa: E501

        :return: The external_username of this UserResourceExtension.  # noqa: E501
        :rtype: str
        """
        return self._external_username

    @external_username.setter
    def external_username(self, external_username):
        """Sets the external_username of this UserResourceExtension.

        External username, could be LDAP username or SSO username  # noqa: E501

        :param external_username: The external_username of this UserResourceExtension.  # noqa: E501
        :type: str
        """

        self._external_username = external_username

    @property
    def authentication_system(self):
        """Gets the authentication_system of this UserResourceExtension.  # noqa: E501

        Name of Login provider, could be LDAP or SSO  # noqa: E501

        :return: The authentication_system of this UserResourceExtension.  # noqa: E501
        :rtype: str
        """
        return self._authentication_system

    @authentication_system.setter
    def authentication_system(self, authentication_system):
        """Sets the authentication_system of this UserResourceExtension.

        Name of Login provider, could be LDAP or SSO  # noqa: E501

        :param authentication_system: The authentication_system of this UserResourceExtension.  # noqa: E501
        :type: str
        """

        self._authentication_system = authentication_system

    @property
    def timezone_offset(self):
        """Gets the timezone_offset of this UserResourceExtension.  # noqa: E501


        :return: The timezone_offset of this UserResourceExtension.  # noqa: E501
        :rtype: str
        """
        return self._timezone_offset

    @timezone_offset.setter
    def timezone_offset(self, timezone_offset):
        """Sets the timezone_offset of this UserResourceExtension.


        :param timezone_offset: The timezone_offset of this UserResourceExtension.  # noqa: E501
        :type: str
        """

        self._timezone_offset = timezone_offset

    @property
    def country_name(self):
        """Gets the country_name of this UserResourceExtension.  # noqa: E501


        :return: The country_name of this UserResourceExtension.  # noqa: E501
        :rtype: str
        """
        return self._country_name

    @country_name.setter
    def country_name(self, country_name):
        """Sets the country_name of this UserResourceExtension.


        :param country_name: The country_name of this UserResourceExtension.  # noqa: E501
        :type: str
        """

        self._country_name = country_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserResourceExtension, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserResourceExtension):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserResourceExtension):
            return True

        return self.to_dict() != other.to_dict()
