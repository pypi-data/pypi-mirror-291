# coding: utf-8

"""
    qTest Manager API Version 11.0.0 - 2023.6

    qTest Manager API Version 11.0.0 - 2023.6  # noqa: E501

    OpenAPI spec version: 11.0.0 - 2023.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class AutomationRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'test_suite_model': 'TestSuite',
        'parent_module_model': 'ProjectModule',
        'parent_test_cycle_model': 'TestCycle',
        'skip_creating_automation_module': 'bool',
        'should_check_unlink_requirement': 'bool',
        'test_suite': 'str',
        'parent_module': 'str',
        'test_logs': 'list[AutomationTestLogResource]',
        'execution_date': 'datetime',
        'test_cycle': 'str'
    }

    attribute_map = {
        'test_suite_model': 'testSuiteModel',
        'parent_module_model': 'parentModuleModel',
        'parent_test_cycle_model': 'parentTestCycleModel',
        'skip_creating_automation_module': 'skipCreatingAutomationModule',
        'should_check_unlink_requirement': 'shouldCheckUnlinkRequirement',
        'test_suite': 'test_suite',
        'parent_module': 'parent_module',
        'test_logs': 'test_logs',
        'execution_date': 'execution_date',
        'test_cycle': 'test_cycle'
    }

    def __init__(self, test_suite_model=None, parent_module_model=None, parent_test_cycle_model=None, skip_creating_automation_module=False, should_check_unlink_requirement=False, test_suite=None, parent_module=None, test_logs=None, execution_date=None, test_cycle=None, _configuration=None):  # noqa: E501
        """AutomationRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._test_suite_model = None
        self._parent_module_model = None
        self._parent_test_cycle_model = None
        self._skip_creating_automation_module = None
        self._should_check_unlink_requirement = None
        self._test_suite = None
        self._parent_module = None
        self._test_logs = None
        self._execution_date = None
        self._test_cycle = None
        self.discriminator = None

        if test_suite_model is not None:
            self.test_suite_model = test_suite_model
        if parent_module_model is not None:
            self.parent_module_model = parent_module_model
        if parent_test_cycle_model is not None:
            self.parent_test_cycle_model = parent_test_cycle_model
        if skip_creating_automation_module is not None:
            self.skip_creating_automation_module = skip_creating_automation_module
        if should_check_unlink_requirement is not None:
            self.should_check_unlink_requirement = should_check_unlink_requirement
        if test_suite is not None:
            self.test_suite = test_suite
        if parent_module is not None:
            self.parent_module = parent_module
        self.test_logs = test_logs
        if execution_date is not None:
            self.execution_date = execution_date
        if test_cycle is not None:
            self.test_cycle = test_cycle

    @property
    def test_suite_model(self):
        """Gets the test_suite_model of this AutomationRequest.  # noqa: E501


        :return: The test_suite_model of this AutomationRequest.  # noqa: E501
        :rtype: TestSuite
        """
        return self._test_suite_model

    @test_suite_model.setter
    def test_suite_model(self, test_suite_model):
        """Sets the test_suite_model of this AutomationRequest.


        :param test_suite_model: The test_suite_model of this AutomationRequest.  # noqa: E501
        :type: TestSuite
        """

        self._test_suite_model = test_suite_model

    @property
    def parent_module_model(self):
        """Gets the parent_module_model of this AutomationRequest.  # noqa: E501


        :return: The parent_module_model of this AutomationRequest.  # noqa: E501
        :rtype: ProjectModule
        """
        return self._parent_module_model

    @parent_module_model.setter
    def parent_module_model(self, parent_module_model):
        """Sets the parent_module_model of this AutomationRequest.


        :param parent_module_model: The parent_module_model of this AutomationRequest.  # noqa: E501
        :type: ProjectModule
        """

        self._parent_module_model = parent_module_model

    @property
    def parent_test_cycle_model(self):
        """Gets the parent_test_cycle_model of this AutomationRequest.  # noqa: E501


        :return: The parent_test_cycle_model of this AutomationRequest.  # noqa: E501
        :rtype: TestCycle
        """
        return self._parent_test_cycle_model

    @parent_test_cycle_model.setter
    def parent_test_cycle_model(self, parent_test_cycle_model):
        """Sets the parent_test_cycle_model of this AutomationRequest.


        :param parent_test_cycle_model: The parent_test_cycle_model of this AutomationRequest.  # noqa: E501
        :type: TestCycle
        """

        self._parent_test_cycle_model = parent_test_cycle_model

    @property
    def skip_creating_automation_module(self):
        """Gets the skip_creating_automation_module of this AutomationRequest.  # noqa: E501


        :return: The skip_creating_automation_module of this AutomationRequest.  # noqa: E501
        :rtype: bool
        """
        return self._skip_creating_automation_module

    @skip_creating_automation_module.setter
    def skip_creating_automation_module(self, skip_creating_automation_module):
        """Sets the skip_creating_automation_module of this AutomationRequest.


        :param skip_creating_automation_module: The skip_creating_automation_module of this AutomationRequest.  # noqa: E501
        :type: bool
        """

        self._skip_creating_automation_module = skip_creating_automation_module

    @property
    def should_check_unlink_requirement(self):
        """Gets the should_check_unlink_requirement of this AutomationRequest.  # noqa: E501


        :return: The should_check_unlink_requirement of this AutomationRequest.  # noqa: E501
        :rtype: bool
        """
        return self._should_check_unlink_requirement

    @should_check_unlink_requirement.setter
    def should_check_unlink_requirement(self, should_check_unlink_requirement):
        """Sets the should_check_unlink_requirement of this AutomationRequest.


        :param should_check_unlink_requirement: The should_check_unlink_requirement of this AutomationRequest.  # noqa: E501
        :type: bool
        """

        self._should_check_unlink_requirement = should_check_unlink_requirement

    @property
    def test_suite(self):
        """Gets the test_suite of this AutomationRequest.  # noqa: E501

        ID or PID of Test Suite  # noqa: E501

        :return: The test_suite of this AutomationRequest.  # noqa: E501
        :rtype: str
        """
        return self._test_suite

    @test_suite.setter
    def test_suite(self, test_suite):
        """Sets the test_suite of this AutomationRequest.

        ID or PID of Test Suite  # noqa: E501

        :param test_suite: The test_suite of this AutomationRequest.  # noqa: E501
        :type: str
        """

        self._test_suite = test_suite

    @property
    def parent_module(self):
        """Gets the parent_module of this AutomationRequest.  # noqa: E501

        ID or PID of Module  # noqa: E501

        :return: The parent_module of this AutomationRequest.  # noqa: E501
        :rtype: str
        """
        return self._parent_module

    @parent_module.setter
    def parent_module(self, parent_module):
        """Sets the parent_module of this AutomationRequest.

        ID or PID of Module  # noqa: E501

        :param parent_module: The parent_module of this AutomationRequest.  # noqa: E501
        :type: str
        """

        self._parent_module = parent_module

    @property
    def test_logs(self):
        """Gets the test_logs of this AutomationRequest.  # noqa: E501

        Array of Test Log  # noqa: E501

        :return: The test_logs of this AutomationRequest.  # noqa: E501
        :rtype: list[AutomationTestLogResource]
        """
        return self._test_logs

    @test_logs.setter
    def test_logs(self, test_logs):
        """Sets the test_logs of this AutomationRequest.

        Array of Test Log  # noqa: E501

        :param test_logs: The test_logs of this AutomationRequest.  # noqa: E501
        :type: list[AutomationTestLogResource]
        """
        if self._configuration.client_side_validation and test_logs is None:
            raise ValueError("Invalid value for `test_logs`, must not be `None`")  # noqa: E501

        self._test_logs = test_logs

    @property
    def execution_date(self):
        """Gets the execution_date of this AutomationRequest.  # noqa: E501

        Execution Date  # noqa: E501

        :return: The execution_date of this AutomationRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._execution_date

    @execution_date.setter
    def execution_date(self, execution_date):
        """Sets the execution_date of this AutomationRequest.

        Execution Date  # noqa: E501

        :param execution_date: The execution_date of this AutomationRequest.  # noqa: E501
        :type: datetime
        """

        self._execution_date = execution_date

    @property
    def test_cycle(self):
        """Gets the test_cycle of this AutomationRequest.  # noqa: E501

        ID or PID of Test Cycle  # noqa: E501

        :return: The test_cycle of this AutomationRequest.  # noqa: E501
        :rtype: str
        """
        return self._test_cycle

    @test_cycle.setter
    def test_cycle(self, test_cycle):
        """Sets the test_cycle of this AutomationRequest.

        ID or PID of Test Cycle  # noqa: E501

        :param test_cycle: The test_cycle of this AutomationRequest.  # noqa: E501
        :type: str
        """

        self._test_cycle = test_cycle

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AutomationRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AutomationRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AutomationRequest):
            return True

        return self.to_dict() != other.to_dict()
