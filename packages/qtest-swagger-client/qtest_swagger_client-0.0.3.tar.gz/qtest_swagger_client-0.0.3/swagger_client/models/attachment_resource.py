# coding: utf-8

"""
    qTest Manager API Version 11.0.0 - 2023.6

    qTest Manager API Version 11.0.0 - 2023.6  # noqa: E501

    OpenAPI spec version: 11.0.0 - 2023.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class AttachmentResource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'links': 'list[Link]',
        'name': 'str',
        'content_type': 'str',
        'data': 'str',
        'id': 'int',
        'web_url': 'str',
        'created_date': 'datetime',
        'author': 'AttachmentAuthor',
        'artifact_id': 'int'
    }

    attribute_map = {
        'links': 'links',
        'name': 'name',
        'content_type': 'content_type',
        'data': 'data',
        'id': 'id',
        'web_url': 'web_url',
        'created_date': 'created_date',
        'author': 'author',
        'artifact_id': 'artifact_id'
    }

    def __init__(self, links=None, name=None, content_type=None, data=None, id=None, web_url=None, created_date=None, author=None, artifact_id=None, _configuration=None):  # noqa: E501
        """AttachmentResource - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._links = None
        self._name = None
        self._content_type = None
        self._data = None
        self._id = None
        self._web_url = None
        self._created_date = None
        self._author = None
        self._artifact_id = None
        self.discriminator = None

        if links is not None:
            self.links = links
        if name is not None:
            self.name = name
        if content_type is not None:
            self.content_type = content_type
        if data is not None:
            self.data = data
        if id is not None:
            self.id = id
        if web_url is not None:
            self.web_url = web_url
        if created_date is not None:
            self.created_date = created_date
        if author is not None:
            self.author = author
        if artifact_id is not None:
            self.artifact_id = artifact_id

    @property
    def links(self):
        """Gets the links of this AttachmentResource.  # noqa: E501


        :return: The links of this AttachmentResource.  # noqa: E501
        :rtype: list[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this AttachmentResource.


        :param links: The links of this AttachmentResource.  # noqa: E501
        :type: list[Link]
        """

        self._links = links

    @property
    def name(self):
        """Gets the name of this AttachmentResource.  # noqa: E501

        Attachment name  # noqa: E501

        :return: The name of this AttachmentResource.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AttachmentResource.

        Attachment name  # noqa: E501

        :param name: The name of this AttachmentResource.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def content_type(self):
        """Gets the content_type of this AttachmentResource.  # noqa: E501

        Attachment content type  # noqa: E501

        :return: The content_type of this AttachmentResource.  # noqa: E501
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this AttachmentResource.

        Attachment content type  # noqa: E501

        :param content_type: The content_type of this AttachmentResource.  # noqa: E501
        :type: str
        """

        self._content_type = content_type

    @property
    def data(self):
        """Gets the data of this AttachmentResource.  # noqa: E501


        :return: The data of this AttachmentResource.  # noqa: E501
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this AttachmentResource.


        :param data: The data of this AttachmentResource.  # noqa: E501
        :type: str
        """

        self._data = data

    @property
    def id(self):
        """Gets the id of this AttachmentResource.  # noqa: E501

        ID of the Attachment  # noqa: E501

        :return: The id of this AttachmentResource.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AttachmentResource.

        ID of the Attachment  # noqa: E501

        :param id: The id of this AttachmentResource.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def web_url(self):
        """Gets the web_url of this AttachmentResource.  # noqa: E501

        Web URL to Attachment  # noqa: E501

        :return: The web_url of this AttachmentResource.  # noqa: E501
        :rtype: str
        """
        return self._web_url

    @web_url.setter
    def web_url(self, web_url):
        """Sets the web_url of this AttachmentResource.

        Web URL to Attachment  # noqa: E501

        :param web_url: The web_url of this AttachmentResource.  # noqa: E501
        :type: str
        """

        self._web_url = web_url

    @property
    def created_date(self):
        """Gets the created_date of this AttachmentResource.  # noqa: E501

        The date Attachment was created  # noqa: E501

        :return: The created_date of this AttachmentResource.  # noqa: E501
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this AttachmentResource.

        The date Attachment was created  # noqa: E501

        :param created_date: The created_date of this AttachmentResource.  # noqa: E501
        :type: datetime
        """

        self._created_date = created_date

    @property
    def author(self):
        """Gets the author of this AttachmentResource.  # noqa: E501


        :return: The author of this AttachmentResource.  # noqa: E501
        :rtype: AttachmentAuthor
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this AttachmentResource.


        :param author: The author of this AttachmentResource.  # noqa: E501
        :type: AttachmentAuthor
        """

        self._author = author

    @property
    def artifact_id(self):
        """Gets the artifact_id of this AttachmentResource.  # noqa: E501

        Artifact ID which Attachment linked to  # noqa: E501

        :return: The artifact_id of this AttachmentResource.  # noqa: E501
        :rtype: int
        """
        return self._artifact_id

    @artifact_id.setter
    def artifact_id(self, artifact_id):
        """Sets the artifact_id of this AttachmentResource.

        Artifact ID which Attachment linked to  # noqa: E501

        :param artifact_id: The artifact_id of this AttachmentResource.  # noqa: E501
        :type: int
        """

        self._artifact_id = artifact_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AttachmentResource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AttachmentResource):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AttachmentResource):
            return True

        return self.to_dict() != other.to_dict()
