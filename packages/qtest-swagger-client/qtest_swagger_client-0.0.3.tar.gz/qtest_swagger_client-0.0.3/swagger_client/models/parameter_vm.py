# coding: utf-8

"""
    qTest Manager API Version 11.0.0 - 2023.6

    qTest Manager API Version 11.0.0 - 2023.6  # noqa: E501

    OpenAPI spec version: 11.0.0 - 2023.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ParameterVM(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'parameter_id': 'int',
        'id': 'str',
        'start_index': 'int',
        'end_index': 'int',
        'start_without_prefix_index': 'int',
        'end_without_suffix_index': 'int',
        'parameter_name': 'str'
    }

    attribute_map = {
        'parameter_id': 'parameterId',
        'id': 'id',
        'start_index': 'startIndex',
        'end_index': 'endIndex',
        'start_without_prefix_index': 'startWithoutPrefixIndex',
        'end_without_suffix_index': 'endWithoutSuffixIndex',
        'parameter_name': 'parameterName'
    }

    def __init__(self, parameter_id=None, id=None, start_index=None, end_index=None, start_without_prefix_index=None, end_without_suffix_index=None, parameter_name=None, _configuration=None):  # noqa: E501
        """ParameterVM - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._parameter_id = None
        self._id = None
        self._start_index = None
        self._end_index = None
        self._start_without_prefix_index = None
        self._end_without_suffix_index = None
        self._parameter_name = None
        self.discriminator = None

        if parameter_id is not None:
            self.parameter_id = parameter_id
        if id is not None:
            self.id = id
        if start_index is not None:
            self.start_index = start_index
        if end_index is not None:
            self.end_index = end_index
        if start_without_prefix_index is not None:
            self.start_without_prefix_index = start_without_prefix_index
        if end_without_suffix_index is not None:
            self.end_without_suffix_index = end_without_suffix_index
        if parameter_name is not None:
            self.parameter_name = parameter_name

    @property
    def parameter_id(self):
        """Gets the parameter_id of this ParameterVM.  # noqa: E501


        :return: The parameter_id of this ParameterVM.  # noqa: E501
        :rtype: int
        """
        return self._parameter_id

    @parameter_id.setter
    def parameter_id(self, parameter_id):
        """Sets the parameter_id of this ParameterVM.


        :param parameter_id: The parameter_id of this ParameterVM.  # noqa: E501
        :type: int
        """

        self._parameter_id = parameter_id

    @property
    def id(self):
        """Gets the id of this ParameterVM.  # noqa: E501


        :return: The id of this ParameterVM.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ParameterVM.


        :param id: The id of this ParameterVM.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def start_index(self):
        """Gets the start_index of this ParameterVM.  # noqa: E501


        :return: The start_index of this ParameterVM.  # noqa: E501
        :rtype: int
        """
        return self._start_index

    @start_index.setter
    def start_index(self, start_index):
        """Sets the start_index of this ParameterVM.


        :param start_index: The start_index of this ParameterVM.  # noqa: E501
        :type: int
        """

        self._start_index = start_index

    @property
    def end_index(self):
        """Gets the end_index of this ParameterVM.  # noqa: E501


        :return: The end_index of this ParameterVM.  # noqa: E501
        :rtype: int
        """
        return self._end_index

    @end_index.setter
    def end_index(self, end_index):
        """Sets the end_index of this ParameterVM.


        :param end_index: The end_index of this ParameterVM.  # noqa: E501
        :type: int
        """

        self._end_index = end_index

    @property
    def start_without_prefix_index(self):
        """Gets the start_without_prefix_index of this ParameterVM.  # noqa: E501


        :return: The start_without_prefix_index of this ParameterVM.  # noqa: E501
        :rtype: int
        """
        return self._start_without_prefix_index

    @start_without_prefix_index.setter
    def start_without_prefix_index(self, start_without_prefix_index):
        """Sets the start_without_prefix_index of this ParameterVM.


        :param start_without_prefix_index: The start_without_prefix_index of this ParameterVM.  # noqa: E501
        :type: int
        """

        self._start_without_prefix_index = start_without_prefix_index

    @property
    def end_without_suffix_index(self):
        """Gets the end_without_suffix_index of this ParameterVM.  # noqa: E501


        :return: The end_without_suffix_index of this ParameterVM.  # noqa: E501
        :rtype: int
        """
        return self._end_without_suffix_index

    @end_without_suffix_index.setter
    def end_without_suffix_index(self, end_without_suffix_index):
        """Sets the end_without_suffix_index of this ParameterVM.


        :param end_without_suffix_index: The end_without_suffix_index of this ParameterVM.  # noqa: E501
        :type: int
        """

        self._end_without_suffix_index = end_without_suffix_index

    @property
    def parameter_name(self):
        """Gets the parameter_name of this ParameterVM.  # noqa: E501


        :return: The parameter_name of this ParameterVM.  # noqa: E501
        :rtype: str
        """
        return self._parameter_name

    @parameter_name.setter
    def parameter_name(self, parameter_name):
        """Sets the parameter_name of this ParameterVM.


        :param parameter_name: The parameter_name of this ParameterVM.  # noqa: E501
        :type: str
        """

        self._parameter_name = parameter_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ParameterVM, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ParameterVM):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ParameterVM):
            return True

        return self.to_dict() != other.to_dict()
