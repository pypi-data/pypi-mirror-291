# coding: utf-8

"""
    qTest Manager API Version 11.0.0 - 2023.6

    qTest Manager API Version 11.0.0 - 2023.6  # noqa: E501

    OpenAPI spec version: 11.0.0 - 2023.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class UserProfile(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'report_permission': 'ReportPermission',
        'user_id': 'int',
        'project_id': 'int',
        'release': 'ReleasePermission',
        'build': 'BuildPermission',
        'module': 'ModulePermission',
        'requirement': 'RequirementPermission',
        'test_case': 'TestCasePermission',
        'test_cycle': 'TestCyclePermission',
        'test_suite': 'TestSuitePermission',
        'test_run': 'TestRunPermission',
        'defect': 'DefectPermission',
        'project_setting': 'ProjectSettingPermission',
        'session': 'SessionManagerPermission',
        'project': 'ProjectAdminPermission',
        'schedule': 'SchedulePermission'
    }

    attribute_map = {
        'report_permission': 'reportPermission',
        'user_id': 'user_id',
        'project_id': 'project_id',
        'release': 'release',
        'build': 'build',
        'module': 'module',
        'requirement': 'requirement',
        'test_case': 'test_case',
        'test_cycle': 'test_cycle',
        'test_suite': 'test_suite',
        'test_run': 'test_run',
        'defect': 'defect',
        'project_setting': 'project_setting',
        'session': 'session',
        'project': 'project',
        'schedule': 'schedule'
    }

    def __init__(self, report_permission=None, user_id=None, project_id=None, release=None, build=None, module=None, requirement=None, test_case=None, test_cycle=None, test_suite=None, test_run=None, defect=None, project_setting=None, session=None, project=None, schedule=None, _configuration=None):  # noqa: E501
        """UserProfile - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._report_permission = None
        self._user_id = None
        self._project_id = None
        self._release = None
        self._build = None
        self._module = None
        self._requirement = None
        self._test_case = None
        self._test_cycle = None
        self._test_suite = None
        self._test_run = None
        self._defect = None
        self._project_setting = None
        self._session = None
        self._project = None
        self._schedule = None
        self.discriminator = None

        if report_permission is not None:
            self.report_permission = report_permission
        if user_id is not None:
            self.user_id = user_id
        if project_id is not None:
            self.project_id = project_id
        if release is not None:
            self.release = release
        if build is not None:
            self.build = build
        if module is not None:
            self.module = module
        if requirement is not None:
            self.requirement = requirement
        if test_case is not None:
            self.test_case = test_case
        if test_cycle is not None:
            self.test_cycle = test_cycle
        if test_suite is not None:
            self.test_suite = test_suite
        if test_run is not None:
            self.test_run = test_run
        if defect is not None:
            self.defect = defect
        if project_setting is not None:
            self.project_setting = project_setting
        if session is not None:
            self.session = session
        if project is not None:
            self.project = project
        if schedule is not None:
            self.schedule = schedule

    @property
    def report_permission(self):
        """Gets the report_permission of this UserProfile.  # noqa: E501


        :return: The report_permission of this UserProfile.  # noqa: E501
        :rtype: ReportPermission
        """
        return self._report_permission

    @report_permission.setter
    def report_permission(self, report_permission):
        """Sets the report_permission of this UserProfile.


        :param report_permission: The report_permission of this UserProfile.  # noqa: E501
        :type: ReportPermission
        """

        self._report_permission = report_permission

    @property
    def user_id(self):
        """Gets the user_id of this UserProfile.  # noqa: E501

        ID of the User  # noqa: E501

        :return: The user_id of this UserProfile.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this UserProfile.

        ID of the User  # noqa: E501

        :param user_id: The user_id of this UserProfile.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def project_id(self):
        """Gets the project_id of this UserProfile.  # noqa: E501

        ID of the Project  # noqa: E501

        :return: The project_id of this UserProfile.  # noqa: E501
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this UserProfile.

        ID of the Project  # noqa: E501

        :param project_id: The project_id of this UserProfile.  # noqa: E501
        :type: int
        """

        self._project_id = project_id

    @property
    def release(self):
        """Gets the release of this UserProfile.  # noqa: E501


        :return: The release of this UserProfile.  # noqa: E501
        :rtype: ReleasePermission
        """
        return self._release

    @release.setter
    def release(self, release):
        """Sets the release of this UserProfile.


        :param release: The release of this UserProfile.  # noqa: E501
        :type: ReleasePermission
        """

        self._release = release

    @property
    def build(self):
        """Gets the build of this UserProfile.  # noqa: E501


        :return: The build of this UserProfile.  # noqa: E501
        :rtype: BuildPermission
        """
        return self._build

    @build.setter
    def build(self, build):
        """Sets the build of this UserProfile.


        :param build: The build of this UserProfile.  # noqa: E501
        :type: BuildPermission
        """

        self._build = build

    @property
    def module(self):
        """Gets the module of this UserProfile.  # noqa: E501


        :return: The module of this UserProfile.  # noqa: E501
        :rtype: ModulePermission
        """
        return self._module

    @module.setter
    def module(self, module):
        """Sets the module of this UserProfile.


        :param module: The module of this UserProfile.  # noqa: E501
        :type: ModulePermission
        """

        self._module = module

    @property
    def requirement(self):
        """Gets the requirement of this UserProfile.  # noqa: E501


        :return: The requirement of this UserProfile.  # noqa: E501
        :rtype: RequirementPermission
        """
        return self._requirement

    @requirement.setter
    def requirement(self, requirement):
        """Sets the requirement of this UserProfile.


        :param requirement: The requirement of this UserProfile.  # noqa: E501
        :type: RequirementPermission
        """

        self._requirement = requirement

    @property
    def test_case(self):
        """Gets the test_case of this UserProfile.  # noqa: E501


        :return: The test_case of this UserProfile.  # noqa: E501
        :rtype: TestCasePermission
        """
        return self._test_case

    @test_case.setter
    def test_case(self, test_case):
        """Sets the test_case of this UserProfile.


        :param test_case: The test_case of this UserProfile.  # noqa: E501
        :type: TestCasePermission
        """

        self._test_case = test_case

    @property
    def test_cycle(self):
        """Gets the test_cycle of this UserProfile.  # noqa: E501


        :return: The test_cycle of this UserProfile.  # noqa: E501
        :rtype: TestCyclePermission
        """
        return self._test_cycle

    @test_cycle.setter
    def test_cycle(self, test_cycle):
        """Sets the test_cycle of this UserProfile.


        :param test_cycle: The test_cycle of this UserProfile.  # noqa: E501
        :type: TestCyclePermission
        """

        self._test_cycle = test_cycle

    @property
    def test_suite(self):
        """Gets the test_suite of this UserProfile.  # noqa: E501


        :return: The test_suite of this UserProfile.  # noqa: E501
        :rtype: TestSuitePermission
        """
        return self._test_suite

    @test_suite.setter
    def test_suite(self, test_suite):
        """Sets the test_suite of this UserProfile.


        :param test_suite: The test_suite of this UserProfile.  # noqa: E501
        :type: TestSuitePermission
        """

        self._test_suite = test_suite

    @property
    def test_run(self):
        """Gets the test_run of this UserProfile.  # noqa: E501


        :return: The test_run of this UserProfile.  # noqa: E501
        :rtype: TestRunPermission
        """
        return self._test_run

    @test_run.setter
    def test_run(self, test_run):
        """Sets the test_run of this UserProfile.


        :param test_run: The test_run of this UserProfile.  # noqa: E501
        :type: TestRunPermission
        """

        self._test_run = test_run

    @property
    def defect(self):
        """Gets the defect of this UserProfile.  # noqa: E501


        :return: The defect of this UserProfile.  # noqa: E501
        :rtype: DefectPermission
        """
        return self._defect

    @defect.setter
    def defect(self, defect):
        """Sets the defect of this UserProfile.


        :param defect: The defect of this UserProfile.  # noqa: E501
        :type: DefectPermission
        """

        self._defect = defect

    @property
    def project_setting(self):
        """Gets the project_setting of this UserProfile.  # noqa: E501


        :return: The project_setting of this UserProfile.  # noqa: E501
        :rtype: ProjectSettingPermission
        """
        return self._project_setting

    @project_setting.setter
    def project_setting(self, project_setting):
        """Sets the project_setting of this UserProfile.


        :param project_setting: The project_setting of this UserProfile.  # noqa: E501
        :type: ProjectSettingPermission
        """

        self._project_setting = project_setting

    @property
    def session(self):
        """Gets the session of this UserProfile.  # noqa: E501


        :return: The session of this UserProfile.  # noqa: E501
        :rtype: SessionManagerPermission
        """
        return self._session

    @session.setter
    def session(self, session):
        """Sets the session of this UserProfile.


        :param session: The session of this UserProfile.  # noqa: E501
        :type: SessionManagerPermission
        """

        self._session = session

    @property
    def project(self):
        """Gets the project of this UserProfile.  # noqa: E501


        :return: The project of this UserProfile.  # noqa: E501
        :rtype: ProjectAdminPermission
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this UserProfile.


        :param project: The project of this UserProfile.  # noqa: E501
        :type: ProjectAdminPermission
        """

        self._project = project

    @property
    def schedule(self):
        """Gets the schedule of this UserProfile.  # noqa: E501


        :return: The schedule of this UserProfile.  # noqa: E501
        :rtype: SchedulePermission
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this UserProfile.


        :param schedule: The schedule of this UserProfile.  # noqa: E501
        :type: SchedulePermission
        """

        self._schedule = schedule

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserProfile, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserProfile):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserProfile):
            return True

        return self.to_dict() != other.to_dict()
