# coding: utf-8

"""
    qTest Manager API Version 11.0.0 - 2023.6

    qTest Manager API Version 11.0.0 - 2023.6  # noqa: E501

    OpenAPI spec version: 11.0.0 - 2023.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class LookUp(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'lookup_value': 'str',
        'lookup_type_id': 'int',
        'client_id': 'int',
        'project_id': 'int',
        'system_value': 'bool',
        'order': 'int'
    }

    attribute_map = {
        'id': 'id',
        'lookup_value': 'lookupValue',
        'lookup_type_id': 'lookupTypeId',
        'client_id': 'clientId',
        'project_id': 'projectId',
        'system_value': 'systemValue',
        'order': 'order'
    }

    def __init__(self, id=None, lookup_value=None, lookup_type_id=None, client_id=None, project_id=None, system_value=False, order=None, _configuration=None):  # noqa: E501
        """LookUp - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._lookup_value = None
        self._lookup_type_id = None
        self._client_id = None
        self._project_id = None
        self._system_value = None
        self._order = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if lookup_value is not None:
            self.lookup_value = lookup_value
        if lookup_type_id is not None:
            self.lookup_type_id = lookup_type_id
        if client_id is not None:
            self.client_id = client_id
        if project_id is not None:
            self.project_id = project_id
        if system_value is not None:
            self.system_value = system_value
        if order is not None:
            self.order = order

    @property
    def id(self):
        """Gets the id of this LookUp.  # noqa: E501


        :return: The id of this LookUp.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LookUp.


        :param id: The id of this LookUp.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def lookup_value(self):
        """Gets the lookup_value of this LookUp.  # noqa: E501


        :return: The lookup_value of this LookUp.  # noqa: E501
        :rtype: str
        """
        return self._lookup_value

    @lookup_value.setter
    def lookup_value(self, lookup_value):
        """Sets the lookup_value of this LookUp.


        :param lookup_value: The lookup_value of this LookUp.  # noqa: E501
        :type: str
        """

        self._lookup_value = lookup_value

    @property
    def lookup_type_id(self):
        """Gets the lookup_type_id of this LookUp.  # noqa: E501


        :return: The lookup_type_id of this LookUp.  # noqa: E501
        :rtype: int
        """
        return self._lookup_type_id

    @lookup_type_id.setter
    def lookup_type_id(self, lookup_type_id):
        """Sets the lookup_type_id of this LookUp.


        :param lookup_type_id: The lookup_type_id of this LookUp.  # noqa: E501
        :type: int
        """

        self._lookup_type_id = lookup_type_id

    @property
    def client_id(self):
        """Gets the client_id of this LookUp.  # noqa: E501


        :return: The client_id of this LookUp.  # noqa: E501
        :rtype: int
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this LookUp.


        :param client_id: The client_id of this LookUp.  # noqa: E501
        :type: int
        """

        self._client_id = client_id

    @property
    def project_id(self):
        """Gets the project_id of this LookUp.  # noqa: E501


        :return: The project_id of this LookUp.  # noqa: E501
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this LookUp.


        :param project_id: The project_id of this LookUp.  # noqa: E501
        :type: int
        """

        self._project_id = project_id

    @property
    def system_value(self):
        """Gets the system_value of this LookUp.  # noqa: E501


        :return: The system_value of this LookUp.  # noqa: E501
        :rtype: bool
        """
        return self._system_value

    @system_value.setter
    def system_value(self, system_value):
        """Sets the system_value of this LookUp.


        :param system_value: The system_value of this LookUp.  # noqa: E501
        :type: bool
        """

        self._system_value = system_value

    @property
    def order(self):
        """Gets the order of this LookUp.  # noqa: E501


        :return: The order of this LookUp.  # noqa: E501
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this LookUp.


        :param order: The order of this LookUp.  # noqa: E501
        :type: int
        """

        self._order = order

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LookUp, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LookUp):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LookUp):
            return True

        return self.to_dict() != other.to_dict()
