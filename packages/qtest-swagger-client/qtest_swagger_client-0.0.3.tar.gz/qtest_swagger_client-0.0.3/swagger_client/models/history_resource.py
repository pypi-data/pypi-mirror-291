# coding: utf-8

"""
    qTest Manager API Version 11.0.0 - 2023.6

    qTest Manager API Version 11.0.0 - 2023.6  # noqa: E501

    OpenAPI spec version: 11.0.0 - 2023.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class HistoryResource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created': 'datetime',
        'description': 'str',
        'links': 'list[Link]',
        'id': 'int',
        'author_id': 'int',
        'linked_object': 'LinkedObject',
        'changes': 'list[HistoryChange]'
    }

    attribute_map = {
        'created': 'created',
        'description': 'description',
        'links': 'links',
        'id': 'id',
        'author_id': 'author_id',
        'linked_object': 'linked_object',
        'changes': 'changes'
    }

    def __init__(self, created=None, description=None, links=None, id=None, author_id=None, linked_object=None, changes=None, _configuration=None):  # noqa: E501
        """HistoryResource - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._created = None
        self._description = None
        self._links = None
        self._id = None
        self._author_id = None
        self._linked_object = None
        self._changes = None
        self.discriminator = None

        if created is not None:
            self.created = created
        if description is not None:
            self.description = description
        if links is not None:
            self.links = links
        if id is not None:
            self.id = id
        if author_id is not None:
            self.author_id = author_id
        if linked_object is not None:
            self.linked_object = linked_object
        if changes is not None:
            self.changes = changes

    @property
    def created(self):
        """Gets the created of this HistoryResource.  # noqa: E501


        :return: The created of this HistoryResource.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this HistoryResource.


        :param created: The created of this HistoryResource.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def description(self):
        """Gets the description of this HistoryResource.  # noqa: E501


        :return: The description of this HistoryResource.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this HistoryResource.


        :param description: The description of this HistoryResource.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def links(self):
        """Gets the links of this HistoryResource.  # noqa: E501


        :return: The links of this HistoryResource.  # noqa: E501
        :rtype: list[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this HistoryResource.


        :param links: The links of this HistoryResource.  # noqa: E501
        :type: list[Link]
        """

        self._links = links

    @property
    def id(self):
        """Gets the id of this HistoryResource.  # noqa: E501


        :return: The id of this HistoryResource.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this HistoryResource.


        :param id: The id of this HistoryResource.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def author_id(self):
        """Gets the author_id of this HistoryResource.  # noqa: E501


        :return: The author_id of this HistoryResource.  # noqa: E501
        :rtype: int
        """
        return self._author_id

    @author_id.setter
    def author_id(self, author_id):
        """Sets the author_id of this HistoryResource.


        :param author_id: The author_id of this HistoryResource.  # noqa: E501
        :type: int
        """

        self._author_id = author_id

    @property
    def linked_object(self):
        """Gets the linked_object of this HistoryResource.  # noqa: E501


        :return: The linked_object of this HistoryResource.  # noqa: E501
        :rtype: LinkedObject
        """
        return self._linked_object

    @linked_object.setter
    def linked_object(self, linked_object):
        """Sets the linked_object of this HistoryResource.


        :param linked_object: The linked_object of this HistoryResource.  # noqa: E501
        :type: LinkedObject
        """

        self._linked_object = linked_object

    @property
    def changes(self):
        """Gets the changes of this HistoryResource.  # noqa: E501


        :return: The changes of this HistoryResource.  # noqa: E501
        :rtype: list[HistoryChange]
        """
        return self._changes

    @changes.setter
    def changes(self, changes):
        """Sets the changes of this HistoryResource.


        :param changes: The changes of this HistoryResource.  # noqa: E501
        :type: list[HistoryChange]
        """

        self._changes = changes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HistoryResource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HistoryResource):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, HistoryResource):
            return True

        return self.to_dict() != other.to_dict()
