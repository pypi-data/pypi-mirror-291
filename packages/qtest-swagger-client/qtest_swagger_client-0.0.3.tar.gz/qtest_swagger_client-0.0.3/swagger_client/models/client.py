# coding: utf-8

"""
    qTest Manager API Version 11.0.0 - 2023.6

    qTest Manager API Version 11.0.0 - 2023.6  # noqa: E501

    OpenAPI spec version: 11.0.0 - 2023.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Client(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'site_name': 'str',
        'max_failed_login_attempt': 'int',
        'password_shelf_life': 'int',
        'password_healthy_period': 'int',
        'minimum_unique_passwords_sequence_length': 'int',
        'license_blob_id': 'int',
        'session_timeout_enabled': 'bool',
        'session_timeout_minute': 'int',
        'terminate_idle_enabled': 'bool',
        'terminate_idle_minute': 'int',
        'date_format': 'str',
        'remember_me_timeout_enabled': 'bool',
        'remember_me_timeout_day': 'int',
        'mail_recipients': 'str',
        'use_custom_password_policy': 'bool',
        'minimum_password_length': 'int',
        'password_contains_capital_letters': 'bool',
        'password_contains_lowercase_letters': 'bool',
        'password_contains_numeric_chars': 'bool',
        'password_contains_special_chars': 'bool',
        'search_status': 'str',
        'search_migration_duration': 'int',
        'tracking_requirement_testcase_version_link': 'bool',
        'for_on_premise': 'bool',
        'for_explorer': 'bool',
        'tdstenant_id': 'str',
        'inactive': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'site_name': 'siteName',
        'max_failed_login_attempt': 'maxFailedLoginAttempt',
        'password_shelf_life': 'passwordShelfLife',
        'password_healthy_period': 'passwordHealthyPeriod',
        'minimum_unique_passwords_sequence_length': 'minimumUniquePasswordsSequenceLength',
        'license_blob_id': 'licenseBlobId',
        'session_timeout_enabled': 'sessionTimeoutEnabled',
        'session_timeout_minute': 'sessionTimeoutMinute',
        'terminate_idle_enabled': 'terminateIdleEnabled',
        'terminate_idle_minute': 'terminateIdleMinute',
        'date_format': 'dateFormat',
        'remember_me_timeout_enabled': 'rememberMeTimeoutEnabled',
        'remember_me_timeout_day': 'rememberMeTimeoutDay',
        'mail_recipients': 'mailRecipients',
        'use_custom_password_policy': 'useCustomPasswordPolicy',
        'minimum_password_length': 'minimumPasswordLength',
        'password_contains_capital_letters': 'passwordContainsCapitalLetters',
        'password_contains_lowercase_letters': 'passwordContainsLowercaseLetters',
        'password_contains_numeric_chars': 'passwordContainsNumericChars',
        'password_contains_special_chars': 'passwordContainsSpecialChars',
        'search_status': 'searchStatus',
        'search_migration_duration': 'searchMigrationDuration',
        'tracking_requirement_testcase_version_link': 'trackingRequirementTestcaseVersionLink',
        'for_on_premise': 'forOnPremise',
        'for_explorer': 'forExplorer',
        'tdstenant_id': 'tdstenantId',
        'inactive': 'inactive'
    }

    def __init__(self, id=None, name=None, site_name=None, max_failed_login_attempt=None, password_shelf_life=None, password_healthy_period=None, minimum_unique_passwords_sequence_length=None, license_blob_id=None, session_timeout_enabled=False, session_timeout_minute=None, terminate_idle_enabled=False, terminate_idle_minute=None, date_format=None, remember_me_timeout_enabled=False, remember_me_timeout_day=None, mail_recipients=None, use_custom_password_policy=False, minimum_password_length=None, password_contains_capital_letters=False, password_contains_lowercase_letters=False, password_contains_numeric_chars=False, password_contains_special_chars=False, search_status=None, search_migration_duration=None, tracking_requirement_testcase_version_link=False, for_on_premise=False, for_explorer=False, tdstenant_id=None, inactive=False, _configuration=None):  # noqa: E501
        """Client - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._site_name = None
        self._max_failed_login_attempt = None
        self._password_shelf_life = None
        self._password_healthy_period = None
        self._minimum_unique_passwords_sequence_length = None
        self._license_blob_id = None
        self._session_timeout_enabled = None
        self._session_timeout_minute = None
        self._terminate_idle_enabled = None
        self._terminate_idle_minute = None
        self._date_format = None
        self._remember_me_timeout_enabled = None
        self._remember_me_timeout_day = None
        self._mail_recipients = None
        self._use_custom_password_policy = None
        self._minimum_password_length = None
        self._password_contains_capital_letters = None
        self._password_contains_lowercase_letters = None
        self._password_contains_numeric_chars = None
        self._password_contains_special_chars = None
        self._search_status = None
        self._search_migration_duration = None
        self._tracking_requirement_testcase_version_link = None
        self._for_on_premise = None
        self._for_explorer = None
        self._tdstenant_id = None
        self._inactive = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if site_name is not None:
            self.site_name = site_name
        if max_failed_login_attempt is not None:
            self.max_failed_login_attempt = max_failed_login_attempt
        if password_shelf_life is not None:
            self.password_shelf_life = password_shelf_life
        if password_healthy_period is not None:
            self.password_healthy_period = password_healthy_period
        if minimum_unique_passwords_sequence_length is not None:
            self.minimum_unique_passwords_sequence_length = minimum_unique_passwords_sequence_length
        if license_blob_id is not None:
            self.license_blob_id = license_blob_id
        if session_timeout_enabled is not None:
            self.session_timeout_enabled = session_timeout_enabled
        if session_timeout_minute is not None:
            self.session_timeout_minute = session_timeout_minute
        if terminate_idle_enabled is not None:
            self.terminate_idle_enabled = terminate_idle_enabled
        if terminate_idle_minute is not None:
            self.terminate_idle_minute = terminate_idle_minute
        if date_format is not None:
            self.date_format = date_format
        if remember_me_timeout_enabled is not None:
            self.remember_me_timeout_enabled = remember_me_timeout_enabled
        if remember_me_timeout_day is not None:
            self.remember_me_timeout_day = remember_me_timeout_day
        if mail_recipients is not None:
            self.mail_recipients = mail_recipients
        if use_custom_password_policy is not None:
            self.use_custom_password_policy = use_custom_password_policy
        if minimum_password_length is not None:
            self.minimum_password_length = minimum_password_length
        if password_contains_capital_letters is not None:
            self.password_contains_capital_letters = password_contains_capital_letters
        if password_contains_lowercase_letters is not None:
            self.password_contains_lowercase_letters = password_contains_lowercase_letters
        if password_contains_numeric_chars is not None:
            self.password_contains_numeric_chars = password_contains_numeric_chars
        if password_contains_special_chars is not None:
            self.password_contains_special_chars = password_contains_special_chars
        if search_status is not None:
            self.search_status = search_status
        if search_migration_duration is not None:
            self.search_migration_duration = search_migration_duration
        if tracking_requirement_testcase_version_link is not None:
            self.tracking_requirement_testcase_version_link = tracking_requirement_testcase_version_link
        if for_on_premise is not None:
            self.for_on_premise = for_on_premise
        if for_explorer is not None:
            self.for_explorer = for_explorer
        if tdstenant_id is not None:
            self.tdstenant_id = tdstenant_id
        if inactive is not None:
            self.inactive = inactive

    @property
    def id(self):
        """Gets the id of this Client.  # noqa: E501


        :return: The id of this Client.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Client.


        :param id: The id of this Client.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Client.  # noqa: E501


        :return: The name of this Client.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Client.


        :param name: The name of this Client.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def site_name(self):
        """Gets the site_name of this Client.  # noqa: E501


        :return: The site_name of this Client.  # noqa: E501
        :rtype: str
        """
        return self._site_name

    @site_name.setter
    def site_name(self, site_name):
        """Sets the site_name of this Client.


        :param site_name: The site_name of this Client.  # noqa: E501
        :type: str
        """

        self._site_name = site_name

    @property
    def max_failed_login_attempt(self):
        """Gets the max_failed_login_attempt of this Client.  # noqa: E501


        :return: The max_failed_login_attempt of this Client.  # noqa: E501
        :rtype: int
        """
        return self._max_failed_login_attempt

    @max_failed_login_attempt.setter
    def max_failed_login_attempt(self, max_failed_login_attempt):
        """Sets the max_failed_login_attempt of this Client.


        :param max_failed_login_attempt: The max_failed_login_attempt of this Client.  # noqa: E501
        :type: int
        """

        self._max_failed_login_attempt = max_failed_login_attempt

    @property
    def password_shelf_life(self):
        """Gets the password_shelf_life of this Client.  # noqa: E501


        :return: The password_shelf_life of this Client.  # noqa: E501
        :rtype: int
        """
        return self._password_shelf_life

    @password_shelf_life.setter
    def password_shelf_life(self, password_shelf_life):
        """Sets the password_shelf_life of this Client.


        :param password_shelf_life: The password_shelf_life of this Client.  # noqa: E501
        :type: int
        """

        self._password_shelf_life = password_shelf_life

    @property
    def password_healthy_period(self):
        """Gets the password_healthy_period of this Client.  # noqa: E501


        :return: The password_healthy_period of this Client.  # noqa: E501
        :rtype: int
        """
        return self._password_healthy_period

    @password_healthy_period.setter
    def password_healthy_period(self, password_healthy_period):
        """Sets the password_healthy_period of this Client.


        :param password_healthy_period: The password_healthy_period of this Client.  # noqa: E501
        :type: int
        """

        self._password_healthy_period = password_healthy_period

    @property
    def minimum_unique_passwords_sequence_length(self):
        """Gets the minimum_unique_passwords_sequence_length of this Client.  # noqa: E501


        :return: The minimum_unique_passwords_sequence_length of this Client.  # noqa: E501
        :rtype: int
        """
        return self._minimum_unique_passwords_sequence_length

    @minimum_unique_passwords_sequence_length.setter
    def minimum_unique_passwords_sequence_length(self, minimum_unique_passwords_sequence_length):
        """Sets the minimum_unique_passwords_sequence_length of this Client.


        :param minimum_unique_passwords_sequence_length: The minimum_unique_passwords_sequence_length of this Client.  # noqa: E501
        :type: int
        """

        self._minimum_unique_passwords_sequence_length = minimum_unique_passwords_sequence_length

    @property
    def license_blob_id(self):
        """Gets the license_blob_id of this Client.  # noqa: E501


        :return: The license_blob_id of this Client.  # noqa: E501
        :rtype: int
        """
        return self._license_blob_id

    @license_blob_id.setter
    def license_blob_id(self, license_blob_id):
        """Sets the license_blob_id of this Client.


        :param license_blob_id: The license_blob_id of this Client.  # noqa: E501
        :type: int
        """

        self._license_blob_id = license_blob_id

    @property
    def session_timeout_enabled(self):
        """Gets the session_timeout_enabled of this Client.  # noqa: E501


        :return: The session_timeout_enabled of this Client.  # noqa: E501
        :rtype: bool
        """
        return self._session_timeout_enabled

    @session_timeout_enabled.setter
    def session_timeout_enabled(self, session_timeout_enabled):
        """Sets the session_timeout_enabled of this Client.


        :param session_timeout_enabled: The session_timeout_enabled of this Client.  # noqa: E501
        :type: bool
        """

        self._session_timeout_enabled = session_timeout_enabled

    @property
    def session_timeout_minute(self):
        """Gets the session_timeout_minute of this Client.  # noqa: E501


        :return: The session_timeout_minute of this Client.  # noqa: E501
        :rtype: int
        """
        return self._session_timeout_minute

    @session_timeout_minute.setter
    def session_timeout_minute(self, session_timeout_minute):
        """Sets the session_timeout_minute of this Client.


        :param session_timeout_minute: The session_timeout_minute of this Client.  # noqa: E501
        :type: int
        """

        self._session_timeout_minute = session_timeout_minute

    @property
    def terminate_idle_enabled(self):
        """Gets the terminate_idle_enabled of this Client.  # noqa: E501


        :return: The terminate_idle_enabled of this Client.  # noqa: E501
        :rtype: bool
        """
        return self._terminate_idle_enabled

    @terminate_idle_enabled.setter
    def terminate_idle_enabled(self, terminate_idle_enabled):
        """Sets the terminate_idle_enabled of this Client.


        :param terminate_idle_enabled: The terminate_idle_enabled of this Client.  # noqa: E501
        :type: bool
        """

        self._terminate_idle_enabled = terminate_idle_enabled

    @property
    def terminate_idle_minute(self):
        """Gets the terminate_idle_minute of this Client.  # noqa: E501


        :return: The terminate_idle_minute of this Client.  # noqa: E501
        :rtype: int
        """
        return self._terminate_idle_minute

    @terminate_idle_minute.setter
    def terminate_idle_minute(self, terminate_idle_minute):
        """Sets the terminate_idle_minute of this Client.


        :param terminate_idle_minute: The terminate_idle_minute of this Client.  # noqa: E501
        :type: int
        """

        self._terminate_idle_minute = terminate_idle_minute

    @property
    def date_format(self):
        """Gets the date_format of this Client.  # noqa: E501


        :return: The date_format of this Client.  # noqa: E501
        :rtype: str
        """
        return self._date_format

    @date_format.setter
    def date_format(self, date_format):
        """Sets the date_format of this Client.


        :param date_format: The date_format of this Client.  # noqa: E501
        :type: str
        """

        self._date_format = date_format

    @property
    def remember_me_timeout_enabled(self):
        """Gets the remember_me_timeout_enabled of this Client.  # noqa: E501


        :return: The remember_me_timeout_enabled of this Client.  # noqa: E501
        :rtype: bool
        """
        return self._remember_me_timeout_enabled

    @remember_me_timeout_enabled.setter
    def remember_me_timeout_enabled(self, remember_me_timeout_enabled):
        """Sets the remember_me_timeout_enabled of this Client.


        :param remember_me_timeout_enabled: The remember_me_timeout_enabled of this Client.  # noqa: E501
        :type: bool
        """

        self._remember_me_timeout_enabled = remember_me_timeout_enabled

    @property
    def remember_me_timeout_day(self):
        """Gets the remember_me_timeout_day of this Client.  # noqa: E501


        :return: The remember_me_timeout_day of this Client.  # noqa: E501
        :rtype: int
        """
        return self._remember_me_timeout_day

    @remember_me_timeout_day.setter
    def remember_me_timeout_day(self, remember_me_timeout_day):
        """Sets the remember_me_timeout_day of this Client.


        :param remember_me_timeout_day: The remember_me_timeout_day of this Client.  # noqa: E501
        :type: int
        """

        self._remember_me_timeout_day = remember_me_timeout_day

    @property
    def mail_recipients(self):
        """Gets the mail_recipients of this Client.  # noqa: E501


        :return: The mail_recipients of this Client.  # noqa: E501
        :rtype: str
        """
        return self._mail_recipients

    @mail_recipients.setter
    def mail_recipients(self, mail_recipients):
        """Sets the mail_recipients of this Client.


        :param mail_recipients: The mail_recipients of this Client.  # noqa: E501
        :type: str
        """

        self._mail_recipients = mail_recipients

    @property
    def use_custom_password_policy(self):
        """Gets the use_custom_password_policy of this Client.  # noqa: E501


        :return: The use_custom_password_policy of this Client.  # noqa: E501
        :rtype: bool
        """
        return self._use_custom_password_policy

    @use_custom_password_policy.setter
    def use_custom_password_policy(self, use_custom_password_policy):
        """Sets the use_custom_password_policy of this Client.


        :param use_custom_password_policy: The use_custom_password_policy of this Client.  # noqa: E501
        :type: bool
        """

        self._use_custom_password_policy = use_custom_password_policy

    @property
    def minimum_password_length(self):
        """Gets the minimum_password_length of this Client.  # noqa: E501


        :return: The minimum_password_length of this Client.  # noqa: E501
        :rtype: int
        """
        return self._minimum_password_length

    @minimum_password_length.setter
    def minimum_password_length(self, minimum_password_length):
        """Sets the minimum_password_length of this Client.


        :param minimum_password_length: The minimum_password_length of this Client.  # noqa: E501
        :type: int
        """

        self._minimum_password_length = minimum_password_length

    @property
    def password_contains_capital_letters(self):
        """Gets the password_contains_capital_letters of this Client.  # noqa: E501


        :return: The password_contains_capital_letters of this Client.  # noqa: E501
        :rtype: bool
        """
        return self._password_contains_capital_letters

    @password_contains_capital_letters.setter
    def password_contains_capital_letters(self, password_contains_capital_letters):
        """Sets the password_contains_capital_letters of this Client.


        :param password_contains_capital_letters: The password_contains_capital_letters of this Client.  # noqa: E501
        :type: bool
        """

        self._password_contains_capital_letters = password_contains_capital_letters

    @property
    def password_contains_lowercase_letters(self):
        """Gets the password_contains_lowercase_letters of this Client.  # noqa: E501


        :return: The password_contains_lowercase_letters of this Client.  # noqa: E501
        :rtype: bool
        """
        return self._password_contains_lowercase_letters

    @password_contains_lowercase_letters.setter
    def password_contains_lowercase_letters(self, password_contains_lowercase_letters):
        """Sets the password_contains_lowercase_letters of this Client.


        :param password_contains_lowercase_letters: The password_contains_lowercase_letters of this Client.  # noqa: E501
        :type: bool
        """

        self._password_contains_lowercase_letters = password_contains_lowercase_letters

    @property
    def password_contains_numeric_chars(self):
        """Gets the password_contains_numeric_chars of this Client.  # noqa: E501


        :return: The password_contains_numeric_chars of this Client.  # noqa: E501
        :rtype: bool
        """
        return self._password_contains_numeric_chars

    @password_contains_numeric_chars.setter
    def password_contains_numeric_chars(self, password_contains_numeric_chars):
        """Sets the password_contains_numeric_chars of this Client.


        :param password_contains_numeric_chars: The password_contains_numeric_chars of this Client.  # noqa: E501
        :type: bool
        """

        self._password_contains_numeric_chars = password_contains_numeric_chars

    @property
    def password_contains_special_chars(self):
        """Gets the password_contains_special_chars of this Client.  # noqa: E501


        :return: The password_contains_special_chars of this Client.  # noqa: E501
        :rtype: bool
        """
        return self._password_contains_special_chars

    @password_contains_special_chars.setter
    def password_contains_special_chars(self, password_contains_special_chars):
        """Sets the password_contains_special_chars of this Client.


        :param password_contains_special_chars: The password_contains_special_chars of this Client.  # noqa: E501
        :type: bool
        """

        self._password_contains_special_chars = password_contains_special_chars

    @property
    def search_status(self):
        """Gets the search_status of this Client.  # noqa: E501


        :return: The search_status of this Client.  # noqa: E501
        :rtype: str
        """
        return self._search_status

    @search_status.setter
    def search_status(self, search_status):
        """Sets the search_status of this Client.


        :param search_status: The search_status of this Client.  # noqa: E501
        :type: str
        """
        allowed_values = ["ELASTICSEARCH", "REINDEXING", "ELASTICSEARCH_MIGRATED"]  # noqa: E501
        if (self._configuration.client_side_validation and
                search_status not in allowed_values):
            raise ValueError(
                "Invalid value for `search_status` ({0}), must be one of {1}"  # noqa: E501
                .format(search_status, allowed_values)
            )

        self._search_status = search_status

    @property
    def search_migration_duration(self):
        """Gets the search_migration_duration of this Client.  # noqa: E501


        :return: The search_migration_duration of this Client.  # noqa: E501
        :rtype: int
        """
        return self._search_migration_duration

    @search_migration_duration.setter
    def search_migration_duration(self, search_migration_duration):
        """Sets the search_migration_duration of this Client.


        :param search_migration_duration: The search_migration_duration of this Client.  # noqa: E501
        :type: int
        """

        self._search_migration_duration = search_migration_duration

    @property
    def tracking_requirement_testcase_version_link(self):
        """Gets the tracking_requirement_testcase_version_link of this Client.  # noqa: E501


        :return: The tracking_requirement_testcase_version_link of this Client.  # noqa: E501
        :rtype: bool
        """
        return self._tracking_requirement_testcase_version_link

    @tracking_requirement_testcase_version_link.setter
    def tracking_requirement_testcase_version_link(self, tracking_requirement_testcase_version_link):
        """Sets the tracking_requirement_testcase_version_link of this Client.


        :param tracking_requirement_testcase_version_link: The tracking_requirement_testcase_version_link of this Client.  # noqa: E501
        :type: bool
        """

        self._tracking_requirement_testcase_version_link = tracking_requirement_testcase_version_link

    @property
    def for_on_premise(self):
        """Gets the for_on_premise of this Client.  # noqa: E501


        :return: The for_on_premise of this Client.  # noqa: E501
        :rtype: bool
        """
        return self._for_on_premise

    @for_on_premise.setter
    def for_on_premise(self, for_on_premise):
        """Sets the for_on_premise of this Client.


        :param for_on_premise: The for_on_premise of this Client.  # noqa: E501
        :type: bool
        """

        self._for_on_premise = for_on_premise

    @property
    def for_explorer(self):
        """Gets the for_explorer of this Client.  # noqa: E501


        :return: The for_explorer of this Client.  # noqa: E501
        :rtype: bool
        """
        return self._for_explorer

    @for_explorer.setter
    def for_explorer(self, for_explorer):
        """Sets the for_explorer of this Client.


        :param for_explorer: The for_explorer of this Client.  # noqa: E501
        :type: bool
        """

        self._for_explorer = for_explorer

    @property
    def tdstenant_id(self):
        """Gets the tdstenant_id of this Client.  # noqa: E501


        :return: The tdstenant_id of this Client.  # noqa: E501
        :rtype: str
        """
        return self._tdstenant_id

    @tdstenant_id.setter
    def tdstenant_id(self, tdstenant_id):
        """Sets the tdstenant_id of this Client.


        :param tdstenant_id: The tdstenant_id of this Client.  # noqa: E501
        :type: str
        """

        self._tdstenant_id = tdstenant_id

    @property
    def inactive(self):
        """Gets the inactive of this Client.  # noqa: E501


        :return: The inactive of this Client.  # noqa: E501
        :rtype: bool
        """
        return self._inactive

    @inactive.setter
    def inactive(self, inactive):
        """Sets the inactive of this Client.


        :param inactive: The inactive of this Client.  # noqa: E501
        :type: bool
        """

        self._inactive = inactive

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Client, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Client):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Client):
            return True

        return self.to_dict() != other.to_dict()
