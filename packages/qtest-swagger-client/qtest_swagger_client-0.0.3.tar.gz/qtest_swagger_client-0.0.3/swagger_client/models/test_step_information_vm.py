# coding: utf-8

"""
    qTest Manager API Version 11.0.0 - 2023.6

    qTest Manager API Version 11.0.0 - 2023.6  # noqa: E501

    OpenAPI spec version: 11.0.0 - 2023.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class TestStepInformationVM(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description_info': 'ParameterizationText',
        'expected_result': 'str',
        'actual_result': 'str',
        'expected_result_info': 'ParameterizationText',
        'custom_field_info': 'list[CustomFieldInfo]'
    }

    attribute_map = {
        'description_info': 'descriptionInfo',
        'expected_result': 'expectedResult',
        'actual_result': 'actualResult',
        'expected_result_info': 'expectedResultInfo',
        'custom_field_info': 'customFieldInfo'
    }

    def __init__(self, description_info=None, expected_result=None, actual_result=None, expected_result_info=None, custom_field_info=None, _configuration=None):  # noqa: E501
        """TestStepInformationVM - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._description_info = None
        self._expected_result = None
        self._actual_result = None
        self._expected_result_info = None
        self._custom_field_info = None
        self.discriminator = None

        if description_info is not None:
            self.description_info = description_info
        if expected_result is not None:
            self.expected_result = expected_result
        if actual_result is not None:
            self.actual_result = actual_result
        if expected_result_info is not None:
            self.expected_result_info = expected_result_info
        if custom_field_info is not None:
            self.custom_field_info = custom_field_info

    @property
    def description_info(self):
        """Gets the description_info of this TestStepInformationVM.  # noqa: E501


        :return: The description_info of this TestStepInformationVM.  # noqa: E501
        :rtype: ParameterizationText
        """
        return self._description_info

    @description_info.setter
    def description_info(self, description_info):
        """Sets the description_info of this TestStepInformationVM.


        :param description_info: The description_info of this TestStepInformationVM.  # noqa: E501
        :type: ParameterizationText
        """

        self._description_info = description_info

    @property
    def expected_result(self):
        """Gets the expected_result of this TestStepInformationVM.  # noqa: E501


        :return: The expected_result of this TestStepInformationVM.  # noqa: E501
        :rtype: str
        """
        return self._expected_result

    @expected_result.setter
    def expected_result(self, expected_result):
        """Sets the expected_result of this TestStepInformationVM.


        :param expected_result: The expected_result of this TestStepInformationVM.  # noqa: E501
        :type: str
        """

        self._expected_result = expected_result

    @property
    def actual_result(self):
        """Gets the actual_result of this TestStepInformationVM.  # noqa: E501


        :return: The actual_result of this TestStepInformationVM.  # noqa: E501
        :rtype: str
        """
        return self._actual_result

    @actual_result.setter
    def actual_result(self, actual_result):
        """Sets the actual_result of this TestStepInformationVM.


        :param actual_result: The actual_result of this TestStepInformationVM.  # noqa: E501
        :type: str
        """

        self._actual_result = actual_result

    @property
    def expected_result_info(self):
        """Gets the expected_result_info of this TestStepInformationVM.  # noqa: E501


        :return: The expected_result_info of this TestStepInformationVM.  # noqa: E501
        :rtype: ParameterizationText
        """
        return self._expected_result_info

    @expected_result_info.setter
    def expected_result_info(self, expected_result_info):
        """Sets the expected_result_info of this TestStepInformationVM.


        :param expected_result_info: The expected_result_info of this TestStepInformationVM.  # noqa: E501
        :type: ParameterizationText
        """

        self._expected_result_info = expected_result_info

    @property
    def custom_field_info(self):
        """Gets the custom_field_info of this TestStepInformationVM.  # noqa: E501


        :return: The custom_field_info of this TestStepInformationVM.  # noqa: E501
        :rtype: list[CustomFieldInfo]
        """
        return self._custom_field_info

    @custom_field_info.setter
    def custom_field_info(self, custom_field_info):
        """Sets the custom_field_info of this TestStepInformationVM.


        :param custom_field_info: The custom_field_info of this TestStepInformationVM.  # noqa: E501
        :type: list[CustomFieldInfo]
        """

        self._custom_field_info = custom_field_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TestStepInformationVM, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TestStepInformationVM):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TestStepInformationVM):
            return True

        return self.to_dict() != other.to_dict()
