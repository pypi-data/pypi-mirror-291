# coding: utf-8

"""
    qTest Manager API Version 11.0.0 - 2023.6

    qTest Manager API Version 11.0.0 - 2023.6  # noqa: E501

    OpenAPI spec version: 11.0.0 - 2023.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class UserGroupResource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'description': 'str',
        'total_user': 'int',
        'is_system': 'bool',
        'is_default': 'bool',
        'authorities': 'list[AuthorityVM]',
        'users': 'list[UserInfoVM]',
        'user_ids': 'list[int]',
        'authority_names': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'total_user': 'total_user',
        'is_system': 'is_system',
        'is_default': 'is_default',
        'authorities': 'authorities',
        'users': 'users',
        'user_ids': 'user_ids',
        'authority_names': 'authority_names'
    }

    def __init__(self, id=None, name=None, description=None, total_user=None, is_system=False, is_default=False, authorities=None, users=None, user_ids=None, authority_names=None, _configuration=None):  # noqa: E501
        """UserGroupResource - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._description = None
        self._total_user = None
        self._is_system = None
        self._is_default = None
        self._authorities = None
        self._users = None
        self._user_ids = None
        self._authority_names = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if total_user is not None:
            self.total_user = total_user
        if is_system is not None:
            self.is_system = is_system
        if is_default is not None:
            self.is_default = is_default
        if authorities is not None:
            self.authorities = authorities
        if users is not None:
            self.users = users
        if user_ids is not None:
            self.user_ids = user_ids
        if authority_names is not None:
            self.authority_names = authority_names

    @property
    def id(self):
        """Gets the id of this UserGroupResource.  # noqa: E501


        :return: The id of this UserGroupResource.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserGroupResource.


        :param id: The id of this UserGroupResource.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this UserGroupResource.  # noqa: E501

        Name of UserGroup  # noqa: E501

        :return: The name of this UserGroupResource.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UserGroupResource.

        Name of UserGroup  # noqa: E501

        :param name: The name of this UserGroupResource.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this UserGroupResource.  # noqa: E501

        Description of UserGroup  # noqa: E501

        :return: The description of this UserGroupResource.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UserGroupResource.

        Description of UserGroup  # noqa: E501

        :param description: The description of this UserGroupResource.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def total_user(self):
        """Gets the total_user of this UserGroupResource.  # noqa: E501

        The total user of UserGroup  # noqa: E501

        :return: The total_user of this UserGroupResource.  # noqa: E501
        :rtype: int
        """
        return self._total_user

    @total_user.setter
    def total_user(self, total_user):
        """Sets the total_user of this UserGroupResource.

        The total user of UserGroup  # noqa: E501

        :param total_user: The total_user of this UserGroupResource.  # noqa: E501
        :type: int
        """

        self._total_user = total_user

    @property
    def is_system(self):
        """Gets the is_system of this UserGroupResource.  # noqa: E501


        :return: The is_system of this UserGroupResource.  # noqa: E501
        :rtype: bool
        """
        return self._is_system

    @is_system.setter
    def is_system(self, is_system):
        """Sets the is_system of this UserGroupResource.


        :param is_system: The is_system of this UserGroupResource.  # noqa: E501
        :type: bool
        """

        self._is_system = is_system

    @property
    def is_default(self):
        """Gets the is_default of this UserGroupResource.  # noqa: E501

        Set this UserGroup as default group for new user  # noqa: E501

        :return: The is_default of this UserGroupResource.  # noqa: E501
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this UserGroupResource.

        Set this UserGroup as default group for new user  # noqa: E501

        :param is_default: The is_default of this UserGroupResource.  # noqa: E501
        :type: bool
        """

        self._is_default = is_default

    @property
    def authorities(self):
        """Gets the authorities of this UserGroupResource.  # noqa: E501


        :return: The authorities of this UserGroupResource.  # noqa: E501
        :rtype: list[AuthorityVM]
        """
        return self._authorities

    @authorities.setter
    def authorities(self, authorities):
        """Sets the authorities of this UserGroupResource.


        :param authorities: The authorities of this UserGroupResource.  # noqa: E501
        :type: list[AuthorityVM]
        """

        self._authorities = authorities

    @property
    def users(self):
        """Gets the users of this UserGroupResource.  # noqa: E501


        :return: The users of this UserGroupResource.  # noqa: E501
        :rtype: list[UserInfoVM]
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this UserGroupResource.


        :param users: The users of this UserGroupResource.  # noqa: E501
        :type: list[UserInfoVM]
        """

        self._users = users

    @property
    def user_ids(self):
        """Gets the user_ids of this UserGroupResource.  # noqa: E501

        List of userId will be assign to this group after created  # noqa: E501

        :return: The user_ids of this UserGroupResource.  # noqa: E501
        :rtype: list[int]
        """
        return self._user_ids

    @user_ids.setter
    def user_ids(self, user_ids):
        """Sets the user_ids of this UserGroupResource.

        List of userId will be assign to this group after created  # noqa: E501

        :param user_ids: The user_ids of this UserGroupResource.  # noqa: E501
        :type: list[int]
        """

        self._user_ids = user_ids

    @property
    def authority_names(self):
        """Gets the authority_names of this UserGroupResource.  # noqa: E501

        List of authorities for this UserGroup. Values can be: [ ROLE_ADMINCONFIGURATION, ROLE_ADMININFORMATION, ROLE_INSIGHTSEDITOR, ROLE_INSIGHTSEDITOR, ROLE_LAUNCHACCESS, ROLE_PROFILEADMIN, ROLE_PROFILEVIEWER, ROLE_PROJECTARCHIVER, ROLE_PROJECTCREATOR, ROLE_PROJECTUPDATER, ROLE_PROJECTVIEWER, ROLE_PULSEACCESS, ROLE_SITELEVELFIELD, ROLE_USERADMIN, ROLE_USERGROUPMANAGER, ROLE_ANALYTICSVIEWER ]  # noqa: E501

        :return: The authority_names of this UserGroupResource.  # noqa: E501
        :rtype: list[str]
        """
        return self._authority_names

    @authority_names.setter
    def authority_names(self, authority_names):
        """Sets the authority_names of this UserGroupResource.

        List of authorities for this UserGroup. Values can be: [ ROLE_ADMINCONFIGURATION, ROLE_ADMININFORMATION, ROLE_INSIGHTSEDITOR, ROLE_INSIGHTSEDITOR, ROLE_LAUNCHACCESS, ROLE_PROFILEADMIN, ROLE_PROFILEVIEWER, ROLE_PROJECTARCHIVER, ROLE_PROJECTCREATOR, ROLE_PROJECTUPDATER, ROLE_PROJECTVIEWER, ROLE_PULSEACCESS, ROLE_SITELEVELFIELD, ROLE_USERADMIN, ROLE_USERGROUPMANAGER, ROLE_ANALYTICSVIEWER ]  # noqa: E501

        :param authority_names: The authority_names of this UserGroupResource.  # noqa: E501
        :type: list[str]
        """

        self._authority_names = authority_names

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserGroupResource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserGroupResource):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserGroupResource):
            return True

        return self.to_dict() != other.to_dict()
