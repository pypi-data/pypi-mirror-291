# coding: utf-8

"""
    qTest Manager API Version 11.0.0 - 2023.6

    qTest Manager API Version 11.0.0 - 2023.6  # noqa: E501

    OpenAPI spec version: 11.0.0 - 2023.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class WebhookRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'url': 'str',
        'events': 'list[str]',
        'secret_key': 'str',
        'response_type': 'str',
        'project_ids': 'list[int]'
    }

    attribute_map = {
        'name': 'name',
        'url': 'url',
        'events': 'events',
        'secret_key': 'secretKey',
        'response_type': 'responseType',
        'project_ids': 'projectIds'
    }

    def __init__(self, name=None, url=None, events=None, secret_key=None, response_type=None, project_ids=None, _configuration=None):  # noqa: E501
        """WebhookRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._url = None
        self._events = None
        self._secret_key = None
        self._response_type = None
        self._project_ids = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if url is not None:
            self.url = url
        if events is not None:
            self.events = events
        if secret_key is not None:
            self.secret_key = secret_key
        if response_type is not None:
            self.response_type = response_type
        if project_ids is not None:
            self.project_ids = project_ids

    @property
    def name(self):
        """Gets the name of this WebhookRequest.  # noqa: E501


        :return: The name of this WebhookRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WebhookRequest.


        :param name: The name of this WebhookRequest.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def url(self):
        """Gets the url of this WebhookRequest.  # noqa: E501


        :return: The url of this WebhookRequest.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this WebhookRequest.


        :param url: The url of this WebhookRequest.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def events(self):
        """Gets the events of this WebhookRequest.  # noqa: E501


        :return: The events of this WebhookRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this WebhookRequest.


        :param events: The events of this WebhookRequest.  # noqa: E501
        :type: list[str]
        """

        self._events = events

    @property
    def secret_key(self):
        """Gets the secret_key of this WebhookRequest.  # noqa: E501


        :return: The secret_key of this WebhookRequest.  # noqa: E501
        :rtype: str
        """
        return self._secret_key

    @secret_key.setter
    def secret_key(self, secret_key):
        """Sets the secret_key of this WebhookRequest.


        :param secret_key: The secret_key of this WebhookRequest.  # noqa: E501
        :type: str
        """

        self._secret_key = secret_key

    @property
    def response_type(self):
        """Gets the response_type of this WebhookRequest.  # noqa: E501


        :return: The response_type of this WebhookRequest.  # noqa: E501
        :rtype: str
        """
        return self._response_type

    @response_type.setter
    def response_type(self, response_type):
        """Sets the response_type of this WebhookRequest.


        :param response_type: The response_type of this WebhookRequest.  # noqa: E501
        :type: str
        """

        self._response_type = response_type

    @property
    def project_ids(self):
        """Gets the project_ids of this WebhookRequest.  # noqa: E501


        :return: The project_ids of this WebhookRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._project_ids

    @project_ids.setter
    def project_ids(self, project_ids):
        """Sets the project_ids of this WebhookRequest.


        :param project_ids: The project_ids of this WebhookRequest.  # noqa: E501
        :type: list[int]
        """

        self._project_ids = project_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WebhookRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WebhookRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WebhookRequest):
            return True

        return self.to_dict() != other.to_dict()
