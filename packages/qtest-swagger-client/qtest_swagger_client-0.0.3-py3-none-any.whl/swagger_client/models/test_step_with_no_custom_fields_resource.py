# coding: utf-8

"""
    qTest Manager API Version 11.0.0 - 2023.6

    qTest Manager API Version 11.0.0 - 2023.6  # noqa: E501

    OpenAPI spec version: 11.0.0 - 2023.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class TestStepWithNoCustomFieldsResource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'links': 'list[Link]',
        'id': 'int',
        'description': 'str',
        'expected': 'str',
        'order': 'int',
        'attachments': 'list[object]',
        'group': 'int',
        'plain_value_text': 'str'
    }

    attribute_map = {
        'links': 'links',
        'id': 'id',
        'description': 'description',
        'expected': 'expected',
        'order': 'order',
        'attachments': 'attachments',
        'group': 'group',
        'plain_value_text': 'plain_value_text'
    }

    def __init__(self, links=None, id=None, description=None, expected=None, order=None, attachments=None, group=None, plain_value_text=None, _configuration=None):  # noqa: E501
        """TestStepWithNoCustomFieldsResource - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._links = None
        self._id = None
        self._description = None
        self._expected = None
        self._order = None
        self._attachments = None
        self._group = None
        self._plain_value_text = None
        self.discriminator = None

        if links is not None:
            self.links = links
        if id is not None:
            self.id = id
        self.description = description
        self.expected = expected
        if order is not None:
            self.order = order
        if attachments is not None:
            self.attachments = attachments
        if group is not None:
            self.group = group
        if plain_value_text is not None:
            self.plain_value_text = plain_value_text

    @property
    def links(self):
        """Gets the links of this TestStepWithNoCustomFieldsResource.  # noqa: E501


        :return: The links of this TestStepWithNoCustomFieldsResource.  # noqa: E501
        :rtype: list[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this TestStepWithNoCustomFieldsResource.


        :param links: The links of this TestStepWithNoCustomFieldsResource.  # noqa: E501
        :type: list[Link]
        """

        self._links = links

    @property
    def id(self):
        """Gets the id of this TestStepWithNoCustomFieldsResource.  # noqa: E501


        :return: The id of this TestStepWithNoCustomFieldsResource.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TestStepWithNoCustomFieldsResource.


        :param id: The id of this TestStepWithNoCustomFieldsResource.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def description(self):
        """Gets the description of this TestStepWithNoCustomFieldsResource.  # noqa: E501


        :return: The description of this TestStepWithNoCustomFieldsResource.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TestStepWithNoCustomFieldsResource.


        :param description: The description of this TestStepWithNoCustomFieldsResource.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def expected(self):
        """Gets the expected of this TestStepWithNoCustomFieldsResource.  # noqa: E501


        :return: The expected of this TestStepWithNoCustomFieldsResource.  # noqa: E501
        :rtype: str
        """
        return self._expected

    @expected.setter
    def expected(self, expected):
        """Sets the expected of this TestStepWithNoCustomFieldsResource.


        :param expected: The expected of this TestStepWithNoCustomFieldsResource.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and expected is None:
            raise ValueError("Invalid value for `expected`, must not be `None`")  # noqa: E501

        self._expected = expected

    @property
    def order(self):
        """Gets the order of this TestStepWithNoCustomFieldsResource.  # noqa: E501


        :return: The order of this TestStepWithNoCustomFieldsResource.  # noqa: E501
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this TestStepWithNoCustomFieldsResource.


        :param order: The order of this TestStepWithNoCustomFieldsResource.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                order is not None and order < 1):  # noqa: E501
            raise ValueError("Invalid value for `order`, must be a value greater than or equal to `1`")  # noqa: E501

        self._order = order

    @property
    def attachments(self):
        """Gets the attachments of this TestStepWithNoCustomFieldsResource.  # noqa: E501


        :return: The attachments of this TestStepWithNoCustomFieldsResource.  # noqa: E501
        :rtype: list[object]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this TestStepWithNoCustomFieldsResource.


        :param attachments: The attachments of this TestStepWithNoCustomFieldsResource.  # noqa: E501
        :type: list[object]
        """

        self._attachments = attachments

    @property
    def group(self):
        """Gets the group of this TestStepWithNoCustomFieldsResource.  # noqa: E501


        :return: The group of this TestStepWithNoCustomFieldsResource.  # noqa: E501
        :rtype: int
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this TestStepWithNoCustomFieldsResource.


        :param group: The group of this TestStepWithNoCustomFieldsResource.  # noqa: E501
        :type: int
        """

        self._group = group

    @property
    def plain_value_text(self):
        """Gets the plain_value_text of this TestStepWithNoCustomFieldsResource.  # noqa: E501


        :return: The plain_value_text of this TestStepWithNoCustomFieldsResource.  # noqa: E501
        :rtype: str
        """
        return self._plain_value_text

    @plain_value_text.setter
    def plain_value_text(self, plain_value_text):
        """Sets the plain_value_text of this TestStepWithNoCustomFieldsResource.


        :param plain_value_text: The plain_value_text of this TestStepWithNoCustomFieldsResource.  # noqa: E501
        :type: str
        """

        self._plain_value_text = plain_value_text

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TestStepWithNoCustomFieldsResource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TestStepWithNoCustomFieldsResource):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TestStepWithNoCustomFieldsResource):
            return True

        return self.to_dict() != other.to_dict()
