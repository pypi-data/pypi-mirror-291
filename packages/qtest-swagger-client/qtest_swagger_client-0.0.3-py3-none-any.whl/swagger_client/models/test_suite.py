# coding: utf-8

"""
    qTest Manager API Version 11.0.0 - 2023.6

    qTest Manager API Version 11.0.0 - 2023.6  # noqa: E501

    OpenAPI spec version: 11.0.0 - 2023.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class TestSuite(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'creator_id': 'int',
        'created_date': 'datetime',
        'last_modified_user_id': 'int',
        'last_modified_date': 'datetime',
        'display_name': 'str',
        'display_description': 'str',
        'id': 'int',
        'pid': 'int',
        'client_id': 'int',
        'project_id': 'int',
        'obj_order': 'int',
        'name': 'str',
        'test_data_set_id': 'int',
        'user_id': 'int',
        'test_bed_id': 'int',
        'project_test_type_id': 'int',
        'planned_start_date': 'datetime',
        'planned_end_date': 'datetime',
        'description': 'str',
        'release_id': 'int',
        'build_id': 'int',
        'test_cycle_id': 'int',
        'test_cycle': 'TestCycle',
        'deleted': 'bool',
        'type_name': 'str',
        'result_type': 'str',
        'object_type': 'int',
        'full_id': 'str',
        'parent_artifact_id': 'int',
        'parent_object_type': 'int',
        'result_name': 'str',
        'pid_with_prefix': 'str',
        'result_description': 'str',
        'short_result_type': 'str',
        'artifact_type': 'int',
        'status_id': 'int',
        'custom_field_value': 'str',
        'automation': 'bool',
        'long_id': 'int',
        'tosca': 'bool',
        'auto_test_case': 'bool',
        'approved': 'bool',
        'create_date_time_string': 'str'
    }

    attribute_map = {
        'creator_id': 'creatorId',
        'created_date': 'createdDate',
        'last_modified_user_id': 'lastModifiedUserId',
        'last_modified_date': 'lastModifiedDate',
        'display_name': 'displayName',
        'display_description': 'displayDescription',
        'id': 'id',
        'pid': 'pid',
        'client_id': 'clientId',
        'project_id': 'projectId',
        'obj_order': 'objOrder',
        'name': 'name',
        'test_data_set_id': 'testDataSetId',
        'user_id': 'userId',
        'test_bed_id': 'testBedId',
        'project_test_type_id': 'projectTestTypeId',
        'planned_start_date': 'plannedStartDate',
        'planned_end_date': 'plannedEndDate',
        'description': 'description',
        'release_id': 'releaseId',
        'build_id': 'buildId',
        'test_cycle_id': 'testCycleId',
        'test_cycle': 'testCycle',
        'deleted': 'deleted',
        'type_name': 'typeName',
        'result_type': 'resultType',
        'object_type': 'objectType',
        'full_id': 'fullId',
        'parent_artifact_id': 'parentArtifactId',
        'parent_object_type': 'parentObjectType',
        'result_name': 'resultName',
        'pid_with_prefix': 'pidWithPrefix',
        'result_description': 'resultDescription',
        'short_result_type': 'shortResultType',
        'artifact_type': 'artifactType',
        'status_id': 'statusId',
        'custom_field_value': 'customFieldValue',
        'automation': 'automation',
        'long_id': 'longId',
        'tosca': 'tosca',
        'auto_test_case': 'autoTestCase',
        'approved': 'approved',
        'create_date_time_string': 'createDateTimeString'
    }

    def __init__(self, creator_id=None, created_date=None, last_modified_user_id=None, last_modified_date=None, display_name=None, display_description=None, id=None, pid=None, client_id=None, project_id=None, obj_order=None, name=None, test_data_set_id=None, user_id=None, test_bed_id=None, project_test_type_id=None, planned_start_date=None, planned_end_date=None, description=None, release_id=None, build_id=None, test_cycle_id=None, test_cycle=None, deleted=False, type_name=None, result_type=None, object_type=None, full_id=None, parent_artifact_id=None, parent_object_type=None, result_name=None, pid_with_prefix=None, result_description=None, short_result_type=None, artifact_type=None, status_id=None, custom_field_value=None, automation=False, long_id=None, tosca=False, auto_test_case=False, approved=False, create_date_time_string=None, _configuration=None):  # noqa: E501
        """TestSuite - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._creator_id = None
        self._created_date = None
        self._last_modified_user_id = None
        self._last_modified_date = None
        self._display_name = None
        self._display_description = None
        self._id = None
        self._pid = None
        self._client_id = None
        self._project_id = None
        self._obj_order = None
        self._name = None
        self._test_data_set_id = None
        self._user_id = None
        self._test_bed_id = None
        self._project_test_type_id = None
        self._planned_start_date = None
        self._planned_end_date = None
        self._description = None
        self._release_id = None
        self._build_id = None
        self._test_cycle_id = None
        self._test_cycle = None
        self._deleted = None
        self._type_name = None
        self._result_type = None
        self._object_type = None
        self._full_id = None
        self._parent_artifact_id = None
        self._parent_object_type = None
        self._result_name = None
        self._pid_with_prefix = None
        self._result_description = None
        self._short_result_type = None
        self._artifact_type = None
        self._status_id = None
        self._custom_field_value = None
        self._automation = None
        self._long_id = None
        self._tosca = None
        self._auto_test_case = None
        self._approved = None
        self._create_date_time_string = None
        self.discriminator = None

        if creator_id is not None:
            self.creator_id = creator_id
        if created_date is not None:
            self.created_date = created_date
        if last_modified_user_id is not None:
            self.last_modified_user_id = last_modified_user_id
        if last_modified_date is not None:
            self.last_modified_date = last_modified_date
        if display_name is not None:
            self.display_name = display_name
        if display_description is not None:
            self.display_description = display_description
        if id is not None:
            self.id = id
        if pid is not None:
            self.pid = pid
        if client_id is not None:
            self.client_id = client_id
        if project_id is not None:
            self.project_id = project_id
        if obj_order is not None:
            self.obj_order = obj_order
        if name is not None:
            self.name = name
        if test_data_set_id is not None:
            self.test_data_set_id = test_data_set_id
        if user_id is not None:
            self.user_id = user_id
        if test_bed_id is not None:
            self.test_bed_id = test_bed_id
        if project_test_type_id is not None:
            self.project_test_type_id = project_test_type_id
        if planned_start_date is not None:
            self.planned_start_date = planned_start_date
        if planned_end_date is not None:
            self.planned_end_date = planned_end_date
        if description is not None:
            self.description = description
        if release_id is not None:
            self.release_id = release_id
        if build_id is not None:
            self.build_id = build_id
        if test_cycle_id is not None:
            self.test_cycle_id = test_cycle_id
        if test_cycle is not None:
            self.test_cycle = test_cycle
        if deleted is not None:
            self.deleted = deleted
        if type_name is not None:
            self.type_name = type_name
        if result_type is not None:
            self.result_type = result_type
        if object_type is not None:
            self.object_type = object_type
        if full_id is not None:
            self.full_id = full_id
        if parent_artifact_id is not None:
            self.parent_artifact_id = parent_artifact_id
        if parent_object_type is not None:
            self.parent_object_type = parent_object_type
        if result_name is not None:
            self.result_name = result_name
        if pid_with_prefix is not None:
            self.pid_with_prefix = pid_with_prefix
        if result_description is not None:
            self.result_description = result_description
        if short_result_type is not None:
            self.short_result_type = short_result_type
        if artifact_type is not None:
            self.artifact_type = artifact_type
        if status_id is not None:
            self.status_id = status_id
        if custom_field_value is not None:
            self.custom_field_value = custom_field_value
        if automation is not None:
            self.automation = automation
        if long_id is not None:
            self.long_id = long_id
        if tosca is not None:
            self.tosca = tosca
        if auto_test_case is not None:
            self.auto_test_case = auto_test_case
        if approved is not None:
            self.approved = approved
        if create_date_time_string is not None:
            self.create_date_time_string = create_date_time_string

    @property
    def creator_id(self):
        """Gets the creator_id of this TestSuite.  # noqa: E501


        :return: The creator_id of this TestSuite.  # noqa: E501
        :rtype: int
        """
        return self._creator_id

    @creator_id.setter
    def creator_id(self, creator_id):
        """Sets the creator_id of this TestSuite.


        :param creator_id: The creator_id of this TestSuite.  # noqa: E501
        :type: int
        """

        self._creator_id = creator_id

    @property
    def created_date(self):
        """Gets the created_date of this TestSuite.  # noqa: E501


        :return: The created_date of this TestSuite.  # noqa: E501
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this TestSuite.


        :param created_date: The created_date of this TestSuite.  # noqa: E501
        :type: datetime
        """

        self._created_date = created_date

    @property
    def last_modified_user_id(self):
        """Gets the last_modified_user_id of this TestSuite.  # noqa: E501


        :return: The last_modified_user_id of this TestSuite.  # noqa: E501
        :rtype: int
        """
        return self._last_modified_user_id

    @last_modified_user_id.setter
    def last_modified_user_id(self, last_modified_user_id):
        """Sets the last_modified_user_id of this TestSuite.


        :param last_modified_user_id: The last_modified_user_id of this TestSuite.  # noqa: E501
        :type: int
        """

        self._last_modified_user_id = last_modified_user_id

    @property
    def last_modified_date(self):
        """Gets the last_modified_date of this TestSuite.  # noqa: E501


        :return: The last_modified_date of this TestSuite.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified_date

    @last_modified_date.setter
    def last_modified_date(self, last_modified_date):
        """Sets the last_modified_date of this TestSuite.


        :param last_modified_date: The last_modified_date of this TestSuite.  # noqa: E501
        :type: datetime
        """

        self._last_modified_date = last_modified_date

    @property
    def display_name(self):
        """Gets the display_name of this TestSuite.  # noqa: E501


        :return: The display_name of this TestSuite.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this TestSuite.


        :param display_name: The display_name of this TestSuite.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def display_description(self):
        """Gets the display_description of this TestSuite.  # noqa: E501


        :return: The display_description of this TestSuite.  # noqa: E501
        :rtype: str
        """
        return self._display_description

    @display_description.setter
    def display_description(self, display_description):
        """Sets the display_description of this TestSuite.


        :param display_description: The display_description of this TestSuite.  # noqa: E501
        :type: str
        """

        self._display_description = display_description

    @property
    def id(self):
        """Gets the id of this TestSuite.  # noqa: E501


        :return: The id of this TestSuite.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TestSuite.


        :param id: The id of this TestSuite.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def pid(self):
        """Gets the pid of this TestSuite.  # noqa: E501


        :return: The pid of this TestSuite.  # noqa: E501
        :rtype: int
        """
        return self._pid

    @pid.setter
    def pid(self, pid):
        """Sets the pid of this TestSuite.


        :param pid: The pid of this TestSuite.  # noqa: E501
        :type: int
        """

        self._pid = pid

    @property
    def client_id(self):
        """Gets the client_id of this TestSuite.  # noqa: E501


        :return: The client_id of this TestSuite.  # noqa: E501
        :rtype: int
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this TestSuite.


        :param client_id: The client_id of this TestSuite.  # noqa: E501
        :type: int
        """

        self._client_id = client_id

    @property
    def project_id(self):
        """Gets the project_id of this TestSuite.  # noqa: E501


        :return: The project_id of this TestSuite.  # noqa: E501
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this TestSuite.


        :param project_id: The project_id of this TestSuite.  # noqa: E501
        :type: int
        """

        self._project_id = project_id

    @property
    def obj_order(self):
        """Gets the obj_order of this TestSuite.  # noqa: E501


        :return: The obj_order of this TestSuite.  # noqa: E501
        :rtype: int
        """
        return self._obj_order

    @obj_order.setter
    def obj_order(self, obj_order):
        """Sets the obj_order of this TestSuite.


        :param obj_order: The obj_order of this TestSuite.  # noqa: E501
        :type: int
        """

        self._obj_order = obj_order

    @property
    def name(self):
        """Gets the name of this TestSuite.  # noqa: E501


        :return: The name of this TestSuite.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TestSuite.


        :param name: The name of this TestSuite.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def test_data_set_id(self):
        """Gets the test_data_set_id of this TestSuite.  # noqa: E501


        :return: The test_data_set_id of this TestSuite.  # noqa: E501
        :rtype: int
        """
        return self._test_data_set_id

    @test_data_set_id.setter
    def test_data_set_id(self, test_data_set_id):
        """Sets the test_data_set_id of this TestSuite.


        :param test_data_set_id: The test_data_set_id of this TestSuite.  # noqa: E501
        :type: int
        """

        self._test_data_set_id = test_data_set_id

    @property
    def user_id(self):
        """Gets the user_id of this TestSuite.  # noqa: E501


        :return: The user_id of this TestSuite.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this TestSuite.


        :param user_id: The user_id of this TestSuite.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def test_bed_id(self):
        """Gets the test_bed_id of this TestSuite.  # noqa: E501


        :return: The test_bed_id of this TestSuite.  # noqa: E501
        :rtype: int
        """
        return self._test_bed_id

    @test_bed_id.setter
    def test_bed_id(self, test_bed_id):
        """Sets the test_bed_id of this TestSuite.


        :param test_bed_id: The test_bed_id of this TestSuite.  # noqa: E501
        :type: int
        """

        self._test_bed_id = test_bed_id

    @property
    def project_test_type_id(self):
        """Gets the project_test_type_id of this TestSuite.  # noqa: E501


        :return: The project_test_type_id of this TestSuite.  # noqa: E501
        :rtype: int
        """
        return self._project_test_type_id

    @project_test_type_id.setter
    def project_test_type_id(self, project_test_type_id):
        """Sets the project_test_type_id of this TestSuite.


        :param project_test_type_id: The project_test_type_id of this TestSuite.  # noqa: E501
        :type: int
        """

        self._project_test_type_id = project_test_type_id

    @property
    def planned_start_date(self):
        """Gets the planned_start_date of this TestSuite.  # noqa: E501


        :return: The planned_start_date of this TestSuite.  # noqa: E501
        :rtype: datetime
        """
        return self._planned_start_date

    @planned_start_date.setter
    def planned_start_date(self, planned_start_date):
        """Sets the planned_start_date of this TestSuite.


        :param planned_start_date: The planned_start_date of this TestSuite.  # noqa: E501
        :type: datetime
        """

        self._planned_start_date = planned_start_date

    @property
    def planned_end_date(self):
        """Gets the planned_end_date of this TestSuite.  # noqa: E501


        :return: The planned_end_date of this TestSuite.  # noqa: E501
        :rtype: datetime
        """
        return self._planned_end_date

    @planned_end_date.setter
    def planned_end_date(self, planned_end_date):
        """Sets the planned_end_date of this TestSuite.


        :param planned_end_date: The planned_end_date of this TestSuite.  # noqa: E501
        :type: datetime
        """

        self._planned_end_date = planned_end_date

    @property
    def description(self):
        """Gets the description of this TestSuite.  # noqa: E501


        :return: The description of this TestSuite.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TestSuite.


        :param description: The description of this TestSuite.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def release_id(self):
        """Gets the release_id of this TestSuite.  # noqa: E501


        :return: The release_id of this TestSuite.  # noqa: E501
        :rtype: int
        """
        return self._release_id

    @release_id.setter
    def release_id(self, release_id):
        """Sets the release_id of this TestSuite.


        :param release_id: The release_id of this TestSuite.  # noqa: E501
        :type: int
        """

        self._release_id = release_id

    @property
    def build_id(self):
        """Gets the build_id of this TestSuite.  # noqa: E501


        :return: The build_id of this TestSuite.  # noqa: E501
        :rtype: int
        """
        return self._build_id

    @build_id.setter
    def build_id(self, build_id):
        """Sets the build_id of this TestSuite.


        :param build_id: The build_id of this TestSuite.  # noqa: E501
        :type: int
        """

        self._build_id = build_id

    @property
    def test_cycle_id(self):
        """Gets the test_cycle_id of this TestSuite.  # noqa: E501


        :return: The test_cycle_id of this TestSuite.  # noqa: E501
        :rtype: int
        """
        return self._test_cycle_id

    @test_cycle_id.setter
    def test_cycle_id(self, test_cycle_id):
        """Sets the test_cycle_id of this TestSuite.


        :param test_cycle_id: The test_cycle_id of this TestSuite.  # noqa: E501
        :type: int
        """

        self._test_cycle_id = test_cycle_id

    @property
    def test_cycle(self):
        """Gets the test_cycle of this TestSuite.  # noqa: E501


        :return: The test_cycle of this TestSuite.  # noqa: E501
        :rtype: TestCycle
        """
        return self._test_cycle

    @test_cycle.setter
    def test_cycle(self, test_cycle):
        """Sets the test_cycle of this TestSuite.


        :param test_cycle: The test_cycle of this TestSuite.  # noqa: E501
        :type: TestCycle
        """

        self._test_cycle = test_cycle

    @property
    def deleted(self):
        """Gets the deleted of this TestSuite.  # noqa: E501


        :return: The deleted of this TestSuite.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this TestSuite.


        :param deleted: The deleted of this TestSuite.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def type_name(self):
        """Gets the type_name of this TestSuite.  # noqa: E501


        :return: The type_name of this TestSuite.  # noqa: E501
        :rtype: str
        """
        return self._type_name

    @type_name.setter
    def type_name(self, type_name):
        """Sets the type_name of this TestSuite.


        :param type_name: The type_name of this TestSuite.  # noqa: E501
        :type: str
        """

        self._type_name = type_name

    @property
    def result_type(self):
        """Gets the result_type of this TestSuite.  # noqa: E501


        :return: The result_type of this TestSuite.  # noqa: E501
        :rtype: str
        """
        return self._result_type

    @result_type.setter
    def result_type(self, result_type):
        """Sets the result_type of this TestSuite.


        :param result_type: The result_type of this TestSuite.  # noqa: E501
        :type: str
        """

        self._result_type = result_type

    @property
    def object_type(self):
        """Gets the object_type of this TestSuite.  # noqa: E501


        :return: The object_type of this TestSuite.  # noqa: E501
        :rtype: int
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """Sets the object_type of this TestSuite.


        :param object_type: The object_type of this TestSuite.  # noqa: E501
        :type: int
        """

        self._object_type = object_type

    @property
    def full_id(self):
        """Gets the full_id of this TestSuite.  # noqa: E501


        :return: The full_id of this TestSuite.  # noqa: E501
        :rtype: str
        """
        return self._full_id

    @full_id.setter
    def full_id(self, full_id):
        """Sets the full_id of this TestSuite.


        :param full_id: The full_id of this TestSuite.  # noqa: E501
        :type: str
        """

        self._full_id = full_id

    @property
    def parent_artifact_id(self):
        """Gets the parent_artifact_id of this TestSuite.  # noqa: E501


        :return: The parent_artifact_id of this TestSuite.  # noqa: E501
        :rtype: int
        """
        return self._parent_artifact_id

    @parent_artifact_id.setter
    def parent_artifact_id(self, parent_artifact_id):
        """Sets the parent_artifact_id of this TestSuite.


        :param parent_artifact_id: The parent_artifact_id of this TestSuite.  # noqa: E501
        :type: int
        """

        self._parent_artifact_id = parent_artifact_id

    @property
    def parent_object_type(self):
        """Gets the parent_object_type of this TestSuite.  # noqa: E501


        :return: The parent_object_type of this TestSuite.  # noqa: E501
        :rtype: int
        """
        return self._parent_object_type

    @parent_object_type.setter
    def parent_object_type(self, parent_object_type):
        """Sets the parent_object_type of this TestSuite.


        :param parent_object_type: The parent_object_type of this TestSuite.  # noqa: E501
        :type: int
        """

        self._parent_object_type = parent_object_type

    @property
    def result_name(self):
        """Gets the result_name of this TestSuite.  # noqa: E501


        :return: The result_name of this TestSuite.  # noqa: E501
        :rtype: str
        """
        return self._result_name

    @result_name.setter
    def result_name(self, result_name):
        """Sets the result_name of this TestSuite.


        :param result_name: The result_name of this TestSuite.  # noqa: E501
        :type: str
        """

        self._result_name = result_name

    @property
    def pid_with_prefix(self):
        """Gets the pid_with_prefix of this TestSuite.  # noqa: E501


        :return: The pid_with_prefix of this TestSuite.  # noqa: E501
        :rtype: str
        """
        return self._pid_with_prefix

    @pid_with_prefix.setter
    def pid_with_prefix(self, pid_with_prefix):
        """Sets the pid_with_prefix of this TestSuite.


        :param pid_with_prefix: The pid_with_prefix of this TestSuite.  # noqa: E501
        :type: str
        """

        self._pid_with_prefix = pid_with_prefix

    @property
    def result_description(self):
        """Gets the result_description of this TestSuite.  # noqa: E501


        :return: The result_description of this TestSuite.  # noqa: E501
        :rtype: str
        """
        return self._result_description

    @result_description.setter
    def result_description(self, result_description):
        """Sets the result_description of this TestSuite.


        :param result_description: The result_description of this TestSuite.  # noqa: E501
        :type: str
        """

        self._result_description = result_description

    @property
    def short_result_type(self):
        """Gets the short_result_type of this TestSuite.  # noqa: E501


        :return: The short_result_type of this TestSuite.  # noqa: E501
        :rtype: str
        """
        return self._short_result_type

    @short_result_type.setter
    def short_result_type(self, short_result_type):
        """Sets the short_result_type of this TestSuite.


        :param short_result_type: The short_result_type of this TestSuite.  # noqa: E501
        :type: str
        """

        self._short_result_type = short_result_type

    @property
    def artifact_type(self):
        """Gets the artifact_type of this TestSuite.  # noqa: E501


        :return: The artifact_type of this TestSuite.  # noqa: E501
        :rtype: int
        """
        return self._artifact_type

    @artifact_type.setter
    def artifact_type(self, artifact_type):
        """Sets the artifact_type of this TestSuite.


        :param artifact_type: The artifact_type of this TestSuite.  # noqa: E501
        :type: int
        """

        self._artifact_type = artifact_type

    @property
    def status_id(self):
        """Gets the status_id of this TestSuite.  # noqa: E501


        :return: The status_id of this TestSuite.  # noqa: E501
        :rtype: int
        """
        return self._status_id

    @status_id.setter
    def status_id(self, status_id):
        """Sets the status_id of this TestSuite.


        :param status_id: The status_id of this TestSuite.  # noqa: E501
        :type: int
        """

        self._status_id = status_id

    @property
    def custom_field_value(self):
        """Gets the custom_field_value of this TestSuite.  # noqa: E501


        :return: The custom_field_value of this TestSuite.  # noqa: E501
        :rtype: str
        """
        return self._custom_field_value

    @custom_field_value.setter
    def custom_field_value(self, custom_field_value):
        """Sets the custom_field_value of this TestSuite.


        :param custom_field_value: The custom_field_value of this TestSuite.  # noqa: E501
        :type: str
        """

        self._custom_field_value = custom_field_value

    @property
    def automation(self):
        """Gets the automation of this TestSuite.  # noqa: E501


        :return: The automation of this TestSuite.  # noqa: E501
        :rtype: bool
        """
        return self._automation

    @automation.setter
    def automation(self, automation):
        """Sets the automation of this TestSuite.


        :param automation: The automation of this TestSuite.  # noqa: E501
        :type: bool
        """

        self._automation = automation

    @property
    def long_id(self):
        """Gets the long_id of this TestSuite.  # noqa: E501


        :return: The long_id of this TestSuite.  # noqa: E501
        :rtype: int
        """
        return self._long_id

    @long_id.setter
    def long_id(self, long_id):
        """Sets the long_id of this TestSuite.


        :param long_id: The long_id of this TestSuite.  # noqa: E501
        :type: int
        """

        self._long_id = long_id

    @property
    def tosca(self):
        """Gets the tosca of this TestSuite.  # noqa: E501


        :return: The tosca of this TestSuite.  # noqa: E501
        :rtype: bool
        """
        return self._tosca

    @tosca.setter
    def tosca(self, tosca):
        """Sets the tosca of this TestSuite.


        :param tosca: The tosca of this TestSuite.  # noqa: E501
        :type: bool
        """

        self._tosca = tosca

    @property
    def auto_test_case(self):
        """Gets the auto_test_case of this TestSuite.  # noqa: E501


        :return: The auto_test_case of this TestSuite.  # noqa: E501
        :rtype: bool
        """
        return self._auto_test_case

    @auto_test_case.setter
    def auto_test_case(self, auto_test_case):
        """Sets the auto_test_case of this TestSuite.


        :param auto_test_case: The auto_test_case of this TestSuite.  # noqa: E501
        :type: bool
        """

        self._auto_test_case = auto_test_case

    @property
    def approved(self):
        """Gets the approved of this TestSuite.  # noqa: E501


        :return: The approved of this TestSuite.  # noqa: E501
        :rtype: bool
        """
        return self._approved

    @approved.setter
    def approved(self, approved):
        """Sets the approved of this TestSuite.


        :param approved: The approved of this TestSuite.  # noqa: E501
        :type: bool
        """

        self._approved = approved

    @property
    def create_date_time_string(self):
        """Gets the create_date_time_string of this TestSuite.  # noqa: E501


        :return: The create_date_time_string of this TestSuite.  # noqa: E501
        :rtype: str
        """
        return self._create_date_time_string

    @create_date_time_string.setter
    def create_date_time_string(self, create_date_time_string):
        """Sets the create_date_time_string of this TestSuite.


        :param create_date_time_string: The create_date_time_string of this TestSuite.  # noqa: E501
        :type: str
        """

        self._create_date_time_string = create_date_time_string

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TestSuite, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TestSuite):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TestSuite):
            return True

        return self.to_dict() != other.to_dict()
