# coding: utf-8

"""
    qTest Manager API Version 11.0.0 - 2023.6

    qTest Manager API Version 11.0.0 - 2023.6  # noqa: E501

    OpenAPI spec version: 11.0.0 - 2023.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ManualTestLogResource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'submitted_by': 'str',
        'links': 'list[Link]',
        'id': 'int',
        'test_case_version_id': 'int',
        'exe_start_date': 'datetime',
        'exe_end_date': 'datetime',
        'note': 'str',
        'attachments': 'list[AttachmentResource]',
        'name': 'str',
        'planned_exe_time': 'int',
        'actual_exe_time': 'int',
        'build_number': 'str',
        'build_url': 'str',
        'properties': 'list[PropertyResource]',
        'status': 'StatusResource',
        'result_number': 'int',
        'test_step_logs': 'list[TestStepLogResource]',
        'defects': 'list[LinkedDefectResource]'
    }

    attribute_map = {
        'submitted_by': 'submittedBy',
        'links': 'links',
        'id': 'id',
        'test_case_version_id': 'test_case_version_id',
        'exe_start_date': 'exe_start_date',
        'exe_end_date': 'exe_end_date',
        'note': 'note',
        'attachments': 'attachments',
        'name': 'name',
        'planned_exe_time': 'planned_exe_time',
        'actual_exe_time': 'actual_exe_time',
        'build_number': 'build_number',
        'build_url': 'build_url',
        'properties': 'properties',
        'status': 'status',
        'result_number': 'result_number',
        'test_step_logs': 'test_step_logs',
        'defects': 'defects'
    }

    def __init__(self, submitted_by=None, links=None, id=None, test_case_version_id=None, exe_start_date=None, exe_end_date=None, note=None, attachments=None, name=None, planned_exe_time=None, actual_exe_time=None, build_number=None, build_url=None, properties=None, status=None, result_number=None, test_step_logs=None, defects=None, _configuration=None):  # noqa: E501
        """ManualTestLogResource - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._submitted_by = None
        self._links = None
        self._id = None
        self._test_case_version_id = None
        self._exe_start_date = None
        self._exe_end_date = None
        self._note = None
        self._attachments = None
        self._name = None
        self._planned_exe_time = None
        self._actual_exe_time = None
        self._build_number = None
        self._build_url = None
        self._properties = None
        self._status = None
        self._result_number = None
        self._test_step_logs = None
        self._defects = None
        self.discriminator = None

        if submitted_by is not None:
            self.submitted_by = submitted_by
        if links is not None:
            self.links = links
        if id is not None:
            self.id = id
        if test_case_version_id is not None:
            self.test_case_version_id = test_case_version_id
        self.exe_start_date = exe_start_date
        self.exe_end_date = exe_end_date
        if note is not None:
            self.note = note
        if attachments is not None:
            self.attachments = attachments
        if name is not None:
            self.name = name
        if planned_exe_time is not None:
            self.planned_exe_time = planned_exe_time
        if actual_exe_time is not None:
            self.actual_exe_time = actual_exe_time
        if build_number is not None:
            self.build_number = build_number
        if build_url is not None:
            self.build_url = build_url
        if properties is not None:
            self.properties = properties
        self.status = status
        if result_number is not None:
            self.result_number = result_number
        if test_step_logs is not None:
            self.test_step_logs = test_step_logs
        if defects is not None:
            self.defects = defects

    @property
    def submitted_by(self):
        """Gets the submitted_by of this ManualTestLogResource.  # noqa: E501


        :return: The submitted_by of this ManualTestLogResource.  # noqa: E501
        :rtype: str
        """
        return self._submitted_by

    @submitted_by.setter
    def submitted_by(self, submitted_by):
        """Sets the submitted_by of this ManualTestLogResource.


        :param submitted_by: The submitted_by of this ManualTestLogResource.  # noqa: E501
        :type: str
        """

        self._submitted_by = submitted_by

    @property
    def links(self):
        """Gets the links of this ManualTestLogResource.  # noqa: E501


        :return: The links of this ManualTestLogResource.  # noqa: E501
        :rtype: list[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this ManualTestLogResource.


        :param links: The links of this ManualTestLogResource.  # noqa: E501
        :type: list[Link]
        """

        self._links = links

    @property
    def id(self):
        """Gets the id of this ManualTestLogResource.  # noqa: E501


        :return: The id of this ManualTestLogResource.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ManualTestLogResource.


        :param id: The id of this ManualTestLogResource.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def test_case_version_id(self):
        """Gets the test_case_version_id of this ManualTestLogResource.  # noqa: E501

        ID of the Test Case Version  # noqa: E501

        :return: The test_case_version_id of this ManualTestLogResource.  # noqa: E501
        :rtype: int
        """
        return self._test_case_version_id

    @test_case_version_id.setter
    def test_case_version_id(self, test_case_version_id):
        """Sets the test_case_version_id of this ManualTestLogResource.

        ID of the Test Case Version  # noqa: E501

        :param test_case_version_id: The test_case_version_id of this ManualTestLogResource.  # noqa: E501
        :type: int
        """

        self._test_case_version_id = test_case_version_id

    @property
    def exe_start_date(self):
        """Gets the exe_start_date of this ManualTestLogResource.  # noqa: E501

        Execution start date  # noqa: E501

        :return: The exe_start_date of this ManualTestLogResource.  # noqa: E501
        :rtype: datetime
        """
        return self._exe_start_date

    @exe_start_date.setter
    def exe_start_date(self, exe_start_date):
        """Sets the exe_start_date of this ManualTestLogResource.

        Execution start date  # noqa: E501

        :param exe_start_date: The exe_start_date of this ManualTestLogResource.  # noqa: E501
        :type: datetime
        """
        if self._configuration.client_side_validation and exe_start_date is None:
            raise ValueError("Invalid value for `exe_start_date`, must not be `None`")  # noqa: E501

        self._exe_start_date = exe_start_date

    @property
    def exe_end_date(self):
        """Gets the exe_end_date of this ManualTestLogResource.  # noqa: E501

        Execution end date  # noqa: E501

        :return: The exe_end_date of this ManualTestLogResource.  # noqa: E501
        :rtype: datetime
        """
        return self._exe_end_date

    @exe_end_date.setter
    def exe_end_date(self, exe_end_date):
        """Sets the exe_end_date of this ManualTestLogResource.

        Execution end date  # noqa: E501

        :param exe_end_date: The exe_end_date of this ManualTestLogResource.  # noqa: E501
        :type: datetime
        """
        if self._configuration.client_side_validation and exe_end_date is None:
            raise ValueError("Invalid value for `exe_end_date`, must not be `None`")  # noqa: E501

        self._exe_end_date = exe_end_date

    @property
    def note(self):
        """Gets the note of this ManualTestLogResource.  # noqa: E501

        Note  # noqa: E501

        :return: The note of this ManualTestLogResource.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this ManualTestLogResource.

        Note  # noqa: E501

        :param note: The note of this ManualTestLogResource.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def attachments(self):
        """Gets the attachments of this ManualTestLogResource.  # noqa: E501

        Test Log attachments  # noqa: E501

        :return: The attachments of this ManualTestLogResource.  # noqa: E501
        :rtype: list[AttachmentResource]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this ManualTestLogResource.

        Test Log attachments  # noqa: E501

        :param attachments: The attachments of this ManualTestLogResource.  # noqa: E501
        :type: list[AttachmentResource]
        """

        self._attachments = attachments

    @property
    def name(self):
        """Gets the name of this ManualTestLogResource.  # noqa: E501

        Test Run's name  # noqa: E501

        :return: The name of this ManualTestLogResource.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ManualTestLogResource.

        Test Run's name  # noqa: E501

        :param name: The name of this ManualTestLogResource.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def planned_exe_time(self):
        """Gets the planned_exe_time of this ManualTestLogResource.  # noqa: E501


        :return: The planned_exe_time of this ManualTestLogResource.  # noqa: E501
        :rtype: int
        """
        return self._planned_exe_time

    @planned_exe_time.setter
    def planned_exe_time(self, planned_exe_time):
        """Sets the planned_exe_time of this ManualTestLogResource.


        :param planned_exe_time: The planned_exe_time of this ManualTestLogResource.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                planned_exe_time is not None and planned_exe_time > 9999999):  # noqa: E501
            raise ValueError("Invalid value for `planned_exe_time`, must be a value less than or equal to `9999999`")  # noqa: E501
        if (self._configuration.client_side_validation and
                planned_exe_time is not None and planned_exe_time < 0):  # noqa: E501
            raise ValueError("Invalid value for `planned_exe_time`, must be a value greater than or equal to `0`")  # noqa: E501

        self._planned_exe_time = planned_exe_time

    @property
    def actual_exe_time(self):
        """Gets the actual_exe_time of this ManualTestLogResource.  # noqa: E501


        :return: The actual_exe_time of this ManualTestLogResource.  # noqa: E501
        :rtype: int
        """
        return self._actual_exe_time

    @actual_exe_time.setter
    def actual_exe_time(self, actual_exe_time):
        """Sets the actual_exe_time of this ManualTestLogResource.


        :param actual_exe_time: The actual_exe_time of this ManualTestLogResource.  # noqa: E501
        :type: int
        """

        self._actual_exe_time = actual_exe_time

    @property
    def build_number(self):
        """Gets the build_number of this ManualTestLogResource.  # noqa: E501

        Jenkins jobs build number  # noqa: E501

        :return: The build_number of this ManualTestLogResource.  # noqa: E501
        :rtype: str
        """
        return self._build_number

    @build_number.setter
    def build_number(self, build_number):
        """Sets the build_number of this ManualTestLogResource.

        Jenkins jobs build number  # noqa: E501

        :param build_number: The build_number of this ManualTestLogResource.  # noqa: E501
        :type: str
        """

        self._build_number = build_number

    @property
    def build_url(self):
        """Gets the build_url of this ManualTestLogResource.  # noqa: E501

        Jenkins jobs build URL  # noqa: E501

        :return: The build_url of this ManualTestLogResource.  # noqa: E501
        :rtype: str
        """
        return self._build_url

    @build_url.setter
    def build_url(self, build_url):
        """Sets the build_url of this ManualTestLogResource.

        Jenkins jobs build URL  # noqa: E501

        :param build_url: The build_url of this ManualTestLogResource.  # noqa: E501
        :type: str
        """

        self._build_url = build_url

    @property
    def properties(self):
        """Gets the properties of this ManualTestLogResource.  # noqa: E501


        :return: The properties of this ManualTestLogResource.  # noqa: E501
        :rtype: list[PropertyResource]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this ManualTestLogResource.


        :param properties: The properties of this ManualTestLogResource.  # noqa: E501
        :type: list[PropertyResource]
        """

        self._properties = properties

    @property
    def status(self):
        """Gets the status of this ManualTestLogResource.  # noqa: E501


        :return: The status of this ManualTestLogResource.  # noqa: E501
        :rtype: StatusResource
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ManualTestLogResource.


        :param status: The status of this ManualTestLogResource.  # noqa: E501
        :type: StatusResource
        """
        if self._configuration.client_side_validation and status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def result_number(self):
        """Gets the result_number of this ManualTestLogResource.  # noqa: E501


        :return: The result_number of this ManualTestLogResource.  # noqa: E501
        :rtype: int
        """
        return self._result_number

    @result_number.setter
    def result_number(self, result_number):
        """Sets the result_number of this ManualTestLogResource.


        :param result_number: The result_number of this ManualTestLogResource.  # noqa: E501
        :type: int
        """

        self._result_number = result_number

    @property
    def test_step_logs(self):
        """Gets the test_step_logs of this ManualTestLogResource.  # noqa: E501

        Arrays of Test Step Log,   With called test steps, the \"called_test_case_id\" and \"parent_test_step_id\" must be included in request body.  # noqa: E501

        :return: The test_step_logs of this ManualTestLogResource.  # noqa: E501
        :rtype: list[TestStepLogResource]
        """
        return self._test_step_logs

    @test_step_logs.setter
    def test_step_logs(self, test_step_logs):
        """Sets the test_step_logs of this ManualTestLogResource.

        Arrays of Test Step Log,   With called test steps, the \"called_test_case_id\" and \"parent_test_step_id\" must be included in request body.  # noqa: E501

        :param test_step_logs: The test_step_logs of this ManualTestLogResource.  # noqa: E501
        :type: list[TestStepLogResource]
        """

        self._test_step_logs = test_step_logs

    @property
    def defects(self):
        """Gets the defects of this ManualTestLogResource.  # noqa: E501

        Array of Defect  # noqa: E501

        :return: The defects of this ManualTestLogResource.  # noqa: E501
        :rtype: list[LinkedDefectResource]
        """
        return self._defects

    @defects.setter
    def defects(self, defects):
        """Sets the defects of this ManualTestLogResource.

        Array of Defect  # noqa: E501

        :param defects: The defects of this ManualTestLogResource.  # noqa: E501
        :type: list[LinkedDefectResource]
        """

        self._defects = defects

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ManualTestLogResource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ManualTestLogResource):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ManualTestLogResource):
            return True

        return self.to_dict() != other.to_dict()
