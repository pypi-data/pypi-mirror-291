# coding: utf-8

"""
    qTest Manager API Version 11.0.0 - 2023.6

    qTest Manager API Version 11.0.0 - 2023.6  # noqa: E501

    OpenAPI spec version: 11.0.0 - 2023.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class TraceabilityRequirement(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'order': 'int',
        'children': 'list[TraceabilityRequirement]',
        'requirements': 'list[dict(str, object)]',
        'root': 'bool'
    }

    attribute_map = {
        'order': 'order',
        'children': 'children',
        'requirements': 'requirements',
        'root': 'root'
    }

    def __init__(self, order=None, children=None, requirements=None, root=False, _configuration=None):  # noqa: E501
        """TraceabilityRequirement - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._order = None
        self._children = None
        self._requirements = None
        self._root = None
        self.discriminator = None

        if order is not None:
            self.order = order
        if children is not None:
            self.children = children
        if requirements is not None:
            self.requirements = requirements
        if root is not None:
            self.root = root

    @property
    def order(self):
        """Gets the order of this TraceabilityRequirement.  # noqa: E501

        Order  # noqa: E501

        :return: The order of this TraceabilityRequirement.  # noqa: E501
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this TraceabilityRequirement.

        Order  # noqa: E501

        :param order: The order of this TraceabilityRequirement.  # noqa: E501
        :type: int
        """

        self._order = order

    @property
    def children(self):
        """Gets the children of this TraceabilityRequirement.  # noqa: E501

        Arrays of TraceabilityRequirement  # noqa: E501

        :return: The children of this TraceabilityRequirement.  # noqa: E501
        :rtype: list[TraceabilityRequirement]
        """
        return self._children

    @children.setter
    def children(self, children):
        """Sets the children of this TraceabilityRequirement.

        Arrays of TraceabilityRequirement  # noqa: E501

        :param children: The children of this TraceabilityRequirement.  # noqa: E501
        :type: list[TraceabilityRequirement]
        """

        self._children = children

    @property
    def requirements(self):
        """Gets the requirements of this TraceabilityRequirement.  # noqa: E501

        Arrays of Requirement data  # noqa: E501

        :return: The requirements of this TraceabilityRequirement.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._requirements

    @requirements.setter
    def requirements(self, requirements):
        """Sets the requirements of this TraceabilityRequirement.

        Arrays of Requirement data  # noqa: E501

        :param requirements: The requirements of this TraceabilityRequirement.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._requirements = requirements

    @property
    def root(self):
        """Gets the root of this TraceabilityRequirement.  # noqa: E501

        Is root Requirement Module or not  # noqa: E501

        :return: The root of this TraceabilityRequirement.  # noqa: E501
        :rtype: bool
        """
        return self._root

    @root.setter
    def root(self, root):
        """Sets the root of this TraceabilityRequirement.

        Is root Requirement Module or not  # noqa: E501

        :param root: The root of this TraceabilityRequirement.  # noqa: E501
        :type: bool
        """

        self._root = root

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TraceabilityRequirement, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TraceabilityRequirement):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TraceabilityRequirement):
            return True

        return self.to_dict() != other.to_dict()
