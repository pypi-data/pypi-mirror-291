# coding: utf-8

"""
    qTest Manager API Version 11.0.0 - 2023.6

    qTest Manager API Version 11.0.0 - 2023.6  # noqa: E501

    OpenAPI spec version: 11.0.0 - 2023.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ReleaseWithCustomFieldResource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'links': 'list[Link]',
        'id': 'int',
        'name': 'str',
        'order': 'int',
        'pid': 'str',
        'created_date': 'datetime',
        'last_modified_date': 'datetime',
        'properties': 'list[PropertyResource]',
        'web_url': 'str',
        'description': 'str',
        'note': 'str',
        'start_date': 'datetime',
        'end_date': 'datetime'
    }

    attribute_map = {
        'links': 'links',
        'id': 'id',
        'name': 'name',
        'order': 'order',
        'pid': 'pid',
        'created_date': 'created_date',
        'last_modified_date': 'last_modified_date',
        'properties': 'properties',
        'web_url': 'web_url',
        'description': 'description',
        'note': 'note',
        'start_date': 'start_date',
        'end_date': 'end_date'
    }

    def __init__(self, links=None, id=None, name=None, order=None, pid=None, created_date=None, last_modified_date=None, properties=None, web_url=None, description=None, note=None, start_date=None, end_date=None, _configuration=None):  # noqa: E501
        """ReleaseWithCustomFieldResource - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._links = None
        self._id = None
        self._name = None
        self._order = None
        self._pid = None
        self._created_date = None
        self._last_modified_date = None
        self._properties = None
        self._web_url = None
        self._description = None
        self._note = None
        self._start_date = None
        self._end_date = None
        self.discriminator = None

        if links is not None:
            self.links = links
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if order is not None:
            self.order = order
        if pid is not None:
            self.pid = pid
        if created_date is not None:
            self.created_date = created_date
        if last_modified_date is not None:
            self.last_modified_date = last_modified_date
        self.properties = properties
        if web_url is not None:
            self.web_url = web_url
        if description is not None:
            self.description = description
        if note is not None:
            self.note = note
        if start_date is not None:
            self.start_date = start_date
        if end_date is not None:
            self.end_date = end_date

    @property
    def links(self):
        """Gets the links of this ReleaseWithCustomFieldResource.  # noqa: E501


        :return: The links of this ReleaseWithCustomFieldResource.  # noqa: E501
        :rtype: list[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this ReleaseWithCustomFieldResource.


        :param links: The links of this ReleaseWithCustomFieldResource.  # noqa: E501
        :type: list[Link]
        """

        self._links = links

    @property
    def id(self):
        """Gets the id of this ReleaseWithCustomFieldResource.  # noqa: E501


        :return: The id of this ReleaseWithCustomFieldResource.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ReleaseWithCustomFieldResource.


        :param id: The id of this ReleaseWithCustomFieldResource.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ReleaseWithCustomFieldResource.  # noqa: E501


        :return: The name of this ReleaseWithCustomFieldResource.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ReleaseWithCustomFieldResource.


        :param name: The name of this ReleaseWithCustomFieldResource.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 500):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `500`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def order(self):
        """Gets the order of this ReleaseWithCustomFieldResource.  # noqa: E501


        :return: The order of this ReleaseWithCustomFieldResource.  # noqa: E501
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this ReleaseWithCustomFieldResource.


        :param order: The order of this ReleaseWithCustomFieldResource.  # noqa: E501
        :type: int
        """

        self._order = order

    @property
    def pid(self):
        """Gets the pid of this ReleaseWithCustomFieldResource.  # noqa: E501


        :return: The pid of this ReleaseWithCustomFieldResource.  # noqa: E501
        :rtype: str
        """
        return self._pid

    @pid.setter
    def pid(self, pid):
        """Sets the pid of this ReleaseWithCustomFieldResource.


        :param pid: The pid of this ReleaseWithCustomFieldResource.  # noqa: E501
        :type: str
        """

        self._pid = pid

    @property
    def created_date(self):
        """Gets the created_date of this ReleaseWithCustomFieldResource.  # noqa: E501


        :return: The created_date of this ReleaseWithCustomFieldResource.  # noqa: E501
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this ReleaseWithCustomFieldResource.


        :param created_date: The created_date of this ReleaseWithCustomFieldResource.  # noqa: E501
        :type: datetime
        """

        self._created_date = created_date

    @property
    def last_modified_date(self):
        """Gets the last_modified_date of this ReleaseWithCustomFieldResource.  # noqa: E501


        :return: The last_modified_date of this ReleaseWithCustomFieldResource.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified_date

    @last_modified_date.setter
    def last_modified_date(self, last_modified_date):
        """Sets the last_modified_date of this ReleaseWithCustomFieldResource.


        :param last_modified_date: The last_modified_date of this ReleaseWithCustomFieldResource.  # noqa: E501
        :type: datetime
        """

        self._last_modified_date = last_modified_date

    @property
    def properties(self):
        """Gets the properties of this ReleaseWithCustomFieldResource.  # noqa: E501


        :return: The properties of this ReleaseWithCustomFieldResource.  # noqa: E501
        :rtype: list[PropertyResource]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this ReleaseWithCustomFieldResource.


        :param properties: The properties of this ReleaseWithCustomFieldResource.  # noqa: E501
        :type: list[PropertyResource]
        """
        if self._configuration.client_side_validation and properties is None:
            raise ValueError("Invalid value for `properties`, must not be `None`")  # noqa: E501

        self._properties = properties

    @property
    def web_url(self):
        """Gets the web_url of this ReleaseWithCustomFieldResource.  # noqa: E501


        :return: The web_url of this ReleaseWithCustomFieldResource.  # noqa: E501
        :rtype: str
        """
        return self._web_url

    @web_url.setter
    def web_url(self, web_url):
        """Sets the web_url of this ReleaseWithCustomFieldResource.


        :param web_url: The web_url of this ReleaseWithCustomFieldResource.  # noqa: E501
        :type: str
        """

        self._web_url = web_url

    @property
    def description(self):
        """Gets the description of this ReleaseWithCustomFieldResource.  # noqa: E501


        :return: The description of this ReleaseWithCustomFieldResource.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ReleaseWithCustomFieldResource.


        :param description: The description of this ReleaseWithCustomFieldResource.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def note(self):
        """Gets the note of this ReleaseWithCustomFieldResource.  # noqa: E501


        :return: The note of this ReleaseWithCustomFieldResource.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this ReleaseWithCustomFieldResource.


        :param note: The note of this ReleaseWithCustomFieldResource.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def start_date(self):
        """Gets the start_date of this ReleaseWithCustomFieldResource.  # noqa: E501


        :return: The start_date of this ReleaseWithCustomFieldResource.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this ReleaseWithCustomFieldResource.


        :param start_date: The start_date of this ReleaseWithCustomFieldResource.  # noqa: E501
        :type: datetime
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this ReleaseWithCustomFieldResource.  # noqa: E501


        :return: The end_date of this ReleaseWithCustomFieldResource.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this ReleaseWithCustomFieldResource.


        :param end_date: The end_date of this ReleaseWithCustomFieldResource.  # noqa: E501
        :type: datetime
        """

        self._end_date = end_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReleaseWithCustomFieldResource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReleaseWithCustomFieldResource):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ReleaseWithCustomFieldResource):
            return True

        return self.to_dict() != other.to_dict()
