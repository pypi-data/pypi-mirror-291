# coding: utf-8

"""
    qTest Manager API Version 11.0.0 - 2023.6

    qTest Manager API Version 11.0.0 - 2023.6  # noqa: E501

    OpenAPI spec version: 11.0.0 - 2023.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class TestCaseResource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'links': 'list[Link]',
        'id': 'int',
        'test_case_version_id': 'int',
        'test_case_version': 'str',
        'creator_id': 'int',
        'tosca_guid': 'str',
        'tosca_node_path': 'str',
        'tosca_url': 'str',
        'tosca_test_case_unique_id': 'str',
        'tosca_state': 'str',
        'tosca_workspace_url': 'str'
    }

    attribute_map = {
        'links': 'links',
        'id': 'id',
        'test_case_version_id': 'test_case_version_id',
        'test_case_version': 'test_case_version',
        'creator_id': 'creator_id',
        'tosca_guid': 'tosca_guid',
        'tosca_node_path': 'tosca_node_path',
        'tosca_url': 'tosca_url',
        'tosca_test_case_unique_id': 'tosca_test_case_unique_id',
        'tosca_state': 'tosca_state',
        'tosca_workspace_url': 'tosca_workspace_url'
    }

    def __init__(self, links=None, id=None, test_case_version_id=None, test_case_version=None, creator_id=None, tosca_guid=None, tosca_node_path=None, tosca_url=None, tosca_test_case_unique_id=None, tosca_state=None, tosca_workspace_url=None, _configuration=None):  # noqa: E501
        """TestCaseResource - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._links = None
        self._id = None
        self._test_case_version_id = None
        self._test_case_version = None
        self._creator_id = None
        self._tosca_guid = None
        self._tosca_node_path = None
        self._tosca_url = None
        self._tosca_test_case_unique_id = None
        self._tosca_state = None
        self._tosca_workspace_url = None
        self.discriminator = None

        if links is not None:
            self.links = links
        if id is not None:
            self.id = id
        if test_case_version_id is not None:
            self.test_case_version_id = test_case_version_id
        if test_case_version is not None:
            self.test_case_version = test_case_version
        if creator_id is not None:
            self.creator_id = creator_id
        if tosca_guid is not None:
            self.tosca_guid = tosca_guid
        if tosca_node_path is not None:
            self.tosca_node_path = tosca_node_path
        if tosca_url is not None:
            self.tosca_url = tosca_url
        if tosca_test_case_unique_id is not None:
            self.tosca_test_case_unique_id = tosca_test_case_unique_id
        if tosca_state is not None:
            self.tosca_state = tosca_state
        if tosca_workspace_url is not None:
            self.tosca_workspace_url = tosca_workspace_url

    @property
    def links(self):
        """Gets the links of this TestCaseResource.  # noqa: E501

        Link to resource  # noqa: E501

        :return: The links of this TestCaseResource.  # noqa: E501
        :rtype: list[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this TestCaseResource.

        Link to resource  # noqa: E501

        :param links: The links of this TestCaseResource.  # noqa: E501
        :type: list[Link]
        """

        self._links = links

    @property
    def id(self):
        """Gets the id of this TestCaseResource.  # noqa: E501

        ID of the Test Case  # noqa: E501

        :return: The id of this TestCaseResource.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TestCaseResource.

        ID of the Test Case  # noqa: E501

        :param id: The id of this TestCaseResource.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def test_case_version_id(self):
        """Gets the test_case_version_id of this TestCaseResource.  # noqa: E501

        ID of Test Case Version  # noqa: E501

        :return: The test_case_version_id of this TestCaseResource.  # noqa: E501
        :rtype: int
        """
        return self._test_case_version_id

    @test_case_version_id.setter
    def test_case_version_id(self, test_case_version_id):
        """Sets the test_case_version_id of this TestCaseResource.

        ID of Test Case Version  # noqa: E501

        :param test_case_version_id: The test_case_version_id of this TestCaseResource.  # noqa: E501
        :type: int
        """

        self._test_case_version_id = test_case_version_id

    @property
    def test_case_version(self):
        """Gets the test_case_version of this TestCaseResource.  # noqa: E501

        Test Case Version of the Test Case  # noqa: E501

        :return: The test_case_version of this TestCaseResource.  # noqa: E501
        :rtype: str
        """
        return self._test_case_version

    @test_case_version.setter
    def test_case_version(self, test_case_version):
        """Sets the test_case_version of this TestCaseResource.

        Test Case Version of the Test Case  # noqa: E501

        :param test_case_version: The test_case_version of this TestCaseResource.  # noqa: E501
        :type: str
        """

        self._test_case_version = test_case_version

    @property
    def creator_id(self):
        """Gets the creator_id of this TestCaseResource.  # noqa: E501

        ID of the User who create the Test Case  # noqa: E501

        :return: The creator_id of this TestCaseResource.  # noqa: E501
        :rtype: int
        """
        return self._creator_id

    @creator_id.setter
    def creator_id(self, creator_id):
        """Sets the creator_id of this TestCaseResource.

        ID of the User who create the Test Case  # noqa: E501

        :param creator_id: The creator_id of this TestCaseResource.  # noqa: E501
        :type: int
        """

        self._creator_id = creator_id

    @property
    def tosca_guid(self):
        """Gets the tosca_guid of this TestCaseResource.  # noqa: E501

        GUID of Tosca test case.  # noqa: E501

        :return: The tosca_guid of this TestCaseResource.  # noqa: E501
        :rtype: str
        """
        return self._tosca_guid

    @tosca_guid.setter
    def tosca_guid(self, tosca_guid):
        """Sets the tosca_guid of this TestCaseResource.

        GUID of Tosca test case.  # noqa: E501

        :param tosca_guid: The tosca_guid of this TestCaseResource.  # noqa: E501
        :type: str
        """

        self._tosca_guid = tosca_guid

    @property
    def tosca_node_path(self):
        """Gets the tosca_node_path of this TestCaseResource.  # noqa: E501

        Node Path of Tosca test case.  # noqa: E501

        :return: The tosca_node_path of this TestCaseResource.  # noqa: E501
        :rtype: str
        """
        return self._tosca_node_path

    @tosca_node_path.setter
    def tosca_node_path(self, tosca_node_path):
        """Sets the tosca_node_path of this TestCaseResource.

        Node Path of Tosca test case.  # noqa: E501

        :param tosca_node_path: The tosca_node_path of this TestCaseResource.  # noqa: E501
        :type: str
        """

        self._tosca_node_path = tosca_node_path

    @property
    def tosca_url(self):
        """Gets the tosca_url of this TestCaseResource.  # noqa: E501


        :return: The tosca_url of this TestCaseResource.  # noqa: E501
        :rtype: str
        """
        return self._tosca_url

    @tosca_url.setter
    def tosca_url(self, tosca_url):
        """Sets the tosca_url of this TestCaseResource.


        :param tosca_url: The tosca_url of this TestCaseResource.  # noqa: E501
        :type: str
        """

        self._tosca_url = tosca_url

    @property
    def tosca_test_case_unique_id(self):
        """Gets the tosca_test_case_unique_id of this TestCaseResource.  # noqa: E501


        :return: The tosca_test_case_unique_id of this TestCaseResource.  # noqa: E501
        :rtype: str
        """
        return self._tosca_test_case_unique_id

    @tosca_test_case_unique_id.setter
    def tosca_test_case_unique_id(self, tosca_test_case_unique_id):
        """Sets the tosca_test_case_unique_id of this TestCaseResource.


        :param tosca_test_case_unique_id: The tosca_test_case_unique_id of this TestCaseResource.  # noqa: E501
        :type: str
        """

        self._tosca_test_case_unique_id = tosca_test_case_unique_id

    @property
    def tosca_state(self):
        """Gets the tosca_state of this TestCaseResource.  # noqa: E501


        :return: The tosca_state of this TestCaseResource.  # noqa: E501
        :rtype: str
        """
        return self._tosca_state

    @tosca_state.setter
    def tosca_state(self, tosca_state):
        """Sets the tosca_state of this TestCaseResource.


        :param tosca_state: The tosca_state of this TestCaseResource.  # noqa: E501
        :type: str
        """

        self._tosca_state = tosca_state

    @property
    def tosca_workspace_url(self):
        """Gets the tosca_workspace_url of this TestCaseResource.  # noqa: E501


        :return: The tosca_workspace_url of this TestCaseResource.  # noqa: E501
        :rtype: str
        """
        return self._tosca_workspace_url

    @tosca_workspace_url.setter
    def tosca_workspace_url(self, tosca_workspace_url):
        """Sets the tosca_workspace_url of this TestCaseResource.


        :param tosca_workspace_url: The tosca_workspace_url of this TestCaseResource.  # noqa: E501
        :type: str
        """

        self._tosca_workspace_url = tosca_workspace_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TestCaseResource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TestCaseResource):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TestCaseResource):
            return True

        return self.to_dict() != other.to_dict()
