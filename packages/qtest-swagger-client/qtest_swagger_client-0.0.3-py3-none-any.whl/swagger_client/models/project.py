# coding: utf-8

"""
    qTest Manager API Version 11.0.0 - 2023.6

    qTest Manager API Version 11.0.0 - 2023.6  # noqa: E501

    OpenAPI spec version: 11.0.0 - 2023.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Project(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'creator_id': 'int',
        'created_date': 'datetime',
        'last_modified_user_id': 'int',
        'last_modified_date': 'datetime',
        'id': 'int',
        'client_id': 'int',
        'name': 'str',
        'start_date': 'datetime',
        'end_date': 'datetime',
        'description': 'str',
        'project_status_id': 'int',
        'patch_incident_status': 'int',
        'automation': 'bool',
        'defectworkflow': 'bool',
        'uuid': 'str',
        'clone_status': 'int',
        'source_project_id': 'int',
        'client': 'Client',
        'trx_id': 'datetime',
        'custom_field_template_id': 'int',
        'internally': 'bool',
        'custom_field_template': 'CustomFieldTemplate',
        'indexing_status': 'bool',
        'auto_populate_closed_date': 'bool',
        'enforce_required_test_execution_fields': 'bool',
        'active': 'bool',
        'cloned': 'bool',
        'cloning': 'bool',
        'new_style_sample': 'bool',
        'patched_incidents': 'bool',
        'long_id': 'int',
        'sample_project': 'bool',
        'create_date_time_string': 'str'
    }

    attribute_map = {
        'creator_id': 'creatorId',
        'created_date': 'createdDate',
        'last_modified_user_id': 'lastModifiedUserId',
        'last_modified_date': 'lastModifiedDate',
        'id': 'id',
        'client_id': 'clientId',
        'name': 'name',
        'start_date': 'startDate',
        'end_date': 'endDate',
        'description': 'description',
        'project_status_id': 'projectStatusId',
        'patch_incident_status': 'patchIncidentStatus',
        'automation': 'automation',
        'defectworkflow': 'defectworkflow',
        'uuid': 'uuid',
        'clone_status': 'cloneStatus',
        'source_project_id': 'sourceProjectId',
        'client': 'client',
        'trx_id': 'trxId',
        'custom_field_template_id': 'customFieldTemplateId',
        'internally': 'internally',
        'custom_field_template': 'customFieldTemplate',
        'indexing_status': 'indexingStatus',
        'auto_populate_closed_date': 'autoPopulateClosedDate',
        'enforce_required_test_execution_fields': 'enforceRequiredTestExecutionFields',
        'active': 'active',
        'cloned': 'cloned',
        'cloning': 'cloning',
        'new_style_sample': 'newStyleSample',
        'patched_incidents': 'patchedIncidents',
        'long_id': 'longId',
        'sample_project': 'sampleProject',
        'create_date_time_string': 'createDateTimeString'
    }

    def __init__(self, creator_id=None, created_date=None, last_modified_user_id=None, last_modified_date=None, id=None, client_id=None, name=None, start_date=None, end_date=None, description=None, project_status_id=None, patch_incident_status=None, automation=False, defectworkflow=False, uuid=None, clone_status=None, source_project_id=None, client=None, trx_id=None, custom_field_template_id=None, internally=False, custom_field_template=None, indexing_status=False, auto_populate_closed_date=False, enforce_required_test_execution_fields=False, active=False, cloned=False, cloning=False, new_style_sample=False, patched_incidents=False, long_id=None, sample_project=False, create_date_time_string=None, _configuration=None):  # noqa: E501
        """Project - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._creator_id = None
        self._created_date = None
        self._last_modified_user_id = None
        self._last_modified_date = None
        self._id = None
        self._client_id = None
        self._name = None
        self._start_date = None
        self._end_date = None
        self._description = None
        self._project_status_id = None
        self._patch_incident_status = None
        self._automation = None
        self._defectworkflow = None
        self._uuid = None
        self._clone_status = None
        self._source_project_id = None
        self._client = None
        self._trx_id = None
        self._custom_field_template_id = None
        self._internally = None
        self._custom_field_template = None
        self._indexing_status = None
        self._auto_populate_closed_date = None
        self._enforce_required_test_execution_fields = None
        self._active = None
        self._cloned = None
        self._cloning = None
        self._new_style_sample = None
        self._patched_incidents = None
        self._long_id = None
        self._sample_project = None
        self._create_date_time_string = None
        self.discriminator = None

        if creator_id is not None:
            self.creator_id = creator_id
        if created_date is not None:
            self.created_date = created_date
        if last_modified_user_id is not None:
            self.last_modified_user_id = last_modified_user_id
        if last_modified_date is not None:
            self.last_modified_date = last_modified_date
        if id is not None:
            self.id = id
        if client_id is not None:
            self.client_id = client_id
        if name is not None:
            self.name = name
        if start_date is not None:
            self.start_date = start_date
        if end_date is not None:
            self.end_date = end_date
        if description is not None:
            self.description = description
        if project_status_id is not None:
            self.project_status_id = project_status_id
        if patch_incident_status is not None:
            self.patch_incident_status = patch_incident_status
        if automation is not None:
            self.automation = automation
        if defectworkflow is not None:
            self.defectworkflow = defectworkflow
        if uuid is not None:
            self.uuid = uuid
        if clone_status is not None:
            self.clone_status = clone_status
        if source_project_id is not None:
            self.source_project_id = source_project_id
        if client is not None:
            self.client = client
        if trx_id is not None:
            self.trx_id = trx_id
        if custom_field_template_id is not None:
            self.custom_field_template_id = custom_field_template_id
        if internally is not None:
            self.internally = internally
        if custom_field_template is not None:
            self.custom_field_template = custom_field_template
        if indexing_status is not None:
            self.indexing_status = indexing_status
        if auto_populate_closed_date is not None:
            self.auto_populate_closed_date = auto_populate_closed_date
        if enforce_required_test_execution_fields is not None:
            self.enforce_required_test_execution_fields = enforce_required_test_execution_fields
        if active is not None:
            self.active = active
        if cloned is not None:
            self.cloned = cloned
        if cloning is not None:
            self.cloning = cloning
        if new_style_sample is not None:
            self.new_style_sample = new_style_sample
        if patched_incidents is not None:
            self.patched_incidents = patched_incidents
        if long_id is not None:
            self.long_id = long_id
        if sample_project is not None:
            self.sample_project = sample_project
        if create_date_time_string is not None:
            self.create_date_time_string = create_date_time_string

    @property
    def creator_id(self):
        """Gets the creator_id of this Project.  # noqa: E501


        :return: The creator_id of this Project.  # noqa: E501
        :rtype: int
        """
        return self._creator_id

    @creator_id.setter
    def creator_id(self, creator_id):
        """Sets the creator_id of this Project.


        :param creator_id: The creator_id of this Project.  # noqa: E501
        :type: int
        """

        self._creator_id = creator_id

    @property
    def created_date(self):
        """Gets the created_date of this Project.  # noqa: E501


        :return: The created_date of this Project.  # noqa: E501
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this Project.


        :param created_date: The created_date of this Project.  # noqa: E501
        :type: datetime
        """

        self._created_date = created_date

    @property
    def last_modified_user_id(self):
        """Gets the last_modified_user_id of this Project.  # noqa: E501


        :return: The last_modified_user_id of this Project.  # noqa: E501
        :rtype: int
        """
        return self._last_modified_user_id

    @last_modified_user_id.setter
    def last_modified_user_id(self, last_modified_user_id):
        """Sets the last_modified_user_id of this Project.


        :param last_modified_user_id: The last_modified_user_id of this Project.  # noqa: E501
        :type: int
        """

        self._last_modified_user_id = last_modified_user_id

    @property
    def last_modified_date(self):
        """Gets the last_modified_date of this Project.  # noqa: E501


        :return: The last_modified_date of this Project.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified_date

    @last_modified_date.setter
    def last_modified_date(self, last_modified_date):
        """Sets the last_modified_date of this Project.


        :param last_modified_date: The last_modified_date of this Project.  # noqa: E501
        :type: datetime
        """

        self._last_modified_date = last_modified_date

    @property
    def id(self):
        """Gets the id of this Project.  # noqa: E501


        :return: The id of this Project.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Project.


        :param id: The id of this Project.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def client_id(self):
        """Gets the client_id of this Project.  # noqa: E501


        :return: The client_id of this Project.  # noqa: E501
        :rtype: int
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this Project.


        :param client_id: The client_id of this Project.  # noqa: E501
        :type: int
        """

        self._client_id = client_id

    @property
    def name(self):
        """Gets the name of this Project.  # noqa: E501


        :return: The name of this Project.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Project.


        :param name: The name of this Project.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def start_date(self):
        """Gets the start_date of this Project.  # noqa: E501


        :return: The start_date of this Project.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this Project.


        :param start_date: The start_date of this Project.  # noqa: E501
        :type: datetime
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this Project.  # noqa: E501


        :return: The end_date of this Project.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this Project.


        :param end_date: The end_date of this Project.  # noqa: E501
        :type: datetime
        """

        self._end_date = end_date

    @property
    def description(self):
        """Gets the description of this Project.  # noqa: E501


        :return: The description of this Project.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Project.


        :param description: The description of this Project.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def project_status_id(self):
        """Gets the project_status_id of this Project.  # noqa: E501


        :return: The project_status_id of this Project.  # noqa: E501
        :rtype: int
        """
        return self._project_status_id

    @project_status_id.setter
    def project_status_id(self, project_status_id):
        """Sets the project_status_id of this Project.


        :param project_status_id: The project_status_id of this Project.  # noqa: E501
        :type: int
        """

        self._project_status_id = project_status_id

    @property
    def patch_incident_status(self):
        """Gets the patch_incident_status of this Project.  # noqa: E501


        :return: The patch_incident_status of this Project.  # noqa: E501
        :rtype: int
        """
        return self._patch_incident_status

    @patch_incident_status.setter
    def patch_incident_status(self, patch_incident_status):
        """Sets the patch_incident_status of this Project.


        :param patch_incident_status: The patch_incident_status of this Project.  # noqa: E501
        :type: int
        """

        self._patch_incident_status = patch_incident_status

    @property
    def automation(self):
        """Gets the automation of this Project.  # noqa: E501


        :return: The automation of this Project.  # noqa: E501
        :rtype: bool
        """
        return self._automation

    @automation.setter
    def automation(self, automation):
        """Sets the automation of this Project.


        :param automation: The automation of this Project.  # noqa: E501
        :type: bool
        """

        self._automation = automation

    @property
    def defectworkflow(self):
        """Gets the defectworkflow of this Project.  # noqa: E501


        :return: The defectworkflow of this Project.  # noqa: E501
        :rtype: bool
        """
        return self._defectworkflow

    @defectworkflow.setter
    def defectworkflow(self, defectworkflow):
        """Sets the defectworkflow of this Project.


        :param defectworkflow: The defectworkflow of this Project.  # noqa: E501
        :type: bool
        """

        self._defectworkflow = defectworkflow

    @property
    def uuid(self):
        """Gets the uuid of this Project.  # noqa: E501


        :return: The uuid of this Project.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this Project.


        :param uuid: The uuid of this Project.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def clone_status(self):
        """Gets the clone_status of this Project.  # noqa: E501


        :return: The clone_status of this Project.  # noqa: E501
        :rtype: int
        """
        return self._clone_status

    @clone_status.setter
    def clone_status(self, clone_status):
        """Sets the clone_status of this Project.


        :param clone_status: The clone_status of this Project.  # noqa: E501
        :type: int
        """

        self._clone_status = clone_status

    @property
    def source_project_id(self):
        """Gets the source_project_id of this Project.  # noqa: E501


        :return: The source_project_id of this Project.  # noqa: E501
        :rtype: int
        """
        return self._source_project_id

    @source_project_id.setter
    def source_project_id(self, source_project_id):
        """Sets the source_project_id of this Project.


        :param source_project_id: The source_project_id of this Project.  # noqa: E501
        :type: int
        """

        self._source_project_id = source_project_id

    @property
    def client(self):
        """Gets the client of this Project.  # noqa: E501


        :return: The client of this Project.  # noqa: E501
        :rtype: Client
        """
        return self._client

    @client.setter
    def client(self, client):
        """Sets the client of this Project.


        :param client: The client of this Project.  # noqa: E501
        :type: Client
        """

        self._client = client

    @property
    def trx_id(self):
        """Gets the trx_id of this Project.  # noqa: E501


        :return: The trx_id of this Project.  # noqa: E501
        :rtype: datetime
        """
        return self._trx_id

    @trx_id.setter
    def trx_id(self, trx_id):
        """Sets the trx_id of this Project.


        :param trx_id: The trx_id of this Project.  # noqa: E501
        :type: datetime
        """

        self._trx_id = trx_id

    @property
    def custom_field_template_id(self):
        """Gets the custom_field_template_id of this Project.  # noqa: E501


        :return: The custom_field_template_id of this Project.  # noqa: E501
        :rtype: int
        """
        return self._custom_field_template_id

    @custom_field_template_id.setter
    def custom_field_template_id(self, custom_field_template_id):
        """Sets the custom_field_template_id of this Project.


        :param custom_field_template_id: The custom_field_template_id of this Project.  # noqa: E501
        :type: int
        """

        self._custom_field_template_id = custom_field_template_id

    @property
    def internally(self):
        """Gets the internally of this Project.  # noqa: E501


        :return: The internally of this Project.  # noqa: E501
        :rtype: bool
        """
        return self._internally

    @internally.setter
    def internally(self, internally):
        """Sets the internally of this Project.


        :param internally: The internally of this Project.  # noqa: E501
        :type: bool
        """

        self._internally = internally

    @property
    def custom_field_template(self):
        """Gets the custom_field_template of this Project.  # noqa: E501


        :return: The custom_field_template of this Project.  # noqa: E501
        :rtype: CustomFieldTemplate
        """
        return self._custom_field_template

    @custom_field_template.setter
    def custom_field_template(self, custom_field_template):
        """Sets the custom_field_template of this Project.


        :param custom_field_template: The custom_field_template of this Project.  # noqa: E501
        :type: CustomFieldTemplate
        """

        self._custom_field_template = custom_field_template

    @property
    def indexing_status(self):
        """Gets the indexing_status of this Project.  # noqa: E501


        :return: The indexing_status of this Project.  # noqa: E501
        :rtype: bool
        """
        return self._indexing_status

    @indexing_status.setter
    def indexing_status(self, indexing_status):
        """Sets the indexing_status of this Project.


        :param indexing_status: The indexing_status of this Project.  # noqa: E501
        :type: bool
        """

        self._indexing_status = indexing_status

    @property
    def auto_populate_closed_date(self):
        """Gets the auto_populate_closed_date of this Project.  # noqa: E501


        :return: The auto_populate_closed_date of this Project.  # noqa: E501
        :rtype: bool
        """
        return self._auto_populate_closed_date

    @auto_populate_closed_date.setter
    def auto_populate_closed_date(self, auto_populate_closed_date):
        """Sets the auto_populate_closed_date of this Project.


        :param auto_populate_closed_date: The auto_populate_closed_date of this Project.  # noqa: E501
        :type: bool
        """

        self._auto_populate_closed_date = auto_populate_closed_date

    @property
    def enforce_required_test_execution_fields(self):
        """Gets the enforce_required_test_execution_fields of this Project.  # noqa: E501


        :return: The enforce_required_test_execution_fields of this Project.  # noqa: E501
        :rtype: bool
        """
        return self._enforce_required_test_execution_fields

    @enforce_required_test_execution_fields.setter
    def enforce_required_test_execution_fields(self, enforce_required_test_execution_fields):
        """Sets the enforce_required_test_execution_fields of this Project.


        :param enforce_required_test_execution_fields: The enforce_required_test_execution_fields of this Project.  # noqa: E501
        :type: bool
        """

        self._enforce_required_test_execution_fields = enforce_required_test_execution_fields

    @property
    def active(self):
        """Gets the active of this Project.  # noqa: E501


        :return: The active of this Project.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Project.


        :param active: The active of this Project.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def cloned(self):
        """Gets the cloned of this Project.  # noqa: E501


        :return: The cloned of this Project.  # noqa: E501
        :rtype: bool
        """
        return self._cloned

    @cloned.setter
    def cloned(self, cloned):
        """Sets the cloned of this Project.


        :param cloned: The cloned of this Project.  # noqa: E501
        :type: bool
        """

        self._cloned = cloned

    @property
    def cloning(self):
        """Gets the cloning of this Project.  # noqa: E501


        :return: The cloning of this Project.  # noqa: E501
        :rtype: bool
        """
        return self._cloning

    @cloning.setter
    def cloning(self, cloning):
        """Sets the cloning of this Project.


        :param cloning: The cloning of this Project.  # noqa: E501
        :type: bool
        """

        self._cloning = cloning

    @property
    def new_style_sample(self):
        """Gets the new_style_sample of this Project.  # noqa: E501


        :return: The new_style_sample of this Project.  # noqa: E501
        :rtype: bool
        """
        return self._new_style_sample

    @new_style_sample.setter
    def new_style_sample(self, new_style_sample):
        """Sets the new_style_sample of this Project.


        :param new_style_sample: The new_style_sample of this Project.  # noqa: E501
        :type: bool
        """

        self._new_style_sample = new_style_sample

    @property
    def patched_incidents(self):
        """Gets the patched_incidents of this Project.  # noqa: E501


        :return: The patched_incidents of this Project.  # noqa: E501
        :rtype: bool
        """
        return self._patched_incidents

    @patched_incidents.setter
    def patched_incidents(self, patched_incidents):
        """Sets the patched_incidents of this Project.


        :param patched_incidents: The patched_incidents of this Project.  # noqa: E501
        :type: bool
        """

        self._patched_incidents = patched_incidents

    @property
    def long_id(self):
        """Gets the long_id of this Project.  # noqa: E501


        :return: The long_id of this Project.  # noqa: E501
        :rtype: int
        """
        return self._long_id

    @long_id.setter
    def long_id(self, long_id):
        """Sets the long_id of this Project.


        :param long_id: The long_id of this Project.  # noqa: E501
        :type: int
        """

        self._long_id = long_id

    @property
    def sample_project(self):
        """Gets the sample_project of this Project.  # noqa: E501


        :return: The sample_project of this Project.  # noqa: E501
        :rtype: bool
        """
        return self._sample_project

    @sample_project.setter
    def sample_project(self, sample_project):
        """Sets the sample_project of this Project.


        :param sample_project: The sample_project of this Project.  # noqa: E501
        :type: bool
        """

        self._sample_project = sample_project

    @property
    def create_date_time_string(self):
        """Gets the create_date_time_string of this Project.  # noqa: E501


        :return: The create_date_time_string of this Project.  # noqa: E501
        :rtype: str
        """
        return self._create_date_time_string

    @create_date_time_string.setter
    def create_date_time_string(self, create_date_time_string):
        """Sets the create_date_time_string of this Project.


        :param create_date_time_string: The create_date_time_string of this Project.  # noqa: E501
        :type: str
        """

        self._create_date_time_string = create_date_time_string

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Project, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Project):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Project):
            return True

        return self.to_dict() != other.to_dict()
