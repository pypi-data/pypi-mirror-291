# coding: utf-8

"""
    qTest Manager API Version 11.0.0 - 2023.6

    qTest Manager API Version 11.0.0 - 2023.6  # noqa: E501

    OpenAPI spec version: 11.0.0 - 2023.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class DefectComment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'client_id': 'int',
        'project_id': 'int',
        'object_id': 'int',
        'object_type_id': 'int',
        'user_id': 'int',
        'object_comment': 'str',
        'comment_date': 'datetime',
        'edit_date': 'datetime',
        'defect': 'Defect',
        'long_id': 'int'
    }

    attribute_map = {
        'id': 'id',
        'client_id': 'clientId',
        'project_id': 'projectId',
        'object_id': 'objectId',
        'object_type_id': 'objectTypeId',
        'user_id': 'userId',
        'object_comment': 'objectComment',
        'comment_date': 'commentDate',
        'edit_date': 'editDate',
        'defect': 'defect',
        'long_id': 'longId'
    }

    def __init__(self, id=None, client_id=None, project_id=None, object_id=None, object_type_id=None, user_id=None, object_comment=None, comment_date=None, edit_date=None, defect=None, long_id=None, _configuration=None):  # noqa: E501
        """DefectComment - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._client_id = None
        self._project_id = None
        self._object_id = None
        self._object_type_id = None
        self._user_id = None
        self._object_comment = None
        self._comment_date = None
        self._edit_date = None
        self._defect = None
        self._long_id = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if client_id is not None:
            self.client_id = client_id
        if project_id is not None:
            self.project_id = project_id
        if object_id is not None:
            self.object_id = object_id
        if object_type_id is not None:
            self.object_type_id = object_type_id
        if user_id is not None:
            self.user_id = user_id
        if object_comment is not None:
            self.object_comment = object_comment
        if comment_date is not None:
            self.comment_date = comment_date
        if edit_date is not None:
            self.edit_date = edit_date
        if defect is not None:
            self.defect = defect
        if long_id is not None:
            self.long_id = long_id

    @property
    def id(self):
        """Gets the id of this DefectComment.  # noqa: E501


        :return: The id of this DefectComment.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DefectComment.


        :param id: The id of this DefectComment.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def client_id(self):
        """Gets the client_id of this DefectComment.  # noqa: E501


        :return: The client_id of this DefectComment.  # noqa: E501
        :rtype: int
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this DefectComment.


        :param client_id: The client_id of this DefectComment.  # noqa: E501
        :type: int
        """

        self._client_id = client_id

    @property
    def project_id(self):
        """Gets the project_id of this DefectComment.  # noqa: E501


        :return: The project_id of this DefectComment.  # noqa: E501
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this DefectComment.


        :param project_id: The project_id of this DefectComment.  # noqa: E501
        :type: int
        """

        self._project_id = project_id

    @property
    def object_id(self):
        """Gets the object_id of this DefectComment.  # noqa: E501


        :return: The object_id of this DefectComment.  # noqa: E501
        :rtype: int
        """
        return self._object_id

    @object_id.setter
    def object_id(self, object_id):
        """Sets the object_id of this DefectComment.


        :param object_id: The object_id of this DefectComment.  # noqa: E501
        :type: int
        """

        self._object_id = object_id

    @property
    def object_type_id(self):
        """Gets the object_type_id of this DefectComment.  # noqa: E501


        :return: The object_type_id of this DefectComment.  # noqa: E501
        :rtype: int
        """
        return self._object_type_id

    @object_type_id.setter
    def object_type_id(self, object_type_id):
        """Sets the object_type_id of this DefectComment.


        :param object_type_id: The object_type_id of this DefectComment.  # noqa: E501
        :type: int
        """

        self._object_type_id = object_type_id

    @property
    def user_id(self):
        """Gets the user_id of this DefectComment.  # noqa: E501


        :return: The user_id of this DefectComment.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this DefectComment.


        :param user_id: The user_id of this DefectComment.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def object_comment(self):
        """Gets the object_comment of this DefectComment.  # noqa: E501


        :return: The object_comment of this DefectComment.  # noqa: E501
        :rtype: str
        """
        return self._object_comment

    @object_comment.setter
    def object_comment(self, object_comment):
        """Sets the object_comment of this DefectComment.


        :param object_comment: The object_comment of this DefectComment.  # noqa: E501
        :type: str
        """

        self._object_comment = object_comment

    @property
    def comment_date(self):
        """Gets the comment_date of this DefectComment.  # noqa: E501


        :return: The comment_date of this DefectComment.  # noqa: E501
        :rtype: datetime
        """
        return self._comment_date

    @comment_date.setter
    def comment_date(self, comment_date):
        """Sets the comment_date of this DefectComment.


        :param comment_date: The comment_date of this DefectComment.  # noqa: E501
        :type: datetime
        """

        self._comment_date = comment_date

    @property
    def edit_date(self):
        """Gets the edit_date of this DefectComment.  # noqa: E501


        :return: The edit_date of this DefectComment.  # noqa: E501
        :rtype: datetime
        """
        return self._edit_date

    @edit_date.setter
    def edit_date(self, edit_date):
        """Sets the edit_date of this DefectComment.


        :param edit_date: The edit_date of this DefectComment.  # noqa: E501
        :type: datetime
        """

        self._edit_date = edit_date

    @property
    def defect(self):
        """Gets the defect of this DefectComment.  # noqa: E501


        :return: The defect of this DefectComment.  # noqa: E501
        :rtype: Defect
        """
        return self._defect

    @defect.setter
    def defect(self, defect):
        """Sets the defect of this DefectComment.


        :param defect: The defect of this DefectComment.  # noqa: E501
        :type: Defect
        """

        self._defect = defect

    @property
    def long_id(self):
        """Gets the long_id of this DefectComment.  # noqa: E501


        :return: The long_id of this DefectComment.  # noqa: E501
        :rtype: int
        """
        return self._long_id

    @long_id.setter
    def long_id(self, long_id):
        """Sets the long_id of this DefectComment.


        :param long_id: The long_id of this DefectComment.  # noqa: E501
        :type: int
        """

        self._long_id = long_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DefectComment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DefectComment):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DefectComment):
            return True

        return self.to_dict() != other.to_dict()
