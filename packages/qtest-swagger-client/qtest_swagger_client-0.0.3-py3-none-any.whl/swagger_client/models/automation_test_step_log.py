# coding: utf-8

"""
    qTest Manager API Version 11.0.0 - 2023.6

    qTest Manager API Version 11.0.0 - 2023.6  # noqa: E501

    OpenAPI spec version: 11.0.0 - 2023.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class AutomationTestStepLog(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'links': 'list[Link]',
        'description': 'str',
        'expected_result': 'str',
        'actual_result': 'str',
        'custom_field_info': 'list[CustomFieldInfo]',
        'order': 'int',
        'status': 'str',
        'attachments': 'list[AttachmentResource]',
        'defect_pids': 'list[str]',
        'exe_date': 'datetime'
    }

    attribute_map = {
        'links': 'links',
        'description': 'description',
        'expected_result': 'expected_result',
        'actual_result': 'actual_result',
        'custom_field_info': 'customFieldInfo',
        'order': 'order',
        'status': 'status',
        'attachments': 'attachments',
        'defect_pids': 'defect_pids',
        'exe_date': 'exe_date'
    }

    def __init__(self, links=None, description=None, expected_result=None, actual_result=None, custom_field_info=None, order=None, status=None, attachments=None, defect_pids=None, exe_date=None, _configuration=None):  # noqa: E501
        """AutomationTestStepLog - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._links = None
        self._description = None
        self._expected_result = None
        self._actual_result = None
        self._custom_field_info = None
        self._order = None
        self._status = None
        self._attachments = None
        self._defect_pids = None
        self._exe_date = None
        self.discriminator = None

        if links is not None:
            self.links = links
        self.description = description
        self.expected_result = expected_result
        if actual_result is not None:
            self.actual_result = actual_result
        if custom_field_info is not None:
            self.custom_field_info = custom_field_info
        if order is not None:
            self.order = order
        if status is not None:
            self.status = status
        if attachments is not None:
            self.attachments = attachments
        if defect_pids is not None:
            self.defect_pids = defect_pids
        if exe_date is not None:
            self.exe_date = exe_date

    @property
    def links(self):
        """Gets the links of this AutomationTestStepLog.  # noqa: E501


        :return: The links of this AutomationTestStepLog.  # noqa: E501
        :rtype: list[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this AutomationTestStepLog.


        :param links: The links of this AutomationTestStepLog.  # noqa: E501
        :type: list[Link]
        """

        self._links = links

    @property
    def description(self):
        """Gets the description of this AutomationTestStepLog.  # noqa: E501

        Test Step Log's description  # noqa: E501

        :return: The description of this AutomationTestStepLog.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AutomationTestStepLog.

        Test Step Log's description  # noqa: E501

        :param description: The description of this AutomationTestStepLog.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def expected_result(self):
        """Gets the expected_result of this AutomationTestStepLog.  # noqa: E501

        Test Step Log's expected result  # noqa: E501

        :return: The expected_result of this AutomationTestStepLog.  # noqa: E501
        :rtype: str
        """
        return self._expected_result

    @expected_result.setter
    def expected_result(self, expected_result):
        """Sets the expected_result of this AutomationTestStepLog.

        Test Step Log's expected result  # noqa: E501

        :param expected_result: The expected_result of this AutomationTestStepLog.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and expected_result is None:
            raise ValueError("Invalid value for `expected_result`, must not be `None`")  # noqa: E501

        self._expected_result = expected_result

    @property
    def actual_result(self):
        """Gets the actual_result of this AutomationTestStepLog.  # noqa: E501

        Test Step Log's actual result  # noqa: E501

        :return: The actual_result of this AutomationTestStepLog.  # noqa: E501
        :rtype: str
        """
        return self._actual_result

    @actual_result.setter
    def actual_result(self, actual_result):
        """Sets the actual_result of this AutomationTestStepLog.

        Test Step Log's actual result  # noqa: E501

        :param actual_result: The actual_result of this AutomationTestStepLog.  # noqa: E501
        :type: str
        """

        self._actual_result = actual_result

    @property
    def custom_field_info(self):
        """Gets the custom_field_info of this AutomationTestStepLog.  # noqa: E501


        :return: The custom_field_info of this AutomationTestStepLog.  # noqa: E501
        :rtype: list[CustomFieldInfo]
        """
        return self._custom_field_info

    @custom_field_info.setter
    def custom_field_info(self, custom_field_info):
        """Sets the custom_field_info of this AutomationTestStepLog.


        :param custom_field_info: The custom_field_info of this AutomationTestStepLog.  # noqa: E501
        :type: list[CustomFieldInfo]
        """

        self._custom_field_info = custom_field_info

    @property
    def order(self):
        """Gets the order of this AutomationTestStepLog.  # noqa: E501

        Test Step Log's order  # noqa: E501

        :return: The order of this AutomationTestStepLog.  # noqa: E501
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this AutomationTestStepLog.

        Test Step Log's order  # noqa: E501

        :param order: The order of this AutomationTestStepLog.  # noqa: E501
        :type: int
        """

        self._order = order

    @property
    def status(self):
        """Gets the status of this AutomationTestStepLog.  # noqa: E501

        Test Step Log's status  # noqa: E501

        :return: The status of this AutomationTestStepLog.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AutomationTestStepLog.

        Test Step Log's status  # noqa: E501

        :param status: The status of this AutomationTestStepLog.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def attachments(self):
        """Gets the attachments of this AutomationTestStepLog.  # noqa: E501


        :return: The attachments of this AutomationTestStepLog.  # noqa: E501
        :rtype: list[AttachmentResource]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this AutomationTestStepLog.


        :param attachments: The attachments of this AutomationTestStepLog.  # noqa: E501
        :type: list[AttachmentResource]
        """

        self._attachments = attachments

    @property
    def defect_pids(self):
        """Gets the defect_pids of this AutomationTestStepLog.  # noqa: E501

        Defect Pids  # noqa: E501

        :return: The defect_pids of this AutomationTestStepLog.  # noqa: E501
        :rtype: list[str]
        """
        return self._defect_pids

    @defect_pids.setter
    def defect_pids(self, defect_pids):
        """Sets the defect_pids of this AutomationTestStepLog.

        Defect Pids  # noqa: E501

        :param defect_pids: The defect_pids of this AutomationTestStepLog.  # noqa: E501
        :type: list[str]
        """

        self._defect_pids = defect_pids

    @property
    def exe_date(self):
        """Gets the exe_date of this AutomationTestStepLog.  # noqa: E501

        Execution date  # noqa: E501

        :return: The exe_date of this AutomationTestStepLog.  # noqa: E501
        :rtype: datetime
        """
        return self._exe_date

    @exe_date.setter
    def exe_date(self, exe_date):
        """Sets the exe_date of this AutomationTestStepLog.

        Execution date  # noqa: E501

        :param exe_date: The exe_date of this AutomationTestStepLog.  # noqa: E501
        :type: datetime
        """

        self._exe_date = exe_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AutomationTestStepLog, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AutomationTestStepLog):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AutomationTestStepLog):
            return True

        return self.to_dict() != other.to_dict()
