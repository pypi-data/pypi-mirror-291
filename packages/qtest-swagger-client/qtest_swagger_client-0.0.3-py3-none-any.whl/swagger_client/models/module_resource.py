# coding: utf-8

"""
    qTest Manager API Version 11.0.0 - 2023.6

    qTest Manager API Version 11.0.0 - 2023.6  # noqa: E501

    OpenAPI spec version: 11.0.0 - 2023.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ModuleResource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'links': 'list[Link]',
        'id': 'int',
        'name': 'str',
        'order': 'int',
        'pid': 'str',
        'created_date': 'datetime',
        'last_modified_date': 'datetime',
        'parent_id': 'int',
        'description': 'str',
        'shared': 'bool',
        'projects_shared_to': 'list[int]',
        'children': 'list[ModuleResource]',
        'recursive': 'bool',
        'tosca_guid': 'str',
        'tosca_node_path': 'str',
        'tosca_state': 'str'
    }

    attribute_map = {
        'links': 'links',
        'id': 'id',
        'name': 'name',
        'order': 'order',
        'pid': 'pid',
        'created_date': 'created_date',
        'last_modified_date': 'last_modified_date',
        'parent_id': 'parent_id',
        'description': 'description',
        'shared': 'shared',
        'projects_shared_to': 'projects_shared_to',
        'children': 'children',
        'recursive': 'recursive',
        'tosca_guid': 'tosca_guid',
        'tosca_node_path': 'tosca_node_path',
        'tosca_state': 'tosca_state'
    }

    def __init__(self, links=None, id=None, name=None, order=None, pid=None, created_date=None, last_modified_date=None, parent_id=None, description=None, shared=False, projects_shared_to=None, children=None, recursive=False, tosca_guid=None, tosca_node_path=None, tosca_state=None, _configuration=None):  # noqa: E501
        """ModuleResource - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._links = None
        self._id = None
        self._name = None
        self._order = None
        self._pid = None
        self._created_date = None
        self._last_modified_date = None
        self._parent_id = None
        self._description = None
        self._shared = None
        self._projects_shared_to = None
        self._children = None
        self._recursive = None
        self._tosca_guid = None
        self._tosca_node_path = None
        self._tosca_state = None
        self.discriminator = None

        if links is not None:
            self.links = links
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if order is not None:
            self.order = order
        if pid is not None:
            self.pid = pid
        if created_date is not None:
            self.created_date = created_date
        if last_modified_date is not None:
            self.last_modified_date = last_modified_date
        if parent_id is not None:
            self.parent_id = parent_id
        if description is not None:
            self.description = description
        if shared is not None:
            self.shared = shared
        if projects_shared_to is not None:
            self.projects_shared_to = projects_shared_to
        if children is not None:
            self.children = children
        if recursive is not None:
            self.recursive = recursive
        if tosca_guid is not None:
            self.tosca_guid = tosca_guid
        if tosca_node_path is not None:
            self.tosca_node_path = tosca_node_path
        if tosca_state is not None:
            self.tosca_state = tosca_state

    @property
    def links(self):
        """Gets the links of this ModuleResource.  # noqa: E501


        :return: The links of this ModuleResource.  # noqa: E501
        :rtype: list[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this ModuleResource.


        :param links: The links of this ModuleResource.  # noqa: E501
        :type: list[Link]
        """

        self._links = links

    @property
    def id(self):
        """Gets the id of this ModuleResource.  # noqa: E501

        ID of the Module  # noqa: E501

        :return: The id of this ModuleResource.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ModuleResource.

        ID of the Module  # noqa: E501

        :param id: The id of this ModuleResource.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ModuleResource.  # noqa: E501

        Name of the Module  # noqa: E501

        :return: The name of this ModuleResource.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ModuleResource.

        Name of the Module  # noqa: E501

        :param name: The name of this ModuleResource.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                name is not None and len(name) > 500):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `500`")  # noqa: E501
        if (self._configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def order(self):
        """Gets the order of this ModuleResource.  # noqa: E501

        Display order of the Module  # noqa: E501

        :return: The order of this ModuleResource.  # noqa: E501
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this ModuleResource.

        Display order of the Module  # noqa: E501

        :param order: The order of this ModuleResource.  # noqa: E501
        :type: int
        """

        self._order = order

    @property
    def pid(self):
        """Gets the pid of this ModuleResource.  # noqa: E501

        PID of the Module  # noqa: E501

        :return: The pid of this ModuleResource.  # noqa: E501
        :rtype: str
        """
        return self._pid

    @pid.setter
    def pid(self, pid):
        """Sets the pid of this ModuleResource.

        PID of the Module  # noqa: E501

        :param pid: The pid of this ModuleResource.  # noqa: E501
        :type: str
        """

        self._pid = pid

    @property
    def created_date(self):
        """Gets the created_date of this ModuleResource.  # noqa: E501


        :return: The created_date of this ModuleResource.  # noqa: E501
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this ModuleResource.


        :param created_date: The created_date of this ModuleResource.  # noqa: E501
        :type: datetime
        """

        self._created_date = created_date

    @property
    def last_modified_date(self):
        """Gets the last_modified_date of this ModuleResource.  # noqa: E501


        :return: The last_modified_date of this ModuleResource.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified_date

    @last_modified_date.setter
    def last_modified_date(self, last_modified_date):
        """Sets the last_modified_date of this ModuleResource.


        :param last_modified_date: The last_modified_date of this ModuleResource.  # noqa: E501
        :type: datetime
        """

        self._last_modified_date = last_modified_date

    @property
    def parent_id(self):
        """Gets the parent_id of this ModuleResource.  # noqa: E501

        Parent Module of the Module  # noqa: E501

        :return: The parent_id of this ModuleResource.  # noqa: E501
        :rtype: int
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this ModuleResource.

        Parent Module of the Module  # noqa: E501

        :param parent_id: The parent_id of this ModuleResource.  # noqa: E501
        :type: int
        """

        self._parent_id = parent_id

    @property
    def description(self):
        """Gets the description of this ModuleResource.  # noqa: E501

        Description of the Module  # noqa: E501

        :return: The description of this ModuleResource.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ModuleResource.

        Description of the Module  # noqa: E501

        :param description: The description of this ModuleResource.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def shared(self):
        """Gets the shared of this ModuleResource.  # noqa: E501

        Is shared or not  # noqa: E501

        :return: The shared of this ModuleResource.  # noqa: E501
        :rtype: bool
        """
        return self._shared

    @shared.setter
    def shared(self, shared):
        """Sets the shared of this ModuleResource.

        Is shared or not  # noqa: E501

        :param shared: The shared of this ModuleResource.  # noqa: E501
        :type: bool
        """

        self._shared = shared

    @property
    def projects_shared_to(self):
        """Gets the projects_shared_to of this ModuleResource.  # noqa: E501


        :return: The projects_shared_to of this ModuleResource.  # noqa: E501
        :rtype: list[int]
        """
        return self._projects_shared_to

    @projects_shared_to.setter
    def projects_shared_to(self, projects_shared_to):
        """Sets the projects_shared_to of this ModuleResource.


        :param projects_shared_to: The projects_shared_to of this ModuleResource.  # noqa: E501
        :type: list[int]
        """

        self._projects_shared_to = projects_shared_to

    @property
    def children(self):
        """Gets the children of this ModuleResource.  # noqa: E501

        Arrays of child module  # noqa: E501

        :return: The children of this ModuleResource.  # noqa: E501
        :rtype: list[ModuleResource]
        """
        return self._children

    @children.setter
    def children(self, children):
        """Sets the children of this ModuleResource.

        Arrays of child module  # noqa: E501

        :param children: The children of this ModuleResource.  # noqa: E501
        :type: list[ModuleResource]
        """

        self._children = children

    @property
    def recursive(self):
        """Gets the recursive of this ModuleResource.  # noqa: E501


        :return: The recursive of this ModuleResource.  # noqa: E501
        :rtype: bool
        """
        return self._recursive

    @recursive.setter
    def recursive(self, recursive):
        """Sets the recursive of this ModuleResource.


        :param recursive: The recursive of this ModuleResource.  # noqa: E501
        :type: bool
        """

        self._recursive = recursive

    @property
    def tosca_guid(self):
        """Gets the tosca_guid of this ModuleResource.  # noqa: E501

        Tosca folder GUID. Use for creating Module and link with Tosca folder.  # noqa: E501

        :return: The tosca_guid of this ModuleResource.  # noqa: E501
        :rtype: str
        """
        return self._tosca_guid

    @tosca_guid.setter
    def tosca_guid(self, tosca_guid):
        """Sets the tosca_guid of this ModuleResource.

        Tosca folder GUID. Use for creating Module and link with Tosca folder.  # noqa: E501

        :param tosca_guid: The tosca_guid of this ModuleResource.  # noqa: E501
        :type: str
        """

        self._tosca_guid = tosca_guid

    @property
    def tosca_node_path(self):
        """Gets the tosca_node_path of this ModuleResource.  # noqa: E501

        Tosca folder node path. Use for creating Module and link with Tosca folder.  # noqa: E501

        :return: The tosca_node_path of this ModuleResource.  # noqa: E501
        :rtype: str
        """
        return self._tosca_node_path

    @tosca_node_path.setter
    def tosca_node_path(self, tosca_node_path):
        """Sets the tosca_node_path of this ModuleResource.

        Tosca folder node path. Use for creating Module and link with Tosca folder.  # noqa: E501

        :param tosca_node_path: The tosca_node_path of this ModuleResource.  # noqa: E501
        :type: str
        """

        self._tosca_node_path = tosca_node_path

    @property
    def tosca_state(self):
        """Gets the tosca_state of this ModuleResource.  # noqa: E501


        :return: The tosca_state of this ModuleResource.  # noqa: E501
        :rtype: str
        """
        return self._tosca_state

    @tosca_state.setter
    def tosca_state(self, tosca_state):
        """Sets the tosca_state of this ModuleResource.


        :param tosca_state: The tosca_state of this ModuleResource.  # noqa: E501
        :type: str
        """

        self._tosca_state = tosca_state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModuleResource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModuleResource):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ModuleResource):
            return True

        return self.to_dict() != other.to_dict()
