# coding: utf-8

"""
    qTest Manager API Version 11.0.0 - 2023.6

    qTest Manager API Version 11.0.0 - 2023.6  # noqa: E501

    OpenAPI spec version: 11.0.0 - 2023.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class LoggedUser(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'links': 'list[Link]',
        'id': 'int',
        'user_name': 'str',
        'past_usernames': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'client_id': 'int',
        'client_name': 'str',
        'client_site': 'str',
        'timezone_offset': 'str',
        'avatar': 'str',
        'access_admin_page': 'bool',
        'client_site_name': 'str',
        'package_type': 'str',
        'applications': 'list[AppDetail]',
        'support_links': 'dict(str, str)'
    }

    attribute_map = {
        'links': 'links',
        'id': 'id',
        'user_name': 'user_name',
        'past_usernames': 'past_usernames',
        'first_name': 'first_name',
        'last_name': 'last_name',
        'client_id': 'client_id',
        'client_name': 'client_name',
        'client_site': 'client_site',
        'timezone_offset': 'timezone_offset',
        'avatar': 'avatar',
        'access_admin_page': 'access_admin_page',
        'client_site_name': 'client_site_name',
        'package_type': 'package_type',
        'applications': 'applications',
        'support_links': 'support_links'
    }

    def __init__(self, links=None, id=None, user_name=None, past_usernames=None, first_name=None, last_name=None, client_id=None, client_name=None, client_site=None, timezone_offset=None, avatar=None, access_admin_page=False, client_site_name=None, package_type=None, applications=None, support_links=None, _configuration=None):  # noqa: E501
        """LoggedUser - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._links = None
        self._id = None
        self._user_name = None
        self._past_usernames = None
        self._first_name = None
        self._last_name = None
        self._client_id = None
        self._client_name = None
        self._client_site = None
        self._timezone_offset = None
        self._avatar = None
        self._access_admin_page = None
        self._client_site_name = None
        self._package_type = None
        self._applications = None
        self._support_links = None
        self.discriminator = None

        if links is not None:
            self.links = links
        if id is not None:
            self.id = id
        if user_name is not None:
            self.user_name = user_name
        if past_usernames is not None:
            self.past_usernames = past_usernames
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if client_id is not None:
            self.client_id = client_id
        if client_name is not None:
            self.client_name = client_name
        if client_site is not None:
            self.client_site = client_site
        if timezone_offset is not None:
            self.timezone_offset = timezone_offset
        if avatar is not None:
            self.avatar = avatar
        if access_admin_page is not None:
            self.access_admin_page = access_admin_page
        if client_site_name is not None:
            self.client_site_name = client_site_name
        if package_type is not None:
            self.package_type = package_type
        if applications is not None:
            self.applications = applications
        if support_links is not None:
            self.support_links = support_links

    @property
    def links(self):
        """Gets the links of this LoggedUser.  # noqa: E501


        :return: The links of this LoggedUser.  # noqa: E501
        :rtype: list[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this LoggedUser.


        :param links: The links of this LoggedUser.  # noqa: E501
        :type: list[Link]
        """

        self._links = links

    @property
    def id(self):
        """Gets the id of this LoggedUser.  # noqa: E501

        ID of the User  # noqa: E501

        :return: The id of this LoggedUser.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LoggedUser.

        ID of the User  # noqa: E501

        :param id: The id of this LoggedUser.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def user_name(self):
        """Gets the user_name of this LoggedUser.  # noqa: E501

        Login email of the User  # noqa: E501

        :return: The user_name of this LoggedUser.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this LoggedUser.

        Login email of the User  # noqa: E501

        :param user_name: The user_name of this LoggedUser.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def past_usernames(self):
        """Gets the past_usernames of this LoggedUser.  # noqa: E501


        :return: The past_usernames of this LoggedUser.  # noqa: E501
        :rtype: str
        """
        return self._past_usernames

    @past_usernames.setter
    def past_usernames(self, past_usernames):
        """Sets the past_usernames of this LoggedUser.


        :param past_usernames: The past_usernames of this LoggedUser.  # noqa: E501
        :type: str
        """

        self._past_usernames = past_usernames

    @property
    def first_name(self):
        """Gets the first_name of this LoggedUser.  # noqa: E501

        First name  # noqa: E501

        :return: The first_name of this LoggedUser.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this LoggedUser.

        First name  # noqa: E501

        :param first_name: The first_name of this LoggedUser.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this LoggedUser.  # noqa: E501

        Last name  # noqa: E501

        :return: The last_name of this LoggedUser.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this LoggedUser.

        Last name  # noqa: E501

        :param last_name: The last_name of this LoggedUser.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def client_id(self):
        """Gets the client_id of this LoggedUser.  # noqa: E501

        ID of qTest site that User logged in  # noqa: E501

        :return: The client_id of this LoggedUser.  # noqa: E501
        :rtype: int
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this LoggedUser.

        ID of qTest site that User logged in  # noqa: E501

        :param client_id: The client_id of this LoggedUser.  # noqa: E501
        :type: int
        """

        self._client_id = client_id

    @property
    def client_name(self):
        """Gets the client_name of this LoggedUser.  # noqa: E501

        qTest instance client site name  # noqa: E501

        :return: The client_name of this LoggedUser.  # noqa: E501
        :rtype: str
        """
        return self._client_name

    @client_name.setter
    def client_name(self, client_name):
        """Sets the client_name of this LoggedUser.

        qTest instance client site name  # noqa: E501

        :param client_name: The client_name of this LoggedUser.  # noqa: E501
        :type: str
        """

        self._client_name = client_name

    @property
    def client_site(self):
        """Gets the client_site of this LoggedUser.  # noqa: E501

        URL of qTest instance  # noqa: E501

        :return: The client_site of this LoggedUser.  # noqa: E501
        :rtype: str
        """
        return self._client_site

    @client_site.setter
    def client_site(self, client_site):
        """Sets the client_site of this LoggedUser.

        URL of qTest instance  # noqa: E501

        :param client_site: The client_site of this LoggedUser.  # noqa: E501
        :type: str
        """

        self._client_site = client_site

    @property
    def timezone_offset(self):
        """Gets the timezone_offset of this LoggedUser.  # noqa: E501


        :return: The timezone_offset of this LoggedUser.  # noqa: E501
        :rtype: str
        """
        return self._timezone_offset

    @timezone_offset.setter
    def timezone_offset(self, timezone_offset):
        """Sets the timezone_offset of this LoggedUser.


        :param timezone_offset: The timezone_offset of this LoggedUser.  # noqa: E501
        :type: str
        """

        self._timezone_offset = timezone_offset

    @property
    def avatar(self):
        """Gets the avatar of this LoggedUser.  # noqa: E501

        URL to User's Avatar  # noqa: E501

        :return: The avatar of this LoggedUser.  # noqa: E501
        :rtype: str
        """
        return self._avatar

    @avatar.setter
    def avatar(self, avatar):
        """Sets the avatar of this LoggedUser.

        URL to User's Avatar  # noqa: E501

        :param avatar: The avatar of this LoggedUser.  # noqa: E501
        :type: str
        """

        self._avatar = avatar

    @property
    def access_admin_page(self):
        """Gets the access_admin_page of this LoggedUser.  # noqa: E501

        Can access admin page or not  # noqa: E501

        :return: The access_admin_page of this LoggedUser.  # noqa: E501
        :rtype: bool
        """
        return self._access_admin_page

    @access_admin_page.setter
    def access_admin_page(self, access_admin_page):
        """Sets the access_admin_page of this LoggedUser.

        Can access admin page or not  # noqa: E501

        :param access_admin_page: The access_admin_page of this LoggedUser.  # noqa: E501
        :type: bool
        """

        self._access_admin_page = access_admin_page

    @property
    def client_site_name(self):
        """Gets the client_site_name of this LoggedUser.  # noqa: E501

        qTest instance sub domain name  # noqa: E501

        :return: The client_site_name of this LoggedUser.  # noqa: E501
        :rtype: str
        """
        return self._client_site_name

    @client_site_name.setter
    def client_site_name(self, client_site_name):
        """Sets the client_site_name of this LoggedUser.

        qTest instance sub domain name  # noqa: E501

        :param client_site_name: The client_site_name of this LoggedUser.  # noqa: E501
        :type: str
        """

        self._client_site_name = client_site_name

    @property
    def package_type(self):
        """Gets the package_type of this LoggedUser.  # noqa: E501

        Package type  # noqa: E501

        :return: The package_type of this LoggedUser.  # noqa: E501
        :rtype: str
        """
        return self._package_type

    @package_type.setter
    def package_type(self, package_type):
        """Sets the package_type of this LoggedUser.

        Package type  # noqa: E501

        :param package_type: The package_type of this LoggedUser.  # noqa: E501
        :type: str
        """

        self._package_type = package_type

    @property
    def applications(self):
        """Gets the applications of this LoggedUser.  # noqa: E501

        List qTest products which User can access  # noqa: E501

        :return: The applications of this LoggedUser.  # noqa: E501
        :rtype: list[AppDetail]
        """
        return self._applications

    @applications.setter
    def applications(self, applications):
        """Sets the applications of this LoggedUser.

        List qTest products which User can access  # noqa: E501

        :param applications: The applications of this LoggedUser.  # noqa: E501
        :type: list[AppDetail]
        """

        self._applications = applications

    @property
    def support_links(self):
        """Gets the support_links of this LoggedUser.  # noqa: E501

        Arrays of Supports link  # noqa: E501

        :return: The support_links of this LoggedUser.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._support_links

    @support_links.setter
    def support_links(self, support_links):
        """Sets the support_links of this LoggedUser.

        Arrays of Supports link  # noqa: E501

        :param support_links: The support_links of this LoggedUser.  # noqa: E501
        :type: dict(str, str)
        """

        self._support_links = support_links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LoggedUser, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LoggedUser):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LoggedUser):
            return True

        return self.to_dict() != other.to_dict()
