# coding: utf-8

"""
    qTest Manager API Version 11.0.0 - 2023.6

    qTest Manager API Version 11.0.0 - 2023.6  # noqa: E501

    OpenAPI spec version: 11.0.0 - 2023.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class CustomFieldInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'value': 'str',
        'object_id': 'int',
        'type': 'str',
        'name': 'str',
        'property_editor_component': 'bool',
        'strip_html_value': 'str'
    }

    attribute_map = {
        'id': 'id',
        'value': 'value',
        'object_id': 'objectId',
        'type': 'type',
        'name': 'name',
        'property_editor_component': 'propertyEditorComponent',
        'strip_html_value': 'stripHTMLValue'
    }

    def __init__(self, id=None, value=None, object_id=None, type=None, name=None, property_editor_component=False, strip_html_value=None, _configuration=None):  # noqa: E501
        """CustomFieldInfo - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._value = None
        self._object_id = None
        self._type = None
        self._name = None
        self._property_editor_component = None
        self._strip_html_value = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if value is not None:
            self.value = value
        if object_id is not None:
            self.object_id = object_id
        if type is not None:
            self.type = type
        if name is not None:
            self.name = name
        if property_editor_component is not None:
            self.property_editor_component = property_editor_component
        if strip_html_value is not None:
            self.strip_html_value = strip_html_value

    @property
    def id(self):
        """Gets the id of this CustomFieldInfo.  # noqa: E501


        :return: The id of this CustomFieldInfo.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CustomFieldInfo.


        :param id: The id of this CustomFieldInfo.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def value(self):
        """Gets the value of this CustomFieldInfo.  # noqa: E501


        :return: The value of this CustomFieldInfo.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this CustomFieldInfo.


        :param value: The value of this CustomFieldInfo.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def object_id(self):
        """Gets the object_id of this CustomFieldInfo.  # noqa: E501


        :return: The object_id of this CustomFieldInfo.  # noqa: E501
        :rtype: int
        """
        return self._object_id

    @object_id.setter
    def object_id(self, object_id):
        """Sets the object_id of this CustomFieldInfo.


        :param object_id: The object_id of this CustomFieldInfo.  # noqa: E501
        :type: int
        """

        self._object_id = object_id

    @property
    def type(self):
        """Gets the type of this CustomFieldInfo.  # noqa: E501


        :return: The type of this CustomFieldInfo.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CustomFieldInfo.


        :param type: The type of this CustomFieldInfo.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def name(self):
        """Gets the name of this CustomFieldInfo.  # noqa: E501


        :return: The name of this CustomFieldInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CustomFieldInfo.


        :param name: The name of this CustomFieldInfo.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def property_editor_component(self):
        """Gets the property_editor_component of this CustomFieldInfo.  # noqa: E501


        :return: The property_editor_component of this CustomFieldInfo.  # noqa: E501
        :rtype: bool
        """
        return self._property_editor_component

    @property_editor_component.setter
    def property_editor_component(self, property_editor_component):
        """Sets the property_editor_component of this CustomFieldInfo.


        :param property_editor_component: The property_editor_component of this CustomFieldInfo.  # noqa: E501
        :type: bool
        """

        self._property_editor_component = property_editor_component

    @property
    def strip_html_value(self):
        """Gets the strip_html_value of this CustomFieldInfo.  # noqa: E501


        :return: The strip_html_value of this CustomFieldInfo.  # noqa: E501
        :rtype: str
        """
        return self._strip_html_value

    @strip_html_value.setter
    def strip_html_value(self, strip_html_value):
        """Sets the strip_html_value of this CustomFieldInfo.


        :param strip_html_value: The strip_html_value of this CustomFieldInfo.  # noqa: E501
        :type: str
        """

        self._strip_html_value = strip_html_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomFieldInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomFieldInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CustomFieldInfo):
            return True

        return self.to_dict() != other.to_dict()
