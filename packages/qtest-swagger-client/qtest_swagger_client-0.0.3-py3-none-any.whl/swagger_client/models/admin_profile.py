# coding: utf-8

"""
    qTest Manager API Version 11.0.0 - 2023.6

    qTest Manager API Version 11.0.0 - 2023.6  # noqa: E501

    OpenAPI spec version: 11.0.0 - 2023.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class AdminProfile(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_id': 'int',
        'create_project': 'bool',
        'edit_project': 'bool',
        'archive_project': 'bool',
        'list_project': 'bool',
        'manage_client_user': 'bool',
        'edit_user_profile': 'bool',
        'view_user_profile': 'bool',
        'manage_client_info': 'bool',
        'manage_system_conf': 'bool',
        'site_level_field': 'bool',
        'manage_user_group': 'bool',
        'insight_viewer': 'bool',
        'insight_editor': 'bool',
        'pulse_access': 'bool',
        'launch_access': 'bool',
        'analytics_viewer': 'bool'
    }

    attribute_map = {
        'user_id': 'user_id',
        'create_project': 'create_project',
        'edit_project': 'edit_project',
        'archive_project': 'archive_project',
        'list_project': 'list_project',
        'manage_client_user': 'manage_client_user',
        'edit_user_profile': 'edit_user_profile',
        'view_user_profile': 'view_user_profile',
        'manage_client_info': 'manage_client_info',
        'manage_system_conf': 'manage_system_conf',
        'site_level_field': 'site_level_field',
        'manage_user_group': 'manage_user_group',
        'insight_viewer': 'insight_viewer',
        'insight_editor': 'insight_editor',
        'pulse_access': 'pulse_access',
        'launch_access': 'launch_access',
        'analytics_viewer': 'analytics_viewer'
    }

    def __init__(self, user_id=None, create_project=False, edit_project=False, archive_project=False, list_project=False, manage_client_user=False, edit_user_profile=False, view_user_profile=False, manage_client_info=False, manage_system_conf=False, site_level_field=False, manage_user_group=False, insight_viewer=False, insight_editor=False, pulse_access=False, launch_access=False, analytics_viewer=False, _configuration=None):  # noqa: E501
        """AdminProfile - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._user_id = None
        self._create_project = None
        self._edit_project = None
        self._archive_project = None
        self._list_project = None
        self._manage_client_user = None
        self._edit_user_profile = None
        self._view_user_profile = None
        self._manage_client_info = None
        self._manage_system_conf = None
        self._site_level_field = None
        self._manage_user_group = None
        self._insight_viewer = None
        self._insight_editor = None
        self._pulse_access = None
        self._launch_access = None
        self._analytics_viewer = None
        self.discriminator = None

        if user_id is not None:
            self.user_id = user_id
        if create_project is not None:
            self.create_project = create_project
        if edit_project is not None:
            self.edit_project = edit_project
        if archive_project is not None:
            self.archive_project = archive_project
        if list_project is not None:
            self.list_project = list_project
        if manage_client_user is not None:
            self.manage_client_user = manage_client_user
        if edit_user_profile is not None:
            self.edit_user_profile = edit_user_profile
        if view_user_profile is not None:
            self.view_user_profile = view_user_profile
        if manage_client_info is not None:
            self.manage_client_info = manage_client_info
        if manage_system_conf is not None:
            self.manage_system_conf = manage_system_conf
        if site_level_field is not None:
            self.site_level_field = site_level_field
        if manage_user_group is not None:
            self.manage_user_group = manage_user_group
        if insight_viewer is not None:
            self.insight_viewer = insight_viewer
        if insight_editor is not None:
            self.insight_editor = insight_editor
        if pulse_access is not None:
            self.pulse_access = pulse_access
        if launch_access is not None:
            self.launch_access = launch_access
        if analytics_viewer is not None:
            self.analytics_viewer = analytics_viewer

    @property
    def user_id(self):
        """Gets the user_id of this AdminProfile.  # noqa: E501

        ID of the user  # noqa: E501

        :return: The user_id of this AdminProfile.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this AdminProfile.

        ID of the user  # noqa: E501

        :param user_id: The user_id of this AdminProfile.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def create_project(self):
        """Gets the create_project of this AdminProfile.  # noqa: E501

        Has permission on create Project  # noqa: E501

        :return: The create_project of this AdminProfile.  # noqa: E501
        :rtype: bool
        """
        return self._create_project

    @create_project.setter
    def create_project(self, create_project):
        """Sets the create_project of this AdminProfile.

        Has permission on create Project  # noqa: E501

        :param create_project: The create_project of this AdminProfile.  # noqa: E501
        :type: bool
        """

        self._create_project = create_project

    @property
    def edit_project(self):
        """Gets the edit_project of this AdminProfile.  # noqa: E501

        Has permission on edit Project  # noqa: E501

        :return: The edit_project of this AdminProfile.  # noqa: E501
        :rtype: bool
        """
        return self._edit_project

    @edit_project.setter
    def edit_project(self, edit_project):
        """Sets the edit_project of this AdminProfile.

        Has permission on edit Project  # noqa: E501

        :param edit_project: The edit_project of this AdminProfile.  # noqa: E501
        :type: bool
        """

        self._edit_project = edit_project

    @property
    def archive_project(self):
        """Gets the archive_project of this AdminProfile.  # noqa: E501

        Has permission on archive Project  # noqa: E501

        :return: The archive_project of this AdminProfile.  # noqa: E501
        :rtype: bool
        """
        return self._archive_project

    @archive_project.setter
    def archive_project(self, archive_project):
        """Sets the archive_project of this AdminProfile.

        Has permission on archive Project  # noqa: E501

        :param archive_project: The archive_project of this AdminProfile.  # noqa: E501
        :type: bool
        """

        self._archive_project = archive_project

    @property
    def list_project(self):
        """Gets the list_project of this AdminProfile.  # noqa: E501

        Has permission on view Project  # noqa: E501

        :return: The list_project of this AdminProfile.  # noqa: E501
        :rtype: bool
        """
        return self._list_project

    @list_project.setter
    def list_project(self, list_project):
        """Sets the list_project of this AdminProfile.

        Has permission on view Project  # noqa: E501

        :param list_project: The list_project of this AdminProfile.  # noqa: E501
        :type: bool
        """

        self._list_project = list_project

    @property
    def manage_client_user(self):
        """Gets the manage_client_user of this AdminProfile.  # noqa: E501

        Has permission on Invite/Edit Users  # noqa: E501

        :return: The manage_client_user of this AdminProfile.  # noqa: E501
        :rtype: bool
        """
        return self._manage_client_user

    @manage_client_user.setter
    def manage_client_user(self, manage_client_user):
        """Sets the manage_client_user of this AdminProfile.

        Has permission on Invite/Edit Users  # noqa: E501

        :param manage_client_user: The manage_client_user of this AdminProfile.  # noqa: E501
        :type: bool
        """

        self._manage_client_user = manage_client_user

    @property
    def edit_user_profile(self):
        """Gets the edit_user_profile of this AdminProfile.  # noqa: E501

        Has permission on edit Profiles  # noqa: E501

        :return: The edit_user_profile of this AdminProfile.  # noqa: E501
        :rtype: bool
        """
        return self._edit_user_profile

    @edit_user_profile.setter
    def edit_user_profile(self, edit_user_profile):
        """Sets the edit_user_profile of this AdminProfile.

        Has permission on edit Profiles  # noqa: E501

        :param edit_user_profile: The edit_user_profile of this AdminProfile.  # noqa: E501
        :type: bool
        """

        self._edit_user_profile = edit_user_profile

    @property
    def view_user_profile(self):
        """Gets the view_user_profile of this AdminProfile.  # noqa: E501

        Has permission on view Profiles  # noqa: E501

        :return: The view_user_profile of this AdminProfile.  # noqa: E501
        :rtype: bool
        """
        return self._view_user_profile

    @view_user_profile.setter
    def view_user_profile(self, view_user_profile):
        """Sets the view_user_profile of this AdminProfile.

        Has permission on view Profiles  # noqa: E501

        :param view_user_profile: The view_user_profile of this AdminProfile.  # noqa: E501
        :type: bool
        """

        self._view_user_profile = view_user_profile

    @property
    def manage_client_info(self):
        """Gets the manage_client_info of this AdminProfile.  # noqa: E501

        Has permission on update Company's information  # noqa: E501

        :return: The manage_client_info of this AdminProfile.  # noqa: E501
        :rtype: bool
        """
        return self._manage_client_info

    @manage_client_info.setter
    def manage_client_info(self, manage_client_info):
        """Sets the manage_client_info of this AdminProfile.

        Has permission on update Company's information  # noqa: E501

        :param manage_client_info: The manage_client_info of this AdminProfile.  # noqa: E501
        :type: bool
        """

        self._manage_client_info = manage_client_info

    @property
    def manage_system_conf(self):
        """Gets the manage_system_conf of this AdminProfile.  # noqa: E501

        Has permission on manage System configuration  # noqa: E501

        :return: The manage_system_conf of this AdminProfile.  # noqa: E501
        :rtype: bool
        """
        return self._manage_system_conf

    @manage_system_conf.setter
    def manage_system_conf(self, manage_system_conf):
        """Sets the manage_system_conf of this AdminProfile.

        Has permission on manage System configuration  # noqa: E501

        :param manage_system_conf: The manage_system_conf of this AdminProfile.  # noqa: E501
        :type: bool
        """

        self._manage_system_conf = manage_system_conf

    @property
    def site_level_field(self):
        """Gets the site_level_field of this AdminProfile.  # noqa: E501

        Has permission on manage site level field setting  # noqa: E501

        :return: The site_level_field of this AdminProfile.  # noqa: E501
        :rtype: bool
        """
        return self._site_level_field

    @site_level_field.setter
    def site_level_field(self, site_level_field):
        """Sets the site_level_field of this AdminProfile.

        Has permission on manage site level field setting  # noqa: E501

        :param site_level_field: The site_level_field of this AdminProfile.  # noqa: E501
        :type: bool
        """

        self._site_level_field = site_level_field

    @property
    def manage_user_group(self):
        """Gets the manage_user_group of this AdminProfile.  # noqa: E501


        :return: The manage_user_group of this AdminProfile.  # noqa: E501
        :rtype: bool
        """
        return self._manage_user_group

    @manage_user_group.setter
    def manage_user_group(self, manage_user_group):
        """Sets the manage_user_group of this AdminProfile.


        :param manage_user_group: The manage_user_group of this AdminProfile.  # noqa: E501
        :type: bool
        """

        self._manage_user_group = manage_user_group

    @property
    def insight_viewer(self):
        """Gets the insight_viewer of this AdminProfile.  # noqa: E501


        :return: The insight_viewer of this AdminProfile.  # noqa: E501
        :rtype: bool
        """
        return self._insight_viewer

    @insight_viewer.setter
    def insight_viewer(self, insight_viewer):
        """Sets the insight_viewer of this AdminProfile.


        :param insight_viewer: The insight_viewer of this AdminProfile.  # noqa: E501
        :type: bool
        """

        self._insight_viewer = insight_viewer

    @property
    def insight_editor(self):
        """Gets the insight_editor of this AdminProfile.  # noqa: E501


        :return: The insight_editor of this AdminProfile.  # noqa: E501
        :rtype: bool
        """
        return self._insight_editor

    @insight_editor.setter
    def insight_editor(self, insight_editor):
        """Sets the insight_editor of this AdminProfile.


        :param insight_editor: The insight_editor of this AdminProfile.  # noqa: E501
        :type: bool
        """

        self._insight_editor = insight_editor

    @property
    def pulse_access(self):
        """Gets the pulse_access of this AdminProfile.  # noqa: E501


        :return: The pulse_access of this AdminProfile.  # noqa: E501
        :rtype: bool
        """
        return self._pulse_access

    @pulse_access.setter
    def pulse_access(self, pulse_access):
        """Sets the pulse_access of this AdminProfile.


        :param pulse_access: The pulse_access of this AdminProfile.  # noqa: E501
        :type: bool
        """

        self._pulse_access = pulse_access

    @property
    def launch_access(self):
        """Gets the launch_access of this AdminProfile.  # noqa: E501


        :return: The launch_access of this AdminProfile.  # noqa: E501
        :rtype: bool
        """
        return self._launch_access

    @launch_access.setter
    def launch_access(self, launch_access):
        """Sets the launch_access of this AdminProfile.


        :param launch_access: The launch_access of this AdminProfile.  # noqa: E501
        :type: bool
        """

        self._launch_access = launch_access

    @property
    def analytics_viewer(self):
        """Gets the analytics_viewer of this AdminProfile.  # noqa: E501


        :return: The analytics_viewer of this AdminProfile.  # noqa: E501
        :rtype: bool
        """
        return self._analytics_viewer

    @analytics_viewer.setter
    def analytics_viewer(self, analytics_viewer):
        """Sets the analytics_viewer of this AdminProfile.


        :param analytics_viewer: The analytics_viewer of this AdminProfile.  # noqa: E501
        :type: bool
        """

        self._analytics_viewer = analytics_viewer

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AdminProfile, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdminProfile):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AdminProfile):
            return True

        return self.to_dict() != other.to_dict()
