# coding: utf-8

"""
    qTest Manager API Version 11.0.0 - 2023.6

    qTest Manager API Version 11.0.0 - 2023.6  # noqa: E501

    OpenAPI spec version: 11.0.0 - 2023.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Defect(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'creator_id': 'int',
        'created_date': 'datetime',
        'last_modified_user_id': 'int',
        'last_modified_date': 'datetime',
        'display_name': 'str',
        'display_description': 'str',
        'id': 'int',
        'pid': 'int',
        'created_user_id': 'int',
        'client_id': 'int',
        'project_id': 'int',
        'summary': 'str',
        'description': 'str',
        'type_id': 'int',
        'type': 'LookUp',
        'assigned_user_id': 'int',
        'status_id': 'int',
        'previous_status_id': 'int',
        'severity_id': 'int',
        'priority_id': 'int',
        'affected_release_id': 'int',
        'affected_build_id': 'int',
        'fixed_release_id': 'int',
        'fixed_build_id': 'int',
        'target_release_id': 'int',
        'target_build_id': 'int',
        'target_date': 'datetime',
        'closed_date': 'datetime',
        'reason_id': 'int',
        'root_cause_id': 'int',
        'category_id': 'int',
        'project_module_id': 'int',
        'source_defect_id': 'int',
        'environment_id': 'int',
        'comments': 'list[DefectComment]',
        'status': 'LookUp',
        'draft': 'bool',
        'index_flag': 'bool',
        'external_issue_id': 'str',
        'connection_id': 'int',
        'external_project_id': 'str',
        'external_issue_summary': 'str',
        'external_issue_status': 'str',
        'url': 'str',
        'external_issue_type': 'str',
        'external_issue_unique_id': 'str',
        'unlinked_defect': 'bool',
        'name': 'str',
        'result_type': 'str',
        'object_type': 'int',
        'full_id': 'str',
        'parent_artifact_id': 'int',
        'parent_object_type': 'int',
        'result_name': 'str',
        'status_name': 'str',
        'pid_with_prefix': 'str',
        'deleted': 'bool',
        'obj_order': 'int',
        'fixed_release_build_id': 'str',
        'target_release_build_id': 'str',
        'affected_release_build_id': 'str',
        'result_description': 'str',
        'short_result_type': 'str',
        'artifact_type': 'int',
        'custom_field_value': 'str',
        'automation': 'bool',
        'long_id': 'int',
        'tosca': 'bool',
        'auto_test_case': 'bool',
        'approved': 'bool',
        'create_date_time_string': 'str'
    }

    attribute_map = {
        'creator_id': 'creatorId',
        'created_date': 'createdDate',
        'last_modified_user_id': 'lastModifiedUserId',
        'last_modified_date': 'lastModifiedDate',
        'display_name': 'displayName',
        'display_description': 'displayDescription',
        'id': 'id',
        'pid': 'pid',
        'created_user_id': 'createdUserId',
        'client_id': 'clientId',
        'project_id': 'projectId',
        'summary': 'summary',
        'description': 'description',
        'type_id': 'typeId',
        'type': 'type',
        'assigned_user_id': 'assignedUserId',
        'status_id': 'statusId',
        'previous_status_id': 'previousStatusId',
        'severity_id': 'severityId',
        'priority_id': 'priorityId',
        'affected_release_id': 'affectedReleaseId',
        'affected_build_id': 'affectedBuildId',
        'fixed_release_id': 'fixedReleaseId',
        'fixed_build_id': 'fixedBuildId',
        'target_release_id': 'targetReleaseId',
        'target_build_id': 'targetBuildId',
        'target_date': 'targetDate',
        'closed_date': 'closedDate',
        'reason_id': 'reasonId',
        'root_cause_id': 'rootCauseId',
        'category_id': 'categoryId',
        'project_module_id': 'projectModuleId',
        'source_defect_id': 'sourceDefectId',
        'environment_id': 'environmentId',
        'comments': 'comments',
        'status': 'status',
        'draft': 'draft',
        'index_flag': 'indexFlag',
        'external_issue_id': 'externalIssueId',
        'connection_id': 'connectionId',
        'external_project_id': 'externalProjectId',
        'external_issue_summary': 'externalIssueSummary',
        'external_issue_status': 'externalIssueStatus',
        'url': 'url',
        'external_issue_type': 'externalIssueType',
        'external_issue_unique_id': 'externalIssueUniqueId',
        'unlinked_defect': 'unlinkedDefect',
        'name': 'name',
        'result_type': 'resultType',
        'object_type': 'objectType',
        'full_id': 'fullId',
        'parent_artifact_id': 'parentArtifactId',
        'parent_object_type': 'parentObjectType',
        'result_name': 'resultName',
        'status_name': 'statusName',
        'pid_with_prefix': 'pidWithPrefix',
        'deleted': 'deleted',
        'obj_order': 'objOrder',
        'fixed_release_build_id': 'fixedReleaseBuildId',
        'target_release_build_id': 'targetReleaseBuildId',
        'affected_release_build_id': 'affectedReleaseBuildId',
        'result_description': 'resultDescription',
        'short_result_type': 'shortResultType',
        'artifact_type': 'artifactType',
        'custom_field_value': 'customFieldValue',
        'automation': 'automation',
        'long_id': 'longId',
        'tosca': 'tosca',
        'auto_test_case': 'autoTestCase',
        'approved': 'approved',
        'create_date_time_string': 'createDateTimeString'
    }

    def __init__(self, creator_id=None, created_date=None, last_modified_user_id=None, last_modified_date=None, display_name=None, display_description=None, id=None, pid=None, created_user_id=None, client_id=None, project_id=None, summary=None, description=None, type_id=None, type=None, assigned_user_id=None, status_id=None, previous_status_id=None, severity_id=None, priority_id=None, affected_release_id=None, affected_build_id=None, fixed_release_id=None, fixed_build_id=None, target_release_id=None, target_build_id=None, target_date=None, closed_date=None, reason_id=None, root_cause_id=None, category_id=None, project_module_id=None, source_defect_id=None, environment_id=None, comments=None, status=None, draft=False, index_flag=False, external_issue_id=None, connection_id=None, external_project_id=None, external_issue_summary=None, external_issue_status=None, url=None, external_issue_type=None, external_issue_unique_id=None, unlinked_defect=False, name=None, result_type=None, object_type=None, full_id=None, parent_artifact_id=None, parent_object_type=None, result_name=None, status_name=None, pid_with_prefix=None, deleted=False, obj_order=None, fixed_release_build_id=None, target_release_build_id=None, affected_release_build_id=None, result_description=None, short_result_type=None, artifact_type=None, custom_field_value=None, automation=False, long_id=None, tosca=False, auto_test_case=False, approved=False, create_date_time_string=None, _configuration=None):  # noqa: E501
        """Defect - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._creator_id = None
        self._created_date = None
        self._last_modified_user_id = None
        self._last_modified_date = None
        self._display_name = None
        self._display_description = None
        self._id = None
        self._pid = None
        self._created_user_id = None
        self._client_id = None
        self._project_id = None
        self._summary = None
        self._description = None
        self._type_id = None
        self._type = None
        self._assigned_user_id = None
        self._status_id = None
        self._previous_status_id = None
        self._severity_id = None
        self._priority_id = None
        self._affected_release_id = None
        self._affected_build_id = None
        self._fixed_release_id = None
        self._fixed_build_id = None
        self._target_release_id = None
        self._target_build_id = None
        self._target_date = None
        self._closed_date = None
        self._reason_id = None
        self._root_cause_id = None
        self._category_id = None
        self._project_module_id = None
        self._source_defect_id = None
        self._environment_id = None
        self._comments = None
        self._status = None
        self._draft = None
        self._index_flag = None
        self._external_issue_id = None
        self._connection_id = None
        self._external_project_id = None
        self._external_issue_summary = None
        self._external_issue_status = None
        self._url = None
        self._external_issue_type = None
        self._external_issue_unique_id = None
        self._unlinked_defect = None
        self._name = None
        self._result_type = None
        self._object_type = None
        self._full_id = None
        self._parent_artifact_id = None
        self._parent_object_type = None
        self._result_name = None
        self._status_name = None
        self._pid_with_prefix = None
        self._deleted = None
        self._obj_order = None
        self._fixed_release_build_id = None
        self._target_release_build_id = None
        self._affected_release_build_id = None
        self._result_description = None
        self._short_result_type = None
        self._artifact_type = None
        self._custom_field_value = None
        self._automation = None
        self._long_id = None
        self._tosca = None
        self._auto_test_case = None
        self._approved = None
        self._create_date_time_string = None
        self.discriminator = None

        if creator_id is not None:
            self.creator_id = creator_id
        if created_date is not None:
            self.created_date = created_date
        if last_modified_user_id is not None:
            self.last_modified_user_id = last_modified_user_id
        if last_modified_date is not None:
            self.last_modified_date = last_modified_date
        if display_name is not None:
            self.display_name = display_name
        if display_description is not None:
            self.display_description = display_description
        if id is not None:
            self.id = id
        if pid is not None:
            self.pid = pid
        if created_user_id is not None:
            self.created_user_id = created_user_id
        if client_id is not None:
            self.client_id = client_id
        if project_id is not None:
            self.project_id = project_id
        if summary is not None:
            self.summary = summary
        if description is not None:
            self.description = description
        if type_id is not None:
            self.type_id = type_id
        if type is not None:
            self.type = type
        if assigned_user_id is not None:
            self.assigned_user_id = assigned_user_id
        if status_id is not None:
            self.status_id = status_id
        if previous_status_id is not None:
            self.previous_status_id = previous_status_id
        if severity_id is not None:
            self.severity_id = severity_id
        if priority_id is not None:
            self.priority_id = priority_id
        if affected_release_id is not None:
            self.affected_release_id = affected_release_id
        if affected_build_id is not None:
            self.affected_build_id = affected_build_id
        if fixed_release_id is not None:
            self.fixed_release_id = fixed_release_id
        if fixed_build_id is not None:
            self.fixed_build_id = fixed_build_id
        if target_release_id is not None:
            self.target_release_id = target_release_id
        if target_build_id is not None:
            self.target_build_id = target_build_id
        if target_date is not None:
            self.target_date = target_date
        if closed_date is not None:
            self.closed_date = closed_date
        if reason_id is not None:
            self.reason_id = reason_id
        if root_cause_id is not None:
            self.root_cause_id = root_cause_id
        if category_id is not None:
            self.category_id = category_id
        if project_module_id is not None:
            self.project_module_id = project_module_id
        if source_defect_id is not None:
            self.source_defect_id = source_defect_id
        if environment_id is not None:
            self.environment_id = environment_id
        if comments is not None:
            self.comments = comments
        if status is not None:
            self.status = status
        if draft is not None:
            self.draft = draft
        if index_flag is not None:
            self.index_flag = index_flag
        if external_issue_id is not None:
            self.external_issue_id = external_issue_id
        if connection_id is not None:
            self.connection_id = connection_id
        if external_project_id is not None:
            self.external_project_id = external_project_id
        if external_issue_summary is not None:
            self.external_issue_summary = external_issue_summary
        if external_issue_status is not None:
            self.external_issue_status = external_issue_status
        if url is not None:
            self.url = url
        if external_issue_type is not None:
            self.external_issue_type = external_issue_type
        if external_issue_unique_id is not None:
            self.external_issue_unique_id = external_issue_unique_id
        if unlinked_defect is not None:
            self.unlinked_defect = unlinked_defect
        if name is not None:
            self.name = name
        if result_type is not None:
            self.result_type = result_type
        if object_type is not None:
            self.object_type = object_type
        if full_id is not None:
            self.full_id = full_id
        if parent_artifact_id is not None:
            self.parent_artifact_id = parent_artifact_id
        if parent_object_type is not None:
            self.parent_object_type = parent_object_type
        if result_name is not None:
            self.result_name = result_name
        if status_name is not None:
            self.status_name = status_name
        if pid_with_prefix is not None:
            self.pid_with_prefix = pid_with_prefix
        if deleted is not None:
            self.deleted = deleted
        if obj_order is not None:
            self.obj_order = obj_order
        if fixed_release_build_id is not None:
            self.fixed_release_build_id = fixed_release_build_id
        if target_release_build_id is not None:
            self.target_release_build_id = target_release_build_id
        if affected_release_build_id is not None:
            self.affected_release_build_id = affected_release_build_id
        if result_description is not None:
            self.result_description = result_description
        if short_result_type is not None:
            self.short_result_type = short_result_type
        if artifact_type is not None:
            self.artifact_type = artifact_type
        if custom_field_value is not None:
            self.custom_field_value = custom_field_value
        if automation is not None:
            self.automation = automation
        if long_id is not None:
            self.long_id = long_id
        if tosca is not None:
            self.tosca = tosca
        if auto_test_case is not None:
            self.auto_test_case = auto_test_case
        if approved is not None:
            self.approved = approved
        if create_date_time_string is not None:
            self.create_date_time_string = create_date_time_string

    @property
    def creator_id(self):
        """Gets the creator_id of this Defect.  # noqa: E501


        :return: The creator_id of this Defect.  # noqa: E501
        :rtype: int
        """
        return self._creator_id

    @creator_id.setter
    def creator_id(self, creator_id):
        """Sets the creator_id of this Defect.


        :param creator_id: The creator_id of this Defect.  # noqa: E501
        :type: int
        """

        self._creator_id = creator_id

    @property
    def created_date(self):
        """Gets the created_date of this Defect.  # noqa: E501


        :return: The created_date of this Defect.  # noqa: E501
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this Defect.


        :param created_date: The created_date of this Defect.  # noqa: E501
        :type: datetime
        """

        self._created_date = created_date

    @property
    def last_modified_user_id(self):
        """Gets the last_modified_user_id of this Defect.  # noqa: E501


        :return: The last_modified_user_id of this Defect.  # noqa: E501
        :rtype: int
        """
        return self._last_modified_user_id

    @last_modified_user_id.setter
    def last_modified_user_id(self, last_modified_user_id):
        """Sets the last_modified_user_id of this Defect.


        :param last_modified_user_id: The last_modified_user_id of this Defect.  # noqa: E501
        :type: int
        """

        self._last_modified_user_id = last_modified_user_id

    @property
    def last_modified_date(self):
        """Gets the last_modified_date of this Defect.  # noqa: E501


        :return: The last_modified_date of this Defect.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified_date

    @last_modified_date.setter
    def last_modified_date(self, last_modified_date):
        """Sets the last_modified_date of this Defect.


        :param last_modified_date: The last_modified_date of this Defect.  # noqa: E501
        :type: datetime
        """

        self._last_modified_date = last_modified_date

    @property
    def display_name(self):
        """Gets the display_name of this Defect.  # noqa: E501


        :return: The display_name of this Defect.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Defect.


        :param display_name: The display_name of this Defect.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def display_description(self):
        """Gets the display_description of this Defect.  # noqa: E501


        :return: The display_description of this Defect.  # noqa: E501
        :rtype: str
        """
        return self._display_description

    @display_description.setter
    def display_description(self, display_description):
        """Sets the display_description of this Defect.


        :param display_description: The display_description of this Defect.  # noqa: E501
        :type: str
        """

        self._display_description = display_description

    @property
    def id(self):
        """Gets the id of this Defect.  # noqa: E501


        :return: The id of this Defect.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Defect.


        :param id: The id of this Defect.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def pid(self):
        """Gets the pid of this Defect.  # noqa: E501


        :return: The pid of this Defect.  # noqa: E501
        :rtype: int
        """
        return self._pid

    @pid.setter
    def pid(self, pid):
        """Sets the pid of this Defect.


        :param pid: The pid of this Defect.  # noqa: E501
        :type: int
        """

        self._pid = pid

    @property
    def created_user_id(self):
        """Gets the created_user_id of this Defect.  # noqa: E501


        :return: The created_user_id of this Defect.  # noqa: E501
        :rtype: int
        """
        return self._created_user_id

    @created_user_id.setter
    def created_user_id(self, created_user_id):
        """Sets the created_user_id of this Defect.


        :param created_user_id: The created_user_id of this Defect.  # noqa: E501
        :type: int
        """

        self._created_user_id = created_user_id

    @property
    def client_id(self):
        """Gets the client_id of this Defect.  # noqa: E501


        :return: The client_id of this Defect.  # noqa: E501
        :rtype: int
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this Defect.


        :param client_id: The client_id of this Defect.  # noqa: E501
        :type: int
        """

        self._client_id = client_id

    @property
    def project_id(self):
        """Gets the project_id of this Defect.  # noqa: E501


        :return: The project_id of this Defect.  # noqa: E501
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this Defect.


        :param project_id: The project_id of this Defect.  # noqa: E501
        :type: int
        """

        self._project_id = project_id

    @property
    def summary(self):
        """Gets the summary of this Defect.  # noqa: E501


        :return: The summary of this Defect.  # noqa: E501
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this Defect.


        :param summary: The summary of this Defect.  # noqa: E501
        :type: str
        """

        self._summary = summary

    @property
    def description(self):
        """Gets the description of this Defect.  # noqa: E501


        :return: The description of this Defect.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Defect.


        :param description: The description of this Defect.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def type_id(self):
        """Gets the type_id of this Defect.  # noqa: E501


        :return: The type_id of this Defect.  # noqa: E501
        :rtype: int
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """Sets the type_id of this Defect.


        :param type_id: The type_id of this Defect.  # noqa: E501
        :type: int
        """

        self._type_id = type_id

    @property
    def type(self):
        """Gets the type of this Defect.  # noqa: E501


        :return: The type of this Defect.  # noqa: E501
        :rtype: LookUp
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Defect.


        :param type: The type of this Defect.  # noqa: E501
        :type: LookUp
        """

        self._type = type

    @property
    def assigned_user_id(self):
        """Gets the assigned_user_id of this Defect.  # noqa: E501


        :return: The assigned_user_id of this Defect.  # noqa: E501
        :rtype: int
        """
        return self._assigned_user_id

    @assigned_user_id.setter
    def assigned_user_id(self, assigned_user_id):
        """Sets the assigned_user_id of this Defect.


        :param assigned_user_id: The assigned_user_id of this Defect.  # noqa: E501
        :type: int
        """

        self._assigned_user_id = assigned_user_id

    @property
    def status_id(self):
        """Gets the status_id of this Defect.  # noqa: E501


        :return: The status_id of this Defect.  # noqa: E501
        :rtype: int
        """
        return self._status_id

    @status_id.setter
    def status_id(self, status_id):
        """Sets the status_id of this Defect.


        :param status_id: The status_id of this Defect.  # noqa: E501
        :type: int
        """

        self._status_id = status_id

    @property
    def previous_status_id(self):
        """Gets the previous_status_id of this Defect.  # noqa: E501


        :return: The previous_status_id of this Defect.  # noqa: E501
        :rtype: int
        """
        return self._previous_status_id

    @previous_status_id.setter
    def previous_status_id(self, previous_status_id):
        """Sets the previous_status_id of this Defect.


        :param previous_status_id: The previous_status_id of this Defect.  # noqa: E501
        :type: int
        """

        self._previous_status_id = previous_status_id

    @property
    def severity_id(self):
        """Gets the severity_id of this Defect.  # noqa: E501


        :return: The severity_id of this Defect.  # noqa: E501
        :rtype: int
        """
        return self._severity_id

    @severity_id.setter
    def severity_id(self, severity_id):
        """Sets the severity_id of this Defect.


        :param severity_id: The severity_id of this Defect.  # noqa: E501
        :type: int
        """

        self._severity_id = severity_id

    @property
    def priority_id(self):
        """Gets the priority_id of this Defect.  # noqa: E501


        :return: The priority_id of this Defect.  # noqa: E501
        :rtype: int
        """
        return self._priority_id

    @priority_id.setter
    def priority_id(self, priority_id):
        """Sets the priority_id of this Defect.


        :param priority_id: The priority_id of this Defect.  # noqa: E501
        :type: int
        """

        self._priority_id = priority_id

    @property
    def affected_release_id(self):
        """Gets the affected_release_id of this Defect.  # noqa: E501


        :return: The affected_release_id of this Defect.  # noqa: E501
        :rtype: int
        """
        return self._affected_release_id

    @affected_release_id.setter
    def affected_release_id(self, affected_release_id):
        """Sets the affected_release_id of this Defect.


        :param affected_release_id: The affected_release_id of this Defect.  # noqa: E501
        :type: int
        """

        self._affected_release_id = affected_release_id

    @property
    def affected_build_id(self):
        """Gets the affected_build_id of this Defect.  # noqa: E501


        :return: The affected_build_id of this Defect.  # noqa: E501
        :rtype: int
        """
        return self._affected_build_id

    @affected_build_id.setter
    def affected_build_id(self, affected_build_id):
        """Sets the affected_build_id of this Defect.


        :param affected_build_id: The affected_build_id of this Defect.  # noqa: E501
        :type: int
        """

        self._affected_build_id = affected_build_id

    @property
    def fixed_release_id(self):
        """Gets the fixed_release_id of this Defect.  # noqa: E501


        :return: The fixed_release_id of this Defect.  # noqa: E501
        :rtype: int
        """
        return self._fixed_release_id

    @fixed_release_id.setter
    def fixed_release_id(self, fixed_release_id):
        """Sets the fixed_release_id of this Defect.


        :param fixed_release_id: The fixed_release_id of this Defect.  # noqa: E501
        :type: int
        """

        self._fixed_release_id = fixed_release_id

    @property
    def fixed_build_id(self):
        """Gets the fixed_build_id of this Defect.  # noqa: E501


        :return: The fixed_build_id of this Defect.  # noqa: E501
        :rtype: int
        """
        return self._fixed_build_id

    @fixed_build_id.setter
    def fixed_build_id(self, fixed_build_id):
        """Sets the fixed_build_id of this Defect.


        :param fixed_build_id: The fixed_build_id of this Defect.  # noqa: E501
        :type: int
        """

        self._fixed_build_id = fixed_build_id

    @property
    def target_release_id(self):
        """Gets the target_release_id of this Defect.  # noqa: E501


        :return: The target_release_id of this Defect.  # noqa: E501
        :rtype: int
        """
        return self._target_release_id

    @target_release_id.setter
    def target_release_id(self, target_release_id):
        """Sets the target_release_id of this Defect.


        :param target_release_id: The target_release_id of this Defect.  # noqa: E501
        :type: int
        """

        self._target_release_id = target_release_id

    @property
    def target_build_id(self):
        """Gets the target_build_id of this Defect.  # noqa: E501


        :return: The target_build_id of this Defect.  # noqa: E501
        :rtype: int
        """
        return self._target_build_id

    @target_build_id.setter
    def target_build_id(self, target_build_id):
        """Sets the target_build_id of this Defect.


        :param target_build_id: The target_build_id of this Defect.  # noqa: E501
        :type: int
        """

        self._target_build_id = target_build_id

    @property
    def target_date(self):
        """Gets the target_date of this Defect.  # noqa: E501


        :return: The target_date of this Defect.  # noqa: E501
        :rtype: datetime
        """
        return self._target_date

    @target_date.setter
    def target_date(self, target_date):
        """Sets the target_date of this Defect.


        :param target_date: The target_date of this Defect.  # noqa: E501
        :type: datetime
        """

        self._target_date = target_date

    @property
    def closed_date(self):
        """Gets the closed_date of this Defect.  # noqa: E501


        :return: The closed_date of this Defect.  # noqa: E501
        :rtype: datetime
        """
        return self._closed_date

    @closed_date.setter
    def closed_date(self, closed_date):
        """Sets the closed_date of this Defect.


        :param closed_date: The closed_date of this Defect.  # noqa: E501
        :type: datetime
        """

        self._closed_date = closed_date

    @property
    def reason_id(self):
        """Gets the reason_id of this Defect.  # noqa: E501


        :return: The reason_id of this Defect.  # noqa: E501
        :rtype: int
        """
        return self._reason_id

    @reason_id.setter
    def reason_id(self, reason_id):
        """Sets the reason_id of this Defect.


        :param reason_id: The reason_id of this Defect.  # noqa: E501
        :type: int
        """

        self._reason_id = reason_id

    @property
    def root_cause_id(self):
        """Gets the root_cause_id of this Defect.  # noqa: E501


        :return: The root_cause_id of this Defect.  # noqa: E501
        :rtype: int
        """
        return self._root_cause_id

    @root_cause_id.setter
    def root_cause_id(self, root_cause_id):
        """Sets the root_cause_id of this Defect.


        :param root_cause_id: The root_cause_id of this Defect.  # noqa: E501
        :type: int
        """

        self._root_cause_id = root_cause_id

    @property
    def category_id(self):
        """Gets the category_id of this Defect.  # noqa: E501


        :return: The category_id of this Defect.  # noqa: E501
        :rtype: int
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this Defect.


        :param category_id: The category_id of this Defect.  # noqa: E501
        :type: int
        """

        self._category_id = category_id

    @property
    def project_module_id(self):
        """Gets the project_module_id of this Defect.  # noqa: E501


        :return: The project_module_id of this Defect.  # noqa: E501
        :rtype: int
        """
        return self._project_module_id

    @project_module_id.setter
    def project_module_id(self, project_module_id):
        """Sets the project_module_id of this Defect.


        :param project_module_id: The project_module_id of this Defect.  # noqa: E501
        :type: int
        """

        self._project_module_id = project_module_id

    @property
    def source_defect_id(self):
        """Gets the source_defect_id of this Defect.  # noqa: E501


        :return: The source_defect_id of this Defect.  # noqa: E501
        :rtype: int
        """
        return self._source_defect_id

    @source_defect_id.setter
    def source_defect_id(self, source_defect_id):
        """Sets the source_defect_id of this Defect.


        :param source_defect_id: The source_defect_id of this Defect.  # noqa: E501
        :type: int
        """

        self._source_defect_id = source_defect_id

    @property
    def environment_id(self):
        """Gets the environment_id of this Defect.  # noqa: E501


        :return: The environment_id of this Defect.  # noqa: E501
        :rtype: int
        """
        return self._environment_id

    @environment_id.setter
    def environment_id(self, environment_id):
        """Sets the environment_id of this Defect.


        :param environment_id: The environment_id of this Defect.  # noqa: E501
        :type: int
        """

        self._environment_id = environment_id

    @property
    def comments(self):
        """Gets the comments of this Defect.  # noqa: E501


        :return: The comments of this Defect.  # noqa: E501
        :rtype: list[DefectComment]
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this Defect.


        :param comments: The comments of this Defect.  # noqa: E501
        :type: list[DefectComment]
        """

        self._comments = comments

    @property
    def status(self):
        """Gets the status of this Defect.  # noqa: E501


        :return: The status of this Defect.  # noqa: E501
        :rtype: LookUp
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Defect.


        :param status: The status of this Defect.  # noqa: E501
        :type: LookUp
        """

        self._status = status

    @property
    def draft(self):
        """Gets the draft of this Defect.  # noqa: E501


        :return: The draft of this Defect.  # noqa: E501
        :rtype: bool
        """
        return self._draft

    @draft.setter
    def draft(self, draft):
        """Sets the draft of this Defect.


        :param draft: The draft of this Defect.  # noqa: E501
        :type: bool
        """

        self._draft = draft

    @property
    def index_flag(self):
        """Gets the index_flag of this Defect.  # noqa: E501


        :return: The index_flag of this Defect.  # noqa: E501
        :rtype: bool
        """
        return self._index_flag

    @index_flag.setter
    def index_flag(self, index_flag):
        """Sets the index_flag of this Defect.


        :param index_flag: The index_flag of this Defect.  # noqa: E501
        :type: bool
        """

        self._index_flag = index_flag

    @property
    def external_issue_id(self):
        """Gets the external_issue_id of this Defect.  # noqa: E501


        :return: The external_issue_id of this Defect.  # noqa: E501
        :rtype: str
        """
        return self._external_issue_id

    @external_issue_id.setter
    def external_issue_id(self, external_issue_id):
        """Sets the external_issue_id of this Defect.


        :param external_issue_id: The external_issue_id of this Defect.  # noqa: E501
        :type: str
        """

        self._external_issue_id = external_issue_id

    @property
    def connection_id(self):
        """Gets the connection_id of this Defect.  # noqa: E501


        :return: The connection_id of this Defect.  # noqa: E501
        :rtype: int
        """
        return self._connection_id

    @connection_id.setter
    def connection_id(self, connection_id):
        """Sets the connection_id of this Defect.


        :param connection_id: The connection_id of this Defect.  # noqa: E501
        :type: int
        """

        self._connection_id = connection_id

    @property
    def external_project_id(self):
        """Gets the external_project_id of this Defect.  # noqa: E501


        :return: The external_project_id of this Defect.  # noqa: E501
        :rtype: str
        """
        return self._external_project_id

    @external_project_id.setter
    def external_project_id(self, external_project_id):
        """Sets the external_project_id of this Defect.


        :param external_project_id: The external_project_id of this Defect.  # noqa: E501
        :type: str
        """

        self._external_project_id = external_project_id

    @property
    def external_issue_summary(self):
        """Gets the external_issue_summary of this Defect.  # noqa: E501


        :return: The external_issue_summary of this Defect.  # noqa: E501
        :rtype: str
        """
        return self._external_issue_summary

    @external_issue_summary.setter
    def external_issue_summary(self, external_issue_summary):
        """Sets the external_issue_summary of this Defect.


        :param external_issue_summary: The external_issue_summary of this Defect.  # noqa: E501
        :type: str
        """

        self._external_issue_summary = external_issue_summary

    @property
    def external_issue_status(self):
        """Gets the external_issue_status of this Defect.  # noqa: E501


        :return: The external_issue_status of this Defect.  # noqa: E501
        :rtype: str
        """
        return self._external_issue_status

    @external_issue_status.setter
    def external_issue_status(self, external_issue_status):
        """Sets the external_issue_status of this Defect.


        :param external_issue_status: The external_issue_status of this Defect.  # noqa: E501
        :type: str
        """

        self._external_issue_status = external_issue_status

    @property
    def url(self):
        """Gets the url of this Defect.  # noqa: E501


        :return: The url of this Defect.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Defect.


        :param url: The url of this Defect.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def external_issue_type(self):
        """Gets the external_issue_type of this Defect.  # noqa: E501


        :return: The external_issue_type of this Defect.  # noqa: E501
        :rtype: str
        """
        return self._external_issue_type

    @external_issue_type.setter
    def external_issue_type(self, external_issue_type):
        """Sets the external_issue_type of this Defect.


        :param external_issue_type: The external_issue_type of this Defect.  # noqa: E501
        :type: str
        """

        self._external_issue_type = external_issue_type

    @property
    def external_issue_unique_id(self):
        """Gets the external_issue_unique_id of this Defect.  # noqa: E501


        :return: The external_issue_unique_id of this Defect.  # noqa: E501
        :rtype: str
        """
        return self._external_issue_unique_id

    @external_issue_unique_id.setter
    def external_issue_unique_id(self, external_issue_unique_id):
        """Sets the external_issue_unique_id of this Defect.


        :param external_issue_unique_id: The external_issue_unique_id of this Defect.  # noqa: E501
        :type: str
        """

        self._external_issue_unique_id = external_issue_unique_id

    @property
    def unlinked_defect(self):
        """Gets the unlinked_defect of this Defect.  # noqa: E501


        :return: The unlinked_defect of this Defect.  # noqa: E501
        :rtype: bool
        """
        return self._unlinked_defect

    @unlinked_defect.setter
    def unlinked_defect(self, unlinked_defect):
        """Sets the unlinked_defect of this Defect.


        :param unlinked_defect: The unlinked_defect of this Defect.  # noqa: E501
        :type: bool
        """

        self._unlinked_defect = unlinked_defect

    @property
    def name(self):
        """Gets the name of this Defect.  # noqa: E501


        :return: The name of this Defect.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Defect.


        :param name: The name of this Defect.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def result_type(self):
        """Gets the result_type of this Defect.  # noqa: E501


        :return: The result_type of this Defect.  # noqa: E501
        :rtype: str
        """
        return self._result_type

    @result_type.setter
    def result_type(self, result_type):
        """Sets the result_type of this Defect.


        :param result_type: The result_type of this Defect.  # noqa: E501
        :type: str
        """

        self._result_type = result_type

    @property
    def object_type(self):
        """Gets the object_type of this Defect.  # noqa: E501


        :return: The object_type of this Defect.  # noqa: E501
        :rtype: int
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """Sets the object_type of this Defect.


        :param object_type: The object_type of this Defect.  # noqa: E501
        :type: int
        """

        self._object_type = object_type

    @property
    def full_id(self):
        """Gets the full_id of this Defect.  # noqa: E501


        :return: The full_id of this Defect.  # noqa: E501
        :rtype: str
        """
        return self._full_id

    @full_id.setter
    def full_id(self, full_id):
        """Sets the full_id of this Defect.


        :param full_id: The full_id of this Defect.  # noqa: E501
        :type: str
        """

        self._full_id = full_id

    @property
    def parent_artifact_id(self):
        """Gets the parent_artifact_id of this Defect.  # noqa: E501


        :return: The parent_artifact_id of this Defect.  # noqa: E501
        :rtype: int
        """
        return self._parent_artifact_id

    @parent_artifact_id.setter
    def parent_artifact_id(self, parent_artifact_id):
        """Sets the parent_artifact_id of this Defect.


        :param parent_artifact_id: The parent_artifact_id of this Defect.  # noqa: E501
        :type: int
        """

        self._parent_artifact_id = parent_artifact_id

    @property
    def parent_object_type(self):
        """Gets the parent_object_type of this Defect.  # noqa: E501


        :return: The parent_object_type of this Defect.  # noqa: E501
        :rtype: int
        """
        return self._parent_object_type

    @parent_object_type.setter
    def parent_object_type(self, parent_object_type):
        """Sets the parent_object_type of this Defect.


        :param parent_object_type: The parent_object_type of this Defect.  # noqa: E501
        :type: int
        """

        self._parent_object_type = parent_object_type

    @property
    def result_name(self):
        """Gets the result_name of this Defect.  # noqa: E501


        :return: The result_name of this Defect.  # noqa: E501
        :rtype: str
        """
        return self._result_name

    @result_name.setter
    def result_name(self, result_name):
        """Sets the result_name of this Defect.


        :param result_name: The result_name of this Defect.  # noqa: E501
        :type: str
        """

        self._result_name = result_name

    @property
    def status_name(self):
        """Gets the status_name of this Defect.  # noqa: E501


        :return: The status_name of this Defect.  # noqa: E501
        :rtype: str
        """
        return self._status_name

    @status_name.setter
    def status_name(self, status_name):
        """Sets the status_name of this Defect.


        :param status_name: The status_name of this Defect.  # noqa: E501
        :type: str
        """

        self._status_name = status_name

    @property
    def pid_with_prefix(self):
        """Gets the pid_with_prefix of this Defect.  # noqa: E501


        :return: The pid_with_prefix of this Defect.  # noqa: E501
        :rtype: str
        """
        return self._pid_with_prefix

    @pid_with_prefix.setter
    def pid_with_prefix(self, pid_with_prefix):
        """Sets the pid_with_prefix of this Defect.


        :param pid_with_prefix: The pid_with_prefix of this Defect.  # noqa: E501
        :type: str
        """

        self._pid_with_prefix = pid_with_prefix

    @property
    def deleted(self):
        """Gets the deleted of this Defect.  # noqa: E501


        :return: The deleted of this Defect.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this Defect.


        :param deleted: The deleted of this Defect.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def obj_order(self):
        """Gets the obj_order of this Defect.  # noqa: E501


        :return: The obj_order of this Defect.  # noqa: E501
        :rtype: int
        """
        return self._obj_order

    @obj_order.setter
    def obj_order(self, obj_order):
        """Sets the obj_order of this Defect.


        :param obj_order: The obj_order of this Defect.  # noqa: E501
        :type: int
        """

        self._obj_order = obj_order

    @property
    def fixed_release_build_id(self):
        """Gets the fixed_release_build_id of this Defect.  # noqa: E501


        :return: The fixed_release_build_id of this Defect.  # noqa: E501
        :rtype: str
        """
        return self._fixed_release_build_id

    @fixed_release_build_id.setter
    def fixed_release_build_id(self, fixed_release_build_id):
        """Sets the fixed_release_build_id of this Defect.


        :param fixed_release_build_id: The fixed_release_build_id of this Defect.  # noqa: E501
        :type: str
        """

        self._fixed_release_build_id = fixed_release_build_id

    @property
    def target_release_build_id(self):
        """Gets the target_release_build_id of this Defect.  # noqa: E501


        :return: The target_release_build_id of this Defect.  # noqa: E501
        :rtype: str
        """
        return self._target_release_build_id

    @target_release_build_id.setter
    def target_release_build_id(self, target_release_build_id):
        """Sets the target_release_build_id of this Defect.


        :param target_release_build_id: The target_release_build_id of this Defect.  # noqa: E501
        :type: str
        """

        self._target_release_build_id = target_release_build_id

    @property
    def affected_release_build_id(self):
        """Gets the affected_release_build_id of this Defect.  # noqa: E501


        :return: The affected_release_build_id of this Defect.  # noqa: E501
        :rtype: str
        """
        return self._affected_release_build_id

    @affected_release_build_id.setter
    def affected_release_build_id(self, affected_release_build_id):
        """Sets the affected_release_build_id of this Defect.


        :param affected_release_build_id: The affected_release_build_id of this Defect.  # noqa: E501
        :type: str
        """

        self._affected_release_build_id = affected_release_build_id

    @property
    def result_description(self):
        """Gets the result_description of this Defect.  # noqa: E501


        :return: The result_description of this Defect.  # noqa: E501
        :rtype: str
        """
        return self._result_description

    @result_description.setter
    def result_description(self, result_description):
        """Sets the result_description of this Defect.


        :param result_description: The result_description of this Defect.  # noqa: E501
        :type: str
        """

        self._result_description = result_description

    @property
    def short_result_type(self):
        """Gets the short_result_type of this Defect.  # noqa: E501


        :return: The short_result_type of this Defect.  # noqa: E501
        :rtype: str
        """
        return self._short_result_type

    @short_result_type.setter
    def short_result_type(self, short_result_type):
        """Sets the short_result_type of this Defect.


        :param short_result_type: The short_result_type of this Defect.  # noqa: E501
        :type: str
        """

        self._short_result_type = short_result_type

    @property
    def artifact_type(self):
        """Gets the artifact_type of this Defect.  # noqa: E501


        :return: The artifact_type of this Defect.  # noqa: E501
        :rtype: int
        """
        return self._artifact_type

    @artifact_type.setter
    def artifact_type(self, artifact_type):
        """Sets the artifact_type of this Defect.


        :param artifact_type: The artifact_type of this Defect.  # noqa: E501
        :type: int
        """

        self._artifact_type = artifact_type

    @property
    def custom_field_value(self):
        """Gets the custom_field_value of this Defect.  # noqa: E501


        :return: The custom_field_value of this Defect.  # noqa: E501
        :rtype: str
        """
        return self._custom_field_value

    @custom_field_value.setter
    def custom_field_value(self, custom_field_value):
        """Sets the custom_field_value of this Defect.


        :param custom_field_value: The custom_field_value of this Defect.  # noqa: E501
        :type: str
        """

        self._custom_field_value = custom_field_value

    @property
    def automation(self):
        """Gets the automation of this Defect.  # noqa: E501


        :return: The automation of this Defect.  # noqa: E501
        :rtype: bool
        """
        return self._automation

    @automation.setter
    def automation(self, automation):
        """Sets the automation of this Defect.


        :param automation: The automation of this Defect.  # noqa: E501
        :type: bool
        """

        self._automation = automation

    @property
    def long_id(self):
        """Gets the long_id of this Defect.  # noqa: E501


        :return: The long_id of this Defect.  # noqa: E501
        :rtype: int
        """
        return self._long_id

    @long_id.setter
    def long_id(self, long_id):
        """Sets the long_id of this Defect.


        :param long_id: The long_id of this Defect.  # noqa: E501
        :type: int
        """

        self._long_id = long_id

    @property
    def tosca(self):
        """Gets the tosca of this Defect.  # noqa: E501


        :return: The tosca of this Defect.  # noqa: E501
        :rtype: bool
        """
        return self._tosca

    @tosca.setter
    def tosca(self, tosca):
        """Sets the tosca of this Defect.


        :param tosca: The tosca of this Defect.  # noqa: E501
        :type: bool
        """

        self._tosca = tosca

    @property
    def auto_test_case(self):
        """Gets the auto_test_case of this Defect.  # noqa: E501


        :return: The auto_test_case of this Defect.  # noqa: E501
        :rtype: bool
        """
        return self._auto_test_case

    @auto_test_case.setter
    def auto_test_case(self, auto_test_case):
        """Sets the auto_test_case of this Defect.


        :param auto_test_case: The auto_test_case of this Defect.  # noqa: E501
        :type: bool
        """

        self._auto_test_case = auto_test_case

    @property
    def approved(self):
        """Gets the approved of this Defect.  # noqa: E501


        :return: The approved of this Defect.  # noqa: E501
        :rtype: bool
        """
        return self._approved

    @approved.setter
    def approved(self, approved):
        """Sets the approved of this Defect.


        :param approved: The approved of this Defect.  # noqa: E501
        :type: bool
        """

        self._approved = approved

    @property
    def create_date_time_string(self):
        """Gets the create_date_time_string of this Defect.  # noqa: E501


        :return: The create_date_time_string of this Defect.  # noqa: E501
        :rtype: str
        """
        return self._create_date_time_string

    @create_date_time_string.setter
    def create_date_time_string(self, create_date_time_string):
        """Sets the create_date_time_string of this Defect.


        :param create_date_time_string: The create_date_time_string of this Defect.  # noqa: E501
        :type: str
        """

        self._create_date_time_string = create_date_time_string

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Defect, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Defect):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Defect):
            return True

        return self.to_dict() != other.to_dict()
