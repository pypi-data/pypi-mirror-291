# coding: utf-8

"""
    qTest Manager API Version 11.0.0 - 2023.6

    qTest Manager API Version 11.0.0 - 2023.6  # noqa: E501

    OpenAPI spec version: 11.0.0 - 2023.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ProjectModule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'creator_id': 'int',
        'created_date': 'datetime',
        'last_modified_user_id': 'int',
        'last_modified_date': 'datetime',
        'id': 'int',
        'pid': 'int',
        'client_id': 'int',
        'project_id': 'int',
        'project': 'Project',
        'obj_order': 'int',
        'parent_module_id': 'int',
        'parent_module': 'ProjectModule',
        'name': 'str',
        'description': 'str',
        'module_type': 'str',
        'deleted': 'bool',
        'shared': 'bool',
        'damage': 'int',
        'frequency': 'int',
        'weight': 'int',
        'tds_flow_id': 'str',
        'object_type': 'int',
        'parent_artifact_id': 'int',
        'parent_object_type': 'int',
        'pid_with_prefix': 'str',
        'artifact_type': 'int',
        'long_id': 'int',
        'status_id': 'int',
        'create_date_time_string': 'str'
    }

    attribute_map = {
        'creator_id': 'creatorId',
        'created_date': 'createdDate',
        'last_modified_user_id': 'lastModifiedUserId',
        'last_modified_date': 'lastModifiedDate',
        'id': 'id',
        'pid': 'pid',
        'client_id': 'clientId',
        'project_id': 'projectId',
        'project': 'project',
        'obj_order': 'objOrder',
        'parent_module_id': 'parentModuleId',
        'parent_module': 'parentModule',
        'name': 'name',
        'description': 'description',
        'module_type': 'moduleType',
        'deleted': 'deleted',
        'shared': 'shared',
        'damage': 'damage',
        'frequency': 'frequency',
        'weight': 'weight',
        'tds_flow_id': 'tdsFlowId',
        'object_type': 'objectType',
        'parent_artifact_id': 'parentArtifactId',
        'parent_object_type': 'parentObjectType',
        'pid_with_prefix': 'pidWithPrefix',
        'artifact_type': 'artifactType',
        'long_id': 'longId',
        'status_id': 'statusId',
        'create_date_time_string': 'createDateTimeString'
    }

    def __init__(self, creator_id=None, created_date=None, last_modified_user_id=None, last_modified_date=None, id=None, pid=None, client_id=None, project_id=None, project=None, obj_order=None, parent_module_id=None, parent_module=None, name=None, description=None, module_type=None, deleted=False, shared=False, damage=None, frequency=None, weight=None, tds_flow_id=None, object_type=None, parent_artifact_id=None, parent_object_type=None, pid_with_prefix=None, artifact_type=None, long_id=None, status_id=None, create_date_time_string=None, _configuration=None):  # noqa: E501
        """ProjectModule - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._creator_id = None
        self._created_date = None
        self._last_modified_user_id = None
        self._last_modified_date = None
        self._id = None
        self._pid = None
        self._client_id = None
        self._project_id = None
        self._project = None
        self._obj_order = None
        self._parent_module_id = None
        self._parent_module = None
        self._name = None
        self._description = None
        self._module_type = None
        self._deleted = None
        self._shared = None
        self._damage = None
        self._frequency = None
        self._weight = None
        self._tds_flow_id = None
        self._object_type = None
        self._parent_artifact_id = None
        self._parent_object_type = None
        self._pid_with_prefix = None
        self._artifact_type = None
        self._long_id = None
        self._status_id = None
        self._create_date_time_string = None
        self.discriminator = None

        if creator_id is not None:
            self.creator_id = creator_id
        if created_date is not None:
            self.created_date = created_date
        if last_modified_user_id is not None:
            self.last_modified_user_id = last_modified_user_id
        if last_modified_date is not None:
            self.last_modified_date = last_modified_date
        if id is not None:
            self.id = id
        if pid is not None:
            self.pid = pid
        if client_id is not None:
            self.client_id = client_id
        if project_id is not None:
            self.project_id = project_id
        if project is not None:
            self.project = project
        if obj_order is not None:
            self.obj_order = obj_order
        if parent_module_id is not None:
            self.parent_module_id = parent_module_id
        if parent_module is not None:
            self.parent_module = parent_module
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if module_type is not None:
            self.module_type = module_type
        if deleted is not None:
            self.deleted = deleted
        if shared is not None:
            self.shared = shared
        if damage is not None:
            self.damage = damage
        if frequency is not None:
            self.frequency = frequency
        if weight is not None:
            self.weight = weight
        if tds_flow_id is not None:
            self.tds_flow_id = tds_flow_id
        if object_type is not None:
            self.object_type = object_type
        if parent_artifact_id is not None:
            self.parent_artifact_id = parent_artifact_id
        if parent_object_type is not None:
            self.parent_object_type = parent_object_type
        if pid_with_prefix is not None:
            self.pid_with_prefix = pid_with_prefix
        if artifact_type is not None:
            self.artifact_type = artifact_type
        if long_id is not None:
            self.long_id = long_id
        if status_id is not None:
            self.status_id = status_id
        if create_date_time_string is not None:
            self.create_date_time_string = create_date_time_string

    @property
    def creator_id(self):
        """Gets the creator_id of this ProjectModule.  # noqa: E501


        :return: The creator_id of this ProjectModule.  # noqa: E501
        :rtype: int
        """
        return self._creator_id

    @creator_id.setter
    def creator_id(self, creator_id):
        """Sets the creator_id of this ProjectModule.


        :param creator_id: The creator_id of this ProjectModule.  # noqa: E501
        :type: int
        """

        self._creator_id = creator_id

    @property
    def created_date(self):
        """Gets the created_date of this ProjectModule.  # noqa: E501


        :return: The created_date of this ProjectModule.  # noqa: E501
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this ProjectModule.


        :param created_date: The created_date of this ProjectModule.  # noqa: E501
        :type: datetime
        """

        self._created_date = created_date

    @property
    def last_modified_user_id(self):
        """Gets the last_modified_user_id of this ProjectModule.  # noqa: E501


        :return: The last_modified_user_id of this ProjectModule.  # noqa: E501
        :rtype: int
        """
        return self._last_modified_user_id

    @last_modified_user_id.setter
    def last_modified_user_id(self, last_modified_user_id):
        """Sets the last_modified_user_id of this ProjectModule.


        :param last_modified_user_id: The last_modified_user_id of this ProjectModule.  # noqa: E501
        :type: int
        """

        self._last_modified_user_id = last_modified_user_id

    @property
    def last_modified_date(self):
        """Gets the last_modified_date of this ProjectModule.  # noqa: E501


        :return: The last_modified_date of this ProjectModule.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified_date

    @last_modified_date.setter
    def last_modified_date(self, last_modified_date):
        """Sets the last_modified_date of this ProjectModule.


        :param last_modified_date: The last_modified_date of this ProjectModule.  # noqa: E501
        :type: datetime
        """

        self._last_modified_date = last_modified_date

    @property
    def id(self):
        """Gets the id of this ProjectModule.  # noqa: E501


        :return: The id of this ProjectModule.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProjectModule.


        :param id: The id of this ProjectModule.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def pid(self):
        """Gets the pid of this ProjectModule.  # noqa: E501


        :return: The pid of this ProjectModule.  # noqa: E501
        :rtype: int
        """
        return self._pid

    @pid.setter
    def pid(self, pid):
        """Sets the pid of this ProjectModule.


        :param pid: The pid of this ProjectModule.  # noqa: E501
        :type: int
        """

        self._pid = pid

    @property
    def client_id(self):
        """Gets the client_id of this ProjectModule.  # noqa: E501


        :return: The client_id of this ProjectModule.  # noqa: E501
        :rtype: int
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this ProjectModule.


        :param client_id: The client_id of this ProjectModule.  # noqa: E501
        :type: int
        """

        self._client_id = client_id

    @property
    def project_id(self):
        """Gets the project_id of this ProjectModule.  # noqa: E501


        :return: The project_id of this ProjectModule.  # noqa: E501
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this ProjectModule.


        :param project_id: The project_id of this ProjectModule.  # noqa: E501
        :type: int
        """

        self._project_id = project_id

    @property
    def project(self):
        """Gets the project of this ProjectModule.  # noqa: E501


        :return: The project of this ProjectModule.  # noqa: E501
        :rtype: Project
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this ProjectModule.


        :param project: The project of this ProjectModule.  # noqa: E501
        :type: Project
        """

        self._project = project

    @property
    def obj_order(self):
        """Gets the obj_order of this ProjectModule.  # noqa: E501


        :return: The obj_order of this ProjectModule.  # noqa: E501
        :rtype: int
        """
        return self._obj_order

    @obj_order.setter
    def obj_order(self, obj_order):
        """Sets the obj_order of this ProjectModule.


        :param obj_order: The obj_order of this ProjectModule.  # noqa: E501
        :type: int
        """

        self._obj_order = obj_order

    @property
    def parent_module_id(self):
        """Gets the parent_module_id of this ProjectModule.  # noqa: E501


        :return: The parent_module_id of this ProjectModule.  # noqa: E501
        :rtype: int
        """
        return self._parent_module_id

    @parent_module_id.setter
    def parent_module_id(self, parent_module_id):
        """Sets the parent_module_id of this ProjectModule.


        :param parent_module_id: The parent_module_id of this ProjectModule.  # noqa: E501
        :type: int
        """

        self._parent_module_id = parent_module_id

    @property
    def parent_module(self):
        """Gets the parent_module of this ProjectModule.  # noqa: E501


        :return: The parent_module of this ProjectModule.  # noqa: E501
        :rtype: ProjectModule
        """
        return self._parent_module

    @parent_module.setter
    def parent_module(self, parent_module):
        """Sets the parent_module of this ProjectModule.


        :param parent_module: The parent_module of this ProjectModule.  # noqa: E501
        :type: ProjectModule
        """

        self._parent_module = parent_module

    @property
    def name(self):
        """Gets the name of this ProjectModule.  # noqa: E501


        :return: The name of this ProjectModule.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProjectModule.


        :param name: The name of this ProjectModule.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this ProjectModule.  # noqa: E501


        :return: The description of this ProjectModule.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ProjectModule.


        :param description: The description of this ProjectModule.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def module_type(self):
        """Gets the module_type of this ProjectModule.  # noqa: E501


        :return: The module_type of this ProjectModule.  # noqa: E501
        :rtype: str
        """
        return self._module_type

    @module_type.setter
    def module_type(self, module_type):
        """Sets the module_type of this ProjectModule.


        :param module_type: The module_type of this ProjectModule.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                module_type is not None and not re.search(r'^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', module_type)):  # noqa: E501
            raise ValueError(r"Invalid value for `module_type`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")  # noqa: E501

        self._module_type = module_type

    @property
    def deleted(self):
        """Gets the deleted of this ProjectModule.  # noqa: E501


        :return: The deleted of this ProjectModule.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this ProjectModule.


        :param deleted: The deleted of this ProjectModule.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def shared(self):
        """Gets the shared of this ProjectModule.  # noqa: E501


        :return: The shared of this ProjectModule.  # noqa: E501
        :rtype: bool
        """
        return self._shared

    @shared.setter
    def shared(self, shared):
        """Sets the shared of this ProjectModule.


        :param shared: The shared of this ProjectModule.  # noqa: E501
        :type: bool
        """

        self._shared = shared

    @property
    def damage(self):
        """Gets the damage of this ProjectModule.  # noqa: E501


        :return: The damage of this ProjectModule.  # noqa: E501
        :rtype: int
        """
        return self._damage

    @damage.setter
    def damage(self, damage):
        """Sets the damage of this ProjectModule.


        :param damage: The damage of this ProjectModule.  # noqa: E501
        :type: int
        """

        self._damage = damage

    @property
    def frequency(self):
        """Gets the frequency of this ProjectModule.  # noqa: E501


        :return: The frequency of this ProjectModule.  # noqa: E501
        :rtype: int
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this ProjectModule.


        :param frequency: The frequency of this ProjectModule.  # noqa: E501
        :type: int
        """

        self._frequency = frequency

    @property
    def weight(self):
        """Gets the weight of this ProjectModule.  # noqa: E501


        :return: The weight of this ProjectModule.  # noqa: E501
        :rtype: int
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this ProjectModule.


        :param weight: The weight of this ProjectModule.  # noqa: E501
        :type: int
        """

        self._weight = weight

    @property
    def tds_flow_id(self):
        """Gets the tds_flow_id of this ProjectModule.  # noqa: E501


        :return: The tds_flow_id of this ProjectModule.  # noqa: E501
        :rtype: str
        """
        return self._tds_flow_id

    @tds_flow_id.setter
    def tds_flow_id(self, tds_flow_id):
        """Sets the tds_flow_id of this ProjectModule.


        :param tds_flow_id: The tds_flow_id of this ProjectModule.  # noqa: E501
        :type: str
        """

        self._tds_flow_id = tds_flow_id

    @property
    def object_type(self):
        """Gets the object_type of this ProjectModule.  # noqa: E501


        :return: The object_type of this ProjectModule.  # noqa: E501
        :rtype: int
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """Sets the object_type of this ProjectModule.


        :param object_type: The object_type of this ProjectModule.  # noqa: E501
        :type: int
        """

        self._object_type = object_type

    @property
    def parent_artifact_id(self):
        """Gets the parent_artifact_id of this ProjectModule.  # noqa: E501


        :return: The parent_artifact_id of this ProjectModule.  # noqa: E501
        :rtype: int
        """
        return self._parent_artifact_id

    @parent_artifact_id.setter
    def parent_artifact_id(self, parent_artifact_id):
        """Sets the parent_artifact_id of this ProjectModule.


        :param parent_artifact_id: The parent_artifact_id of this ProjectModule.  # noqa: E501
        :type: int
        """

        self._parent_artifact_id = parent_artifact_id

    @property
    def parent_object_type(self):
        """Gets the parent_object_type of this ProjectModule.  # noqa: E501


        :return: The parent_object_type of this ProjectModule.  # noqa: E501
        :rtype: int
        """
        return self._parent_object_type

    @parent_object_type.setter
    def parent_object_type(self, parent_object_type):
        """Sets the parent_object_type of this ProjectModule.


        :param parent_object_type: The parent_object_type of this ProjectModule.  # noqa: E501
        :type: int
        """

        self._parent_object_type = parent_object_type

    @property
    def pid_with_prefix(self):
        """Gets the pid_with_prefix of this ProjectModule.  # noqa: E501


        :return: The pid_with_prefix of this ProjectModule.  # noqa: E501
        :rtype: str
        """
        return self._pid_with_prefix

    @pid_with_prefix.setter
    def pid_with_prefix(self, pid_with_prefix):
        """Sets the pid_with_prefix of this ProjectModule.


        :param pid_with_prefix: The pid_with_prefix of this ProjectModule.  # noqa: E501
        :type: str
        """

        self._pid_with_prefix = pid_with_prefix

    @property
    def artifact_type(self):
        """Gets the artifact_type of this ProjectModule.  # noqa: E501


        :return: The artifact_type of this ProjectModule.  # noqa: E501
        :rtype: int
        """
        return self._artifact_type

    @artifact_type.setter
    def artifact_type(self, artifact_type):
        """Sets the artifact_type of this ProjectModule.


        :param artifact_type: The artifact_type of this ProjectModule.  # noqa: E501
        :type: int
        """

        self._artifact_type = artifact_type

    @property
    def long_id(self):
        """Gets the long_id of this ProjectModule.  # noqa: E501


        :return: The long_id of this ProjectModule.  # noqa: E501
        :rtype: int
        """
        return self._long_id

    @long_id.setter
    def long_id(self, long_id):
        """Sets the long_id of this ProjectModule.


        :param long_id: The long_id of this ProjectModule.  # noqa: E501
        :type: int
        """

        self._long_id = long_id

    @property
    def status_id(self):
        """Gets the status_id of this ProjectModule.  # noqa: E501


        :return: The status_id of this ProjectModule.  # noqa: E501
        :rtype: int
        """
        return self._status_id

    @status_id.setter
    def status_id(self, status_id):
        """Sets the status_id of this ProjectModule.


        :param status_id: The status_id of this ProjectModule.  # noqa: E501
        :type: int
        """

        self._status_id = status_id

    @property
    def create_date_time_string(self):
        """Gets the create_date_time_string of this ProjectModule.  # noqa: E501


        :return: The create_date_time_string of this ProjectModule.  # noqa: E501
        :rtype: str
        """
        return self._create_date_time_string

    @create_date_time_string.setter
    def create_date_time_string(self, create_date_time_string):
        """Sets the create_date_time_string of this ProjectModule.


        :param create_date_time_string: The create_date_time_string of this ProjectModule.  # noqa: E501
        :type: str
        """

        self._create_date_time_string = create_date_time_string

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProjectModule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectModule):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProjectModule):
            return True

        return self.to_dict() != other.to_dict()
