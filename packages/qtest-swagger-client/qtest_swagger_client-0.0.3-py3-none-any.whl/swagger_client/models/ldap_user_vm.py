# coding: utf-8

"""
    qTest Manager API Version 11.0.0 - 2023.6

    qTest Manager API Version 11.0.0 - 2023.6  # noqa: E501

    OpenAPI spec version: 11.0.0 - 2023.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class LdapUserVM(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uid': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'mail': 'str',
        'activation_link': 'str',
        'mapped_user_id': 'int',
        'new_mapped_user_name': 'str',
        'disabled': 'bool',
        'user_dn': 'str',
        'external_user_id': 'str'
    }

    attribute_map = {
        'uid': 'uid',
        'first_name': 'firstName',
        'last_name': 'lastName',
        'mail': 'mail',
        'activation_link': 'activationLink',
        'mapped_user_id': 'mappedUserId',
        'new_mapped_user_name': 'newMappedUserName',
        'disabled': 'disabled',
        'user_dn': 'userDN',
        'external_user_id': 'externalUserId'
    }

    def __init__(self, uid=None, first_name=None, last_name=None, mail=None, activation_link=None, mapped_user_id=None, new_mapped_user_name=None, disabled=False, user_dn=None, external_user_id=None, _configuration=None):  # noqa: E501
        """LdapUserVM - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._uid = None
        self._first_name = None
        self._last_name = None
        self._mail = None
        self._activation_link = None
        self._mapped_user_id = None
        self._new_mapped_user_name = None
        self._disabled = None
        self._user_dn = None
        self._external_user_id = None
        self.discriminator = None

        if uid is not None:
            self.uid = uid
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if mail is not None:
            self.mail = mail
        if activation_link is not None:
            self.activation_link = activation_link
        if mapped_user_id is not None:
            self.mapped_user_id = mapped_user_id
        if new_mapped_user_name is not None:
            self.new_mapped_user_name = new_mapped_user_name
        if disabled is not None:
            self.disabled = disabled
        if user_dn is not None:
            self.user_dn = user_dn
        if external_user_id is not None:
            self.external_user_id = external_user_id

    @property
    def uid(self):
        """Gets the uid of this LdapUserVM.  # noqa: E501


        :return: The uid of this LdapUserVM.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this LdapUserVM.


        :param uid: The uid of this LdapUserVM.  # noqa: E501
        :type: str
        """

        self._uid = uid

    @property
    def first_name(self):
        """Gets the first_name of this LdapUserVM.  # noqa: E501


        :return: The first_name of this LdapUserVM.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this LdapUserVM.


        :param first_name: The first_name of this LdapUserVM.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this LdapUserVM.  # noqa: E501


        :return: The last_name of this LdapUserVM.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this LdapUserVM.


        :param last_name: The last_name of this LdapUserVM.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def mail(self):
        """Gets the mail of this LdapUserVM.  # noqa: E501


        :return: The mail of this LdapUserVM.  # noqa: E501
        :rtype: str
        """
        return self._mail

    @mail.setter
    def mail(self, mail):
        """Sets the mail of this LdapUserVM.


        :param mail: The mail of this LdapUserVM.  # noqa: E501
        :type: str
        """

        self._mail = mail

    @property
    def activation_link(self):
        """Gets the activation_link of this LdapUserVM.  # noqa: E501


        :return: The activation_link of this LdapUserVM.  # noqa: E501
        :rtype: str
        """
        return self._activation_link

    @activation_link.setter
    def activation_link(self, activation_link):
        """Sets the activation_link of this LdapUserVM.


        :param activation_link: The activation_link of this LdapUserVM.  # noqa: E501
        :type: str
        """

        self._activation_link = activation_link

    @property
    def mapped_user_id(self):
        """Gets the mapped_user_id of this LdapUserVM.  # noqa: E501


        :return: The mapped_user_id of this LdapUserVM.  # noqa: E501
        :rtype: int
        """
        return self._mapped_user_id

    @mapped_user_id.setter
    def mapped_user_id(self, mapped_user_id):
        """Sets the mapped_user_id of this LdapUserVM.


        :param mapped_user_id: The mapped_user_id of this LdapUserVM.  # noqa: E501
        :type: int
        """

        self._mapped_user_id = mapped_user_id

    @property
    def new_mapped_user_name(self):
        """Gets the new_mapped_user_name of this LdapUserVM.  # noqa: E501


        :return: The new_mapped_user_name of this LdapUserVM.  # noqa: E501
        :rtype: str
        """
        return self._new_mapped_user_name

    @new_mapped_user_name.setter
    def new_mapped_user_name(self, new_mapped_user_name):
        """Sets the new_mapped_user_name of this LdapUserVM.


        :param new_mapped_user_name: The new_mapped_user_name of this LdapUserVM.  # noqa: E501
        :type: str
        """

        self._new_mapped_user_name = new_mapped_user_name

    @property
    def disabled(self):
        """Gets the disabled of this LdapUserVM.  # noqa: E501


        :return: The disabled of this LdapUserVM.  # noqa: E501
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this LdapUserVM.


        :param disabled: The disabled of this LdapUserVM.  # noqa: E501
        :type: bool
        """

        self._disabled = disabled

    @property
    def user_dn(self):
        """Gets the user_dn of this LdapUserVM.  # noqa: E501


        :return: The user_dn of this LdapUserVM.  # noqa: E501
        :rtype: str
        """
        return self._user_dn

    @user_dn.setter
    def user_dn(self, user_dn):
        """Sets the user_dn of this LdapUserVM.


        :param user_dn: The user_dn of this LdapUserVM.  # noqa: E501
        :type: str
        """

        self._user_dn = user_dn

    @property
    def external_user_id(self):
        """Gets the external_user_id of this LdapUserVM.  # noqa: E501


        :return: The external_user_id of this LdapUserVM.  # noqa: E501
        :rtype: str
        """
        return self._external_user_id

    @external_user_id.setter
    def external_user_id(self, external_user_id):
        """Sets the external_user_id of this LdapUserVM.


        :param external_user_id: The external_user_id of this LdapUserVM.  # noqa: E501
        :type: str
        """

        self._external_user_id = external_user_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LdapUserVM, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LdapUserVM):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LdapUserVM):
            return True

        return self.to_dict() != other.to_dict()
