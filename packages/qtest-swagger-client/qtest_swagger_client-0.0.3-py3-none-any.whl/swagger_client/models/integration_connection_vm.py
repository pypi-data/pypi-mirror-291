# coding: utf-8

"""
    qTest Manager API Version 11.0.0 - 2023.6

    qTest Manager API Version 11.0.0 - 2023.6  # noqa: E501

    OpenAPI spec version: 11.0.0 - 2023.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class IntegrationConnectionVM(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'external_system': 'str',
        'connection_name': 'str',
        'server_url': 'str',
        'web_url': 'str',
        'active': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'external_system': 'external_system',
        'connection_name': 'connection_name',
        'server_url': 'server_url',
        'web_url': 'web_url',
        'active': 'active'
    }

    def __init__(self, id=None, external_system=None, connection_name=None, server_url=None, web_url=None, active=False, _configuration=None):  # noqa: E501
        """IntegrationConnectionVM - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._external_system = None
        self._connection_name = None
        self._server_url = None
        self._web_url = None
        self._active = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if external_system is not None:
            self.external_system = external_system
        if connection_name is not None:
            self.connection_name = connection_name
        if server_url is not None:
            self.server_url = server_url
        if web_url is not None:
            self.web_url = web_url
        if active is not None:
            self.active = active

    @property
    def id(self):
        """Gets the id of this IntegrationConnectionVM.  # noqa: E501


        :return: The id of this IntegrationConnectionVM.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IntegrationConnectionVM.


        :param id: The id of this IntegrationConnectionVM.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def external_system(self):
        """Gets the external_system of this IntegrationConnectionVM.  # noqa: E501


        :return: The external_system of this IntegrationConnectionVM.  # noqa: E501
        :rtype: str
        """
        return self._external_system

    @external_system.setter
    def external_system(self, external_system):
        """Sets the external_system of this IntegrationConnectionVM.


        :param external_system: The external_system of this IntegrationConnectionVM.  # noqa: E501
        :type: str
        """

        self._external_system = external_system

    @property
    def connection_name(self):
        """Gets the connection_name of this IntegrationConnectionVM.  # noqa: E501


        :return: The connection_name of this IntegrationConnectionVM.  # noqa: E501
        :rtype: str
        """
        return self._connection_name

    @connection_name.setter
    def connection_name(self, connection_name):
        """Sets the connection_name of this IntegrationConnectionVM.


        :param connection_name: The connection_name of this IntegrationConnectionVM.  # noqa: E501
        :type: str
        """

        self._connection_name = connection_name

    @property
    def server_url(self):
        """Gets the server_url of this IntegrationConnectionVM.  # noqa: E501


        :return: The server_url of this IntegrationConnectionVM.  # noqa: E501
        :rtype: str
        """
        return self._server_url

    @server_url.setter
    def server_url(self, server_url):
        """Sets the server_url of this IntegrationConnectionVM.


        :param server_url: The server_url of this IntegrationConnectionVM.  # noqa: E501
        :type: str
        """

        self._server_url = server_url

    @property
    def web_url(self):
        """Gets the web_url of this IntegrationConnectionVM.  # noqa: E501


        :return: The web_url of this IntegrationConnectionVM.  # noqa: E501
        :rtype: str
        """
        return self._web_url

    @web_url.setter
    def web_url(self, web_url):
        """Sets the web_url of this IntegrationConnectionVM.


        :param web_url: The web_url of this IntegrationConnectionVM.  # noqa: E501
        :type: str
        """

        self._web_url = web_url

    @property
    def active(self):
        """Gets the active of this IntegrationConnectionVM.  # noqa: E501


        :return: The active of this IntegrationConnectionVM.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this IntegrationConnectionVM.


        :param active: The active of this IntegrationConnectionVM.  # noqa: E501
        :type: bool
        """

        self._active = active

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IntegrationConnectionVM, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IntegrationConnectionVM):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IntegrationConnectionVM):
            return True

        return self.to_dict() != other.to_dict()
