# coding: utf-8

"""
    qTest Manager API Version 11.0.0 - 2023.6

    qTest Manager API Version 11.0.0 - 2023.6  # noqa: E501

    OpenAPI spec version: 11.0.0 - 2023.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class IntegrationReleaseConfigurationVM(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'auto_update': 'bool',
        'configuration_values': 'IntegrationReleaseConfigurationValues',
        'data_retrieval_options': 'list[str]',
        'auto_update_release_scope': 'str'
    }

    attribute_map = {
        'auto_update': 'autoUpdate',
        'configuration_values': 'configurationValues',
        'data_retrieval_options': 'data_retrieval_options',
        'auto_update_release_scope': 'auto_update_release_scope'
    }

    def __init__(self, auto_update=False, configuration_values=None, data_retrieval_options=None, auto_update_release_scope=None, _configuration=None):  # noqa: E501
        """IntegrationReleaseConfigurationVM - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._auto_update = None
        self._configuration_values = None
        self._data_retrieval_options = None
        self._auto_update_release_scope = None
        self.discriminator = None

        if auto_update is not None:
            self.auto_update = auto_update
        if configuration_values is not None:
            self.configuration_values = configuration_values
        if data_retrieval_options is not None:
            self.data_retrieval_options = data_retrieval_options
        if auto_update_release_scope is not None:
            self.auto_update_release_scope = auto_update_release_scope

    @property
    def auto_update(self):
        """Gets the auto_update of this IntegrationReleaseConfigurationVM.  # noqa: E501


        :return: The auto_update of this IntegrationReleaseConfigurationVM.  # noqa: E501
        :rtype: bool
        """
        return self._auto_update

    @auto_update.setter
    def auto_update(self, auto_update):
        """Sets the auto_update of this IntegrationReleaseConfigurationVM.


        :param auto_update: The auto_update of this IntegrationReleaseConfigurationVM.  # noqa: E501
        :type: bool
        """

        self._auto_update = auto_update

    @property
    def configuration_values(self):
        """Gets the configuration_values of this IntegrationReleaseConfigurationVM.  # noqa: E501


        :return: The configuration_values of this IntegrationReleaseConfigurationVM.  # noqa: E501
        :rtype: IntegrationReleaseConfigurationValues
        """
        return self._configuration_values

    @configuration_values.setter
    def configuration_values(self, configuration_values):
        """Sets the configuration_values of this IntegrationReleaseConfigurationVM.


        :param configuration_values: The configuration_values of this IntegrationReleaseConfigurationVM.  # noqa: E501
        :type: IntegrationReleaseConfigurationValues
        """

        self._configuration_values = configuration_values

    @property
    def data_retrieval_options(self):
        """Gets the data_retrieval_options of this IntegrationReleaseConfigurationVM.  # noqa: E501


        :return: The data_retrieval_options of this IntegrationReleaseConfigurationVM.  # noqa: E501
        :rtype: list[str]
        """
        return self._data_retrieval_options

    @data_retrieval_options.setter
    def data_retrieval_options(self, data_retrieval_options):
        """Sets the data_retrieval_options of this IntegrationReleaseConfigurationVM.


        :param data_retrieval_options: The data_retrieval_options of this IntegrationReleaseConfigurationVM.  # noqa: E501
        :type: list[str]
        """

        self._data_retrieval_options = data_retrieval_options

    @property
    def auto_update_release_scope(self):
        """Gets the auto_update_release_scope of this IntegrationReleaseConfigurationVM.  # noqa: E501


        :return: The auto_update_release_scope of this IntegrationReleaseConfigurationVM.  # noqa: E501
        :rtype: str
        """
        return self._auto_update_release_scope

    @auto_update_release_scope.setter
    def auto_update_release_scope(self, auto_update_release_scope):
        """Sets the auto_update_release_scope of this IntegrationReleaseConfigurationVM.


        :param auto_update_release_scope: The auto_update_release_scope of this IntegrationReleaseConfigurationVM.  # noqa: E501
        :type: str
        """

        self._auto_update_release_scope = auto_update_release_scope

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IntegrationReleaseConfigurationVM, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IntegrationReleaseConfigurationVM):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IntegrationReleaseConfigurationVM):
            return True

        return self.to_dict() != other.to_dict()
