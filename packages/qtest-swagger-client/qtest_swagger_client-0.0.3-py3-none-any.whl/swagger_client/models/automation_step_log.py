# coding: utf-8

"""
    qTest Manager API Version 11.0.0 - 2023.6

    qTest Manager API Version 11.0.0 - 2023.6  # noqa: E501

    OpenAPI spec version: 11.0.0 - 2023.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class AutomationStepLog(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'test_step_log_id': 'int',
        'actual_result': 'str',
        'status': 'str',
        'exe_date': 'datetime'
    }

    attribute_map = {
        'test_step_log_id': 'test_step_log_id',
        'actual_result': 'actual_result',
        'status': 'status',
        'exe_date': 'exe_date'
    }

    def __init__(self, test_step_log_id=None, actual_result=None, status=None, exe_date=None, _configuration=None):  # noqa: E501
        """AutomationStepLog - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._test_step_log_id = None
        self._actual_result = None
        self._status = None
        self._exe_date = None
        self.discriminator = None

        self.test_step_log_id = test_step_log_id
        if actual_result is not None:
            self.actual_result = actual_result
        if status is not None:
            self.status = status
        if exe_date is not None:
            self.exe_date = exe_date

    @property
    def test_step_log_id(self):
        """Gets the test_step_log_id of this AutomationStepLog.  # noqa: E501


        :return: The test_step_log_id of this AutomationStepLog.  # noqa: E501
        :rtype: int
        """
        return self._test_step_log_id

    @test_step_log_id.setter
    def test_step_log_id(self, test_step_log_id):
        """Sets the test_step_log_id of this AutomationStepLog.


        :param test_step_log_id: The test_step_log_id of this AutomationStepLog.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and test_step_log_id is None:
            raise ValueError("Invalid value for `test_step_log_id`, must not be `None`")  # noqa: E501

        self._test_step_log_id = test_step_log_id

    @property
    def actual_result(self):
        """Gets the actual_result of this AutomationStepLog.  # noqa: E501


        :return: The actual_result of this AutomationStepLog.  # noqa: E501
        :rtype: str
        """
        return self._actual_result

    @actual_result.setter
    def actual_result(self, actual_result):
        """Sets the actual_result of this AutomationStepLog.


        :param actual_result: The actual_result of this AutomationStepLog.  # noqa: E501
        :type: str
        """

        self._actual_result = actual_result

    @property
    def status(self):
        """Gets the status of this AutomationStepLog.  # noqa: E501


        :return: The status of this AutomationStepLog.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AutomationStepLog.


        :param status: The status of this AutomationStepLog.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def exe_date(self):
        """Gets the exe_date of this AutomationStepLog.  # noqa: E501

        Execution date  # noqa: E501

        :return: The exe_date of this AutomationStepLog.  # noqa: E501
        :rtype: datetime
        """
        return self._exe_date

    @exe_date.setter
    def exe_date(self, exe_date):
        """Sets the exe_date of this AutomationStepLog.

        Execution date  # noqa: E501

        :param exe_date: The exe_date of this AutomationStepLog.  # noqa: E501
        :type: datetime
        """

        self._exe_date = exe_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AutomationStepLog, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AutomationStepLog):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AutomationStepLog):
            return True

        return self.to_dict() != other.to_dict()
