# coding: utf-8

"""
    qTest Manager API Version 11.0.0 - 2023.6

    qTest Manager API Version 11.0.0 - 2023.6  # noqa: E501

    OpenAPI spec version: 11.0.0 - 2023.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class TestRunByRequirementIdResource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'parent_id': 'int',
        'parent_type': 'str',
        'id': 'int',
        'pid': 'str',
        'test_run_name': 'str',
        'automation': 'str',
        'order': 'int',
        'created_date': 'datetime',
        'creator_id': 'int',
        'last_modified_date': 'datetime',
        'status': 'str',
        'execution_type': 'str',
        'env': 'str',
        'test_case_id': 'int',
        'test_case_version_id': 'int',
        'test_case_version': 'str',
        'links': 'list[Link]',
        'latest_test_log': 'ShortTestLogResource',
        'test_case': 'TestCaseWithNoCustomFieldResource'
    }

    attribute_map = {
        'parent_id': 'parentId',
        'parent_type': 'parentType',
        'id': 'id',
        'pid': 'pid',
        'test_run_name': 'TestRunName',
        'automation': 'automation',
        'order': 'order',
        'created_date': 'created_date',
        'creator_id': 'creator_id',
        'last_modified_date': 'last_modified_date',
        'status': 'status',
        'execution_type': 'executionType',
        'env': 'env',
        'test_case_id': 'testCaseId',
        'test_case_version_id': 'test_case_version_id',
        'test_case_version': 'test_case_version',
        'links': 'links',
        'latest_test_log': 'latest_test_log',
        'test_case': 'test_case'
    }

    def __init__(self, parent_id=None, parent_type=None, id=None, pid=None, test_run_name=None, automation=None, order=None, created_date=None, creator_id=None, last_modified_date=None, status=None, execution_type=None, env=None, test_case_id=None, test_case_version_id=None, test_case_version=None, links=None, latest_test_log=None, test_case=None, _configuration=None):  # noqa: E501
        """TestRunByRequirementIdResource - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._parent_id = None
        self._parent_type = None
        self._id = None
        self._pid = None
        self._test_run_name = None
        self._automation = None
        self._order = None
        self._created_date = None
        self._creator_id = None
        self._last_modified_date = None
        self._status = None
        self._execution_type = None
        self._env = None
        self._test_case_id = None
        self._test_case_version_id = None
        self._test_case_version = None
        self._links = None
        self._latest_test_log = None
        self._test_case = None
        self.discriminator = None

        if parent_id is not None:
            self.parent_id = parent_id
        if parent_type is not None:
            self.parent_type = parent_type
        if id is not None:
            self.id = id
        if pid is not None:
            self.pid = pid
        if test_run_name is not None:
            self.test_run_name = test_run_name
        if automation is not None:
            self.automation = automation
        if order is not None:
            self.order = order
        if created_date is not None:
            self.created_date = created_date
        if creator_id is not None:
            self.creator_id = creator_id
        if last_modified_date is not None:
            self.last_modified_date = last_modified_date
        if status is not None:
            self.status = status
        if execution_type is not None:
            self.execution_type = execution_type
        if env is not None:
            self.env = env
        if test_case_id is not None:
            self.test_case_id = test_case_id
        if test_case_version_id is not None:
            self.test_case_version_id = test_case_version_id
        if test_case_version is not None:
            self.test_case_version = test_case_version
        if links is not None:
            self.links = links
        if latest_test_log is not None:
            self.latest_test_log = latest_test_log
        self.test_case = test_case

    @property
    def parent_id(self):
        """Gets the parent_id of this TestRunByRequirementIdResource.  # noqa: E501


        :return: The parent_id of this TestRunByRequirementIdResource.  # noqa: E501
        :rtype: int
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this TestRunByRequirementIdResource.


        :param parent_id: The parent_id of this TestRunByRequirementIdResource.  # noqa: E501
        :type: int
        """

        self._parent_id = parent_id

    @property
    def parent_type(self):
        """Gets the parent_type of this TestRunByRequirementIdResource.  # noqa: E501


        :return: The parent_type of this TestRunByRequirementIdResource.  # noqa: E501
        :rtype: str
        """
        return self._parent_type

    @parent_type.setter
    def parent_type(self, parent_type):
        """Sets the parent_type of this TestRunByRequirementIdResource.


        :param parent_type: The parent_type of this TestRunByRequirementIdResource.  # noqa: E501
        :type: str
        """
        allowed_values = ["root", "release", "test-cycle", "test-case", "test-suite"]  # noqa: E501
        if (self._configuration.client_side_validation and
                parent_type not in allowed_values):
            raise ValueError(
                "Invalid value for `parent_type` ({0}), must be one of {1}"  # noqa: E501
                .format(parent_type, allowed_values)
            )

        self._parent_type = parent_type

    @property
    def id(self):
        """Gets the id of this TestRunByRequirementIdResource.  # noqa: E501


        :return: The id of this TestRunByRequirementIdResource.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TestRunByRequirementIdResource.


        :param id: The id of this TestRunByRequirementIdResource.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def pid(self):
        """Gets the pid of this TestRunByRequirementIdResource.  # noqa: E501


        :return: The pid of this TestRunByRequirementIdResource.  # noqa: E501
        :rtype: str
        """
        return self._pid

    @pid.setter
    def pid(self, pid):
        """Sets the pid of this TestRunByRequirementIdResource.


        :param pid: The pid of this TestRunByRequirementIdResource.  # noqa: E501
        :type: str
        """

        self._pid = pid

    @property
    def test_run_name(self):
        """Gets the test_run_name of this TestRunByRequirementIdResource.  # noqa: E501


        :return: The test_run_name of this TestRunByRequirementIdResource.  # noqa: E501
        :rtype: str
        """
        return self._test_run_name

    @test_run_name.setter
    def test_run_name(self, test_run_name):
        """Sets the test_run_name of this TestRunByRequirementIdResource.


        :param test_run_name: The test_run_name of this TestRunByRequirementIdResource.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                test_run_name is not None and len(test_run_name) > 500):
            raise ValueError("Invalid value for `test_run_name`, length must be less than or equal to `500`")  # noqa: E501
        if (self._configuration.client_side_validation and
                test_run_name is not None and len(test_run_name) < 1):
            raise ValueError("Invalid value for `test_run_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._test_run_name = test_run_name

    @property
    def automation(self):
        """Gets the automation of this TestRunByRequirementIdResource.  # noqa: E501


        :return: The automation of this TestRunByRequirementIdResource.  # noqa: E501
        :rtype: str
        """
        return self._automation

    @automation.setter
    def automation(self, automation):
        """Sets the automation of this TestRunByRequirementIdResource.


        :param automation: The automation of this TestRunByRequirementIdResource.  # noqa: E501
        :type: str
        """

        self._automation = automation

    @property
    def order(self):
        """Gets the order of this TestRunByRequirementIdResource.  # noqa: E501


        :return: The order of this TestRunByRequirementIdResource.  # noqa: E501
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this TestRunByRequirementIdResource.


        :param order: The order of this TestRunByRequirementIdResource.  # noqa: E501
        :type: int
        """

        self._order = order

    @property
    def created_date(self):
        """Gets the created_date of this TestRunByRequirementIdResource.  # noqa: E501


        :return: The created_date of this TestRunByRequirementIdResource.  # noqa: E501
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this TestRunByRequirementIdResource.


        :param created_date: The created_date of this TestRunByRequirementIdResource.  # noqa: E501
        :type: datetime
        """

        self._created_date = created_date

    @property
    def creator_id(self):
        """Gets the creator_id of this TestRunByRequirementIdResource.  # noqa: E501


        :return: The creator_id of this TestRunByRequirementIdResource.  # noqa: E501
        :rtype: int
        """
        return self._creator_id

    @creator_id.setter
    def creator_id(self, creator_id):
        """Sets the creator_id of this TestRunByRequirementIdResource.


        :param creator_id: The creator_id of this TestRunByRequirementIdResource.  # noqa: E501
        :type: int
        """

        self._creator_id = creator_id

    @property
    def last_modified_date(self):
        """Gets the last_modified_date of this TestRunByRequirementIdResource.  # noqa: E501


        :return: The last_modified_date of this TestRunByRequirementIdResource.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified_date

    @last_modified_date.setter
    def last_modified_date(self, last_modified_date):
        """Sets the last_modified_date of this TestRunByRequirementIdResource.


        :param last_modified_date: The last_modified_date of this TestRunByRequirementIdResource.  # noqa: E501
        :type: datetime
        """

        self._last_modified_date = last_modified_date

    @property
    def status(self):
        """Gets the status of this TestRunByRequirementIdResource.  # noqa: E501

        Latest test-run status  # noqa: E501

        :return: The status of this TestRunByRequirementIdResource.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TestRunByRequirementIdResource.

        Latest test-run status  # noqa: E501

        :param status: The status of this TestRunByRequirementIdResource.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def execution_type(self):
        """Gets the execution_type of this TestRunByRequirementIdResource.  # noqa: E501

        Test-run type (e.g., functional, etc.)  # noqa: E501

        :return: The execution_type of this TestRunByRequirementIdResource.  # noqa: E501
        :rtype: str
        """
        return self._execution_type

    @execution_type.setter
    def execution_type(self, execution_type):
        """Sets the execution_type of this TestRunByRequirementIdResource.

        Test-run type (e.g., functional, etc.)  # noqa: E501

        :param execution_type: The execution_type of this TestRunByRequirementIdResource.  # noqa: E501
        :type: str
        """

        self._execution_type = execution_type

    @property
    def env(self):
        """Gets the env of this TestRunByRequirementIdResource.  # noqa: E501

        Test-run environment  # noqa: E501

        :return: The env of this TestRunByRequirementIdResource.  # noqa: E501
        :rtype: str
        """
        return self._env

    @env.setter
    def env(self, env):
        """Sets the env of this TestRunByRequirementIdResource.

        Test-run environment  # noqa: E501

        :param env: The env of this TestRunByRequirementIdResource.  # noqa: E501
        :type: str
        """

        self._env = env

    @property
    def test_case_id(self):
        """Gets the test_case_id of this TestRunByRequirementIdResource.  # noqa: E501


        :return: The test_case_id of this TestRunByRequirementIdResource.  # noqa: E501
        :rtype: int
        """
        return self._test_case_id

    @test_case_id.setter
    def test_case_id(self, test_case_id):
        """Sets the test_case_id of this TestRunByRequirementIdResource.


        :param test_case_id: The test_case_id of this TestRunByRequirementIdResource.  # noqa: E501
        :type: int
        """

        self._test_case_id = test_case_id

    @property
    def test_case_version_id(self):
        """Gets the test_case_version_id of this TestRunByRequirementIdResource.  # noqa: E501


        :return: The test_case_version_id of this TestRunByRequirementIdResource.  # noqa: E501
        :rtype: int
        """
        return self._test_case_version_id

    @test_case_version_id.setter
    def test_case_version_id(self, test_case_version_id):
        """Sets the test_case_version_id of this TestRunByRequirementIdResource.


        :param test_case_version_id: The test_case_version_id of this TestRunByRequirementIdResource.  # noqa: E501
        :type: int
        """

        self._test_case_version_id = test_case_version_id

    @property
    def test_case_version(self):
        """Gets the test_case_version of this TestRunByRequirementIdResource.  # noqa: E501


        :return: The test_case_version of this TestRunByRequirementIdResource.  # noqa: E501
        :rtype: str
        """
        return self._test_case_version

    @test_case_version.setter
    def test_case_version(self, test_case_version):
        """Sets the test_case_version of this TestRunByRequirementIdResource.


        :param test_case_version: The test_case_version of this TestRunByRequirementIdResource.  # noqa: E501
        :type: str
        """

        self._test_case_version = test_case_version

    @property
    def links(self):
        """Gets the links of this TestRunByRequirementIdResource.  # noqa: E501


        :return: The links of this TestRunByRequirementIdResource.  # noqa: E501
        :rtype: list[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this TestRunByRequirementIdResource.


        :param links: The links of this TestRunByRequirementIdResource.  # noqa: E501
        :type: list[Link]
        """

        self._links = links

    @property
    def latest_test_log(self):
        """Gets the latest_test_log of this TestRunByRequirementIdResource.  # noqa: E501


        :return: The latest_test_log of this TestRunByRequirementIdResource.  # noqa: E501
        :rtype: ShortTestLogResource
        """
        return self._latest_test_log

    @latest_test_log.setter
    def latest_test_log(self, latest_test_log):
        """Sets the latest_test_log of this TestRunByRequirementIdResource.


        :param latest_test_log: The latest_test_log of this TestRunByRequirementIdResource.  # noqa: E501
        :type: ShortTestLogResource
        """

        self._latest_test_log = latest_test_log

    @property
    def test_case(self):
        """Gets the test_case of this TestRunByRequirementIdResource.  # noqa: E501


        :return: The test_case of this TestRunByRequirementIdResource.  # noqa: E501
        :rtype: TestCaseWithNoCustomFieldResource
        """
        return self._test_case

    @test_case.setter
    def test_case(self, test_case):
        """Sets the test_case of this TestRunByRequirementIdResource.


        :param test_case: The test_case of this TestRunByRequirementIdResource.  # noqa: E501
        :type: TestCaseWithNoCustomFieldResource
        """
        if self._configuration.client_side_validation and test_case is None:
            raise ValueError("Invalid value for `test_case`, must not be `None`")  # noqa: E501

        self._test_case = test_case

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TestRunByRequirementIdResource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TestRunByRequirementIdResource):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TestRunByRequirementIdResource):
            return True

        return self.to_dict() != other.to_dict()
