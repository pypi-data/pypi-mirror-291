# coding: utf-8

"""
    qTest Manager API Version 11.0.0 - 2023.6

    qTest Manager API Version 11.0.0 - 2023.6  # noqa: E501

    OpenAPI spec version: 11.0.0 - 2023.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class AutomationObjectTree(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'artifact_type': 'str',
        'target_release_id': 'int',
        'target_build_id': 'int',
        'parent': 'AutomationObjectTree',
        'event_type': 'str',
        'type': 'str',
        'id': 'int',
        'name': 'str',
        'order': 'int',
        'children': 'list[str]'
    }

    attribute_map = {
        'artifact_type': 'artifactType',
        'target_release_id': 'targetReleaseId',
        'target_build_id': 'targetBuildId',
        'parent': 'parent',
        'event_type': 'eventType',
        'type': 'type',
        'id': 'id',
        'name': 'name',
        'order': 'order',
        'children': 'children'
    }

    def __init__(self, artifact_type=None, target_release_id=None, target_build_id=None, parent=None, event_type=None, type=None, id=None, name=None, order=None, children=None, _configuration=None):  # noqa: E501
        """AutomationObjectTree - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._artifact_type = None
        self._target_release_id = None
        self._target_build_id = None
        self._parent = None
        self._event_type = None
        self._type = None
        self._id = None
        self._name = None
        self._order = None
        self._children = None
        self.discriminator = None

        if artifact_type is not None:
            self.artifact_type = artifact_type
        if target_release_id is not None:
            self.target_release_id = target_release_id
        if target_build_id is not None:
            self.target_build_id = target_build_id
        if parent is not None:
            self.parent = parent
        if event_type is not None:
            self.event_type = event_type
        if type is not None:
            self.type = type
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if order is not None:
            self.order = order
        if children is not None:
            self.children = children

    @property
    def artifact_type(self):
        """Gets the artifact_type of this AutomationObjectTree.  # noqa: E501


        :return: The artifact_type of this AutomationObjectTree.  # noqa: E501
        :rtype: str
        """
        return self._artifact_type

    @artifact_type.setter
    def artifact_type(self, artifact_type):
        """Sets the artifact_type of this AutomationObjectTree.


        :param artifact_type: The artifact_type of this AutomationObjectTree.  # noqa: E501
        :type: str
        """
        allowed_values = ["INVALID", "ROOT", "TEST_CASE", "TEST_CYCLE", "TEST_SUITE", "TEST_CASE_RUN", "RELEASE"]  # noqa: E501
        if (self._configuration.client_side_validation and
                artifact_type not in allowed_values):
            raise ValueError(
                "Invalid value for `artifact_type` ({0}), must be one of {1}"  # noqa: E501
                .format(artifact_type, allowed_values)
            )

        self._artifact_type = artifact_type

    @property
    def target_release_id(self):
        """Gets the target_release_id of this AutomationObjectTree.  # noqa: E501


        :return: The target_release_id of this AutomationObjectTree.  # noqa: E501
        :rtype: int
        """
        return self._target_release_id

    @target_release_id.setter
    def target_release_id(self, target_release_id):
        """Sets the target_release_id of this AutomationObjectTree.


        :param target_release_id: The target_release_id of this AutomationObjectTree.  # noqa: E501
        :type: int
        """

        self._target_release_id = target_release_id

    @property
    def target_build_id(self):
        """Gets the target_build_id of this AutomationObjectTree.  # noqa: E501


        :return: The target_build_id of this AutomationObjectTree.  # noqa: E501
        :rtype: int
        """
        return self._target_build_id

    @target_build_id.setter
    def target_build_id(self, target_build_id):
        """Sets the target_build_id of this AutomationObjectTree.


        :param target_build_id: The target_build_id of this AutomationObjectTree.  # noqa: E501
        :type: int
        """

        self._target_build_id = target_build_id

    @property
    def parent(self):
        """Gets the parent of this AutomationObjectTree.  # noqa: E501


        :return: The parent of this AutomationObjectTree.  # noqa: E501
        :rtype: AutomationObjectTree
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this AutomationObjectTree.


        :param parent: The parent of this AutomationObjectTree.  # noqa: E501
        :type: AutomationObjectTree
        """

        self._parent = parent

    @property
    def event_type(self):
        """Gets the event_type of this AutomationObjectTree.  # noqa: E501


        :return: The event_type of this AutomationObjectTree.  # noqa: E501
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this AutomationObjectTree.


        :param event_type: The event_type of this AutomationObjectTree.  # noqa: E501
        :type: str
        """
        allowed_values = ["CREATED", "UPDATED", "DELETED"]  # noqa: E501
        if (self._configuration.client_side_validation and
                event_type not in allowed_values):
            raise ValueError(
                "Invalid value for `event_type` ({0}), must be one of {1}"  # noqa: E501
                .format(event_type, allowed_values)
            )

        self._event_type = event_type

    @property
    def type(self):
        """Gets the type of this AutomationObjectTree.  # noqa: E501


        :return: The type of this AutomationObjectTree.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AutomationObjectTree.


        :param type: The type of this AutomationObjectTree.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def id(self):
        """Gets the id of this AutomationObjectTree.  # noqa: E501


        :return: The id of this AutomationObjectTree.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AutomationObjectTree.


        :param id: The id of this AutomationObjectTree.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this AutomationObjectTree.  # noqa: E501


        :return: The name of this AutomationObjectTree.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AutomationObjectTree.


        :param name: The name of this AutomationObjectTree.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def order(self):
        """Gets the order of this AutomationObjectTree.  # noqa: E501


        :return: The order of this AutomationObjectTree.  # noqa: E501
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this AutomationObjectTree.


        :param order: The order of this AutomationObjectTree.  # noqa: E501
        :type: int
        """

        self._order = order

    @property
    def children(self):
        """Gets the children of this AutomationObjectTree.  # noqa: E501


        :return: The children of this AutomationObjectTree.  # noqa: E501
        :rtype: list[str]
        """
        return self._children

    @children.setter
    def children(self, children):
        """Sets the children of this AutomationObjectTree.


        :param children: The children of this AutomationObjectTree.  # noqa: E501
        :type: list[str]
        """

        self._children = children

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AutomationObjectTree, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AutomationObjectTree):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AutomationObjectTree):
            return True

        return self.to_dict() != other.to_dict()
