# coding: utf-8

"""
    qTest Manager API Version 11.0.0 - 2023.6

    qTest Manager API Version 11.0.0 - 2023.6  # noqa: E501

    OpenAPI spec version: 11.0.0 - 2023.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class TestRunApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_test_run_comment(self, project_id, id_or_key, body, **kwargs):  # noqa: E501
        """Adds a Comment to a Test Run  # noqa: E501

        To add a Comment to a Test Run  <strong>qTest Manager version:</strong> 7.5+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_test_run_comment(project_id, id_or_key, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param str id_or_key: The PID or ID of the Test Run. (required)
        :param CommentResource body: The Comment's content (required)
        :return: CommentResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_test_run_comment_with_http_info(project_id, id_or_key, body, **kwargs)  # noqa: E501
        else:
            (data) = self.add_test_run_comment_with_http_info(project_id, id_or_key, body, **kwargs)  # noqa: E501
            return data

    def add_test_run_comment_with_http_info(self, project_id, id_or_key, body, **kwargs):  # noqa: E501
        """Adds a Comment to a Test Run  # noqa: E501

        To add a Comment to a Test Run  <strong>qTest Manager version:</strong> 7.5+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_test_run_comment_with_http_info(project_id, id_or_key, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param str id_or_key: The PID or ID of the Test Run. (required)
        :param CommentResource body: The Comment's content (required)
        :return: CommentResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'id_or_key', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_test_run_comment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `add_test_run_comment`")  # noqa: E501
        # verify the required parameter 'id_or_key' is set
        if self.api_client.client_side_validation and ('id_or_key' not in params or
                                                       params['id_or_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id_or_key` when calling `add_test_run_comment`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `add_test_run_comment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'id_or_key' in params:
            path_params['idOrKey'] = params['id_or_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/test-runs/{idOrKey}/comments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CommentResource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_test_run_with_parameters(self, project_id, body, **kwargs):  # noqa: E501
        """Create multiple Test Runs with Parameter values manual  # noqa: E501

        To create multiple Test Runs with parameter values under root or a container (Release, Test Cycle or Test Suite). Maximum number of test runs can be created is 100.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_test_run_with_parameters(project_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param TestRunWithParameterCreateManualResource body: The Test Run's properties, its associated Test Case and list of Test runs   <em>name (optional):</em> All test runs will be created with the same name if provided. If not provided, test run name = test case name + [increased number, starting from 1]   <em>properties (optional):</em> All test runs will be created with the same property list if provided. If not provided, default property values will be used.   <strong>test_case attributes:</strong>  <em>id (required):</em> id of testcase   <em>test_case_version_id (optional):</em> Version ID of Testcase. If not specify, latest value will be used. For shared test case, only accept approved version   <em>test_runs (required):</em> list of test runs will be created by this API. For each test run, it will have list of test steps (by providing test step id) and their parameter values for each step e.g.(\"description_parameter_values\", and \"expected_parameter_values\").   <strong>You no need to specify <em>combined_type</em> and <em>number_of_combinations</em> in this api.<strong> (required)
        :param int parent_id: ID of the container  Input 0 (zero) to get Test Runs directly under root
        :param str parent_type: Type of the container. Valid values include <em>root</em>, <em>release</em>, <em>test-cycle</em>, and <em>test-suite</em>
        :return: QueueProcessingResponseTestRunDataVM
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_test_run_with_parameters_with_http_info(project_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.add_test_run_with_parameters_with_http_info(project_id, body, **kwargs)  # noqa: E501
            return data

    def add_test_run_with_parameters_with_http_info(self, project_id, body, **kwargs):  # noqa: E501
        """Create multiple Test Runs with Parameter values manual  # noqa: E501

        To create multiple Test Runs with parameter values under root or a container (Release, Test Cycle or Test Suite). Maximum number of test runs can be created is 100.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_test_run_with_parameters_with_http_info(project_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param TestRunWithParameterCreateManualResource body: The Test Run's properties, its associated Test Case and list of Test runs   <em>name (optional):</em> All test runs will be created with the same name if provided. If not provided, test run name = test case name + [increased number, starting from 1]   <em>properties (optional):</em> All test runs will be created with the same property list if provided. If not provided, default property values will be used.   <strong>test_case attributes:</strong>  <em>id (required):</em> id of testcase   <em>test_case_version_id (optional):</em> Version ID of Testcase. If not specify, latest value will be used. For shared test case, only accept approved version   <em>test_runs (required):</em> list of test runs will be created by this API. For each test run, it will have list of test steps (by providing test step id) and their parameter values for each step e.g.(\"description_parameter_values\", and \"expected_parameter_values\").   <strong>You no need to specify <em>combined_type</em> and <em>number_of_combinations</em> in this api.<strong> (required)
        :param int parent_id: ID of the container  Input 0 (zero) to get Test Runs directly under root
        :param str parent_type: Type of the container. Valid values include <em>root</em>, <em>release</em>, <em>test-cycle</em>, and <em>test-suite</em>
        :return: QueueProcessingResponseTestRunDataVM
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'body', 'parent_id', 'parent_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_test_run_with_parameters" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `add_test_run_with_parameters`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `add_test_run_with_parameters`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []
        if 'parent_id' in params:
            query_params.append(('parentId', params['parent_id']))  # noqa: E501
        if 'parent_type' in params:
            query_params.append(('parentType', params['parent_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/test-runs/assign-parameter-values/manually', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QueueProcessingResponseTestRunDataVM',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_test_run_with_parameters_dataset(self, project_id, body, **kwargs):  # noqa: E501
        """Create multiple Test Runs with Parameter values from dataset.  # noqa: E501

        To create multiple Test Runs with parameter values under root or a container (Release, Test Cycle or Test Suite). Number of test runs can be created depend on number_of_rows property and it should not more than 100.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_test_run_with_parameters_dataset(project_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param TestRunWithParameterCreateByDatasetResource body: The Test Run's properties, its associated Test Case and specific data set   <em>name (optional):</em> All test runs will be created with the same name if provided. If not provided, test run name = test case name + [increased number, starting from 1]   <em>properties (optional):</em> All test runs will be created with the same property list if provided. If not provided, default property values will be used.   <strong>test_case attributes:</strong>  <em>id (required):</em> id of testcase   <em>test_case_version_id (optional):</em> Version ID of Testcase. If not specify, latest value will be used. For shared test case, only accept approved version   <em>dataset_id:</em> Dataset id use for generate test runs. Dataset must be active and contains all parameters inside all test case steps. Dataset has at least 1 data row.   <em>from_row:</em> Must be less or equal max rows in dataset.   <em>number_of_rows:</em> number of test run can be create must be less or equal ((max rows - from_row) +1) and must be less than <em>100</em>. (required)
        :param int parent_id: ID of the container  Input 0 (zero) to get Test Runs directly under root
        :param str parent_type: Type of the container. Valid values include <em>root</em>, <em>release</em>, <em>test-cycle</em>, and <em>test-suite</em>
        :return: QueueProcessingResponseTestRunDataVM
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_test_run_with_parameters_dataset_with_http_info(project_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.add_test_run_with_parameters_dataset_with_http_info(project_id, body, **kwargs)  # noqa: E501
            return data

    def add_test_run_with_parameters_dataset_with_http_info(self, project_id, body, **kwargs):  # noqa: E501
        """Create multiple Test Runs with Parameter values from dataset.  # noqa: E501

        To create multiple Test Runs with parameter values under root or a container (Release, Test Cycle or Test Suite). Number of test runs can be created depend on number_of_rows property and it should not more than 100.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_test_run_with_parameters_dataset_with_http_info(project_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param TestRunWithParameterCreateByDatasetResource body: The Test Run's properties, its associated Test Case and specific data set   <em>name (optional):</em> All test runs will be created with the same name if provided. If not provided, test run name = test case name + [increased number, starting from 1]   <em>properties (optional):</em> All test runs will be created with the same property list if provided. If not provided, default property values will be used.   <strong>test_case attributes:</strong>  <em>id (required):</em> id of testcase   <em>test_case_version_id (optional):</em> Version ID of Testcase. If not specify, latest value will be used. For shared test case, only accept approved version   <em>dataset_id:</em> Dataset id use for generate test runs. Dataset must be active and contains all parameters inside all test case steps. Dataset has at least 1 data row.   <em>from_row:</em> Must be less or equal max rows in dataset.   <em>number_of_rows:</em> number of test run can be create must be less or equal ((max rows - from_row) +1) and must be less than <em>100</em>. (required)
        :param int parent_id: ID of the container  Input 0 (zero) to get Test Runs directly under root
        :param str parent_type: Type of the container. Valid values include <em>root</em>, <em>release</em>, <em>test-cycle</em>, and <em>test-suite</em>
        :return: QueueProcessingResponseTestRunDataVM
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'body', 'parent_id', 'parent_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_test_run_with_parameters_dataset" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `add_test_run_with_parameters_dataset`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `add_test_run_with_parameters_dataset`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []
        if 'parent_id' in params:
            query_params.append(('parentId', params['parent_id']))  # noqa: E501
        if 'parent_type' in params:
            query_params.append(('parentType', params['parent_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/test-runs/assign-parameter-values/dataset', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QueueProcessingResponseTestRunDataVM',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_test_run_with_parameters_randomize(self, project_id, body, **kwargs):  # noqa: E501
        """Create multiple Test Runs with Parameter values random from selection combine type.  # noqa: E501

        To create multiple Test Runs with parameter values under root or a container (Release, Test Cycle or Test Suite). Maximum number of test runs can be created depend on combine type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_test_run_with_parameters_randomize(project_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param TestRunWithParameterCreateRandomResource body: The Test Run's properties, its associated Test Case and combine type, number of combination   <em>name (optional):</em> All test runs will be created with the same name if provided. If not provided, test run name = test case name + [increased number, starting from 1]   <em>properties (optional):</em> All test runs will be created with the same property list if provided. If not provided, default property values will be used.   <strong>test_case attributes:</strong>  <em>id (required):</em> id of testcase   <em>test_case_version_id (optional):</em> Version ID of Testcase. If not specify, latest value will be used. For shared test case, only accept approved version   <em>combined_type:</em> combine type for generate test runs with random test run value. Values can specify for this property are: <strong>1</strong> (for unique_value ) OR <strong>0</strong> (for unique_data ).   <em>number_of_combinations:</em> number of test run can be create must be less or equal max possible created combinations based on selected combination_type and must less than <em>100</em>. (required)
        :param int parent_id: ID of the container  Input 0 (zero) to get Test Runs directly under root
        :param str parent_type: Type of the container. Valid values include <em>root</em>, <em>release</em>, <em>test-cycle</em>, and <em>test-suite</em>
        :return: QueueProcessingResponseTestRunDataVM
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_test_run_with_parameters_randomize_with_http_info(project_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.add_test_run_with_parameters_randomize_with_http_info(project_id, body, **kwargs)  # noqa: E501
            return data

    def add_test_run_with_parameters_randomize_with_http_info(self, project_id, body, **kwargs):  # noqa: E501
        """Create multiple Test Runs with Parameter values random from selection combine type.  # noqa: E501

        To create multiple Test Runs with parameter values under root or a container (Release, Test Cycle or Test Suite). Maximum number of test runs can be created depend on combine type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_test_run_with_parameters_randomize_with_http_info(project_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param TestRunWithParameterCreateRandomResource body: The Test Run's properties, its associated Test Case and combine type, number of combination   <em>name (optional):</em> All test runs will be created with the same name if provided. If not provided, test run name = test case name + [increased number, starting from 1]   <em>properties (optional):</em> All test runs will be created with the same property list if provided. If not provided, default property values will be used.   <strong>test_case attributes:</strong>  <em>id (required):</em> id of testcase   <em>test_case_version_id (optional):</em> Version ID of Testcase. If not specify, latest value will be used. For shared test case, only accept approved version   <em>combined_type:</em> combine type for generate test runs with random test run value. Values can specify for this property are: <strong>1</strong> (for unique_value ) OR <strong>0</strong> (for unique_data ).   <em>number_of_combinations:</em> number of test run can be create must be less or equal max possible created combinations based on selected combination_type and must less than <em>100</em>. (required)
        :param int parent_id: ID of the container  Input 0 (zero) to get Test Runs directly under root
        :param str parent_type: Type of the container. Valid values include <em>root</em>, <em>release</em>, <em>test-cycle</em>, and <em>test-suite</em>
        :return: QueueProcessingResponseTestRunDataVM
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'body', 'parent_id', 'parent_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_test_run_with_parameters_randomize" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `add_test_run_with_parameters_randomize`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `add_test_run_with_parameters_randomize`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []
        if 'parent_id' in params:
            query_params.append(('parentId', params['parent_id']))  # noqa: E501
        if 'parent_type' in params:
            query_params.append(('parentType', params['parent_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/test-runs/assign-parameter-values/randomize', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QueueProcessingResponseTestRunDataVM',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_test_run(self, project_id, body, **kwargs):  # noqa: E501
        """Creates a Test Run  # noqa: E501

        To create a Test Run under root or a container (Release, Test Cycle or Test Suite)  <strong>qTest Manager version:</strong> 6+You can optionally specify a parent in the request parameter to create its test runs.  The associated Test Case is specified in the request body  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_test_run(project_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param GetMultipleTestRunsResource body: The Test Run's properties and its associated Test Case (required)
        :param int parent_id: ID of the container  Input 0 (zero) to get Test Runs directly under root
        :param str parent_type: Type of the container. Valid values include <em>root</em>, <em>release</em>, <em>test-cycle</em>, and <em>test-suite</em>
        :return: GetMultipleTestRunsResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_test_run_with_http_info(project_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_test_run_with_http_info(project_id, body, **kwargs)  # noqa: E501
            return data

    def create_test_run_with_http_info(self, project_id, body, **kwargs):  # noqa: E501
        """Creates a Test Run  # noqa: E501

        To create a Test Run under root or a container (Release, Test Cycle or Test Suite)  <strong>qTest Manager version:</strong> 6+You can optionally specify a parent in the request parameter to create its test runs.  The associated Test Case is specified in the request body  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_test_run_with_http_info(project_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param GetMultipleTestRunsResource body: The Test Run's properties and its associated Test Case (required)
        :param int parent_id: ID of the container  Input 0 (zero) to get Test Runs directly under root
        :param str parent_type: Type of the container. Valid values include <em>root</em>, <em>release</em>, <em>test-cycle</em>, and <em>test-suite</em>
        :return: GetMultipleTestRunsResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'body', 'parent_id', 'parent_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_test_run" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `create_test_run`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `create_test_run`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []
        if 'parent_id' in params:
            query_params.append(('parentId', params['parent_id']))  # noqa: E501
        if 'parent_type' in params:
            query_params.append(('parentType', params['parent_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/test-runs', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetMultipleTestRunsResource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_comment_by_id(self, project_id, id_or_key, comment_id, **kwargs):  # noqa: E501
        """Deletes a Comment of a Test Run  # noqa: E501

        To delete a Comment of a Test Run  <strong>qTest Manager version:</strong> 7.5+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_comment_by_id(project_id, id_or_key, comment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param str id_or_key: PID or ID of the Test Run. (required)
        :param int comment_id: ID of the comment which you want to delete. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_comment_by_id_with_http_info(project_id, id_or_key, comment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_comment_by_id_with_http_info(project_id, id_or_key, comment_id, **kwargs)  # noqa: E501
            return data

    def delete_comment_by_id_with_http_info(self, project_id, id_or_key, comment_id, **kwargs):  # noqa: E501
        """Deletes a Comment of a Test Run  # noqa: E501

        To delete a Comment of a Test Run  <strong>qTest Manager version:</strong> 7.5+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_comment_by_id_with_http_info(project_id, id_or_key, comment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param str id_or_key: PID or ID of the Test Run. (required)
        :param int comment_id: ID of the comment which you want to delete. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'id_or_key', 'comment_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_comment_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `delete_comment_by_id`")  # noqa: E501
        # verify the required parameter 'id_or_key' is set
        if self.api_client.client_side_validation and ('id_or_key' not in params or
                                                       params['id_or_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id_or_key` when calling `delete_comment_by_id`")  # noqa: E501
        # verify the required parameter 'comment_id' is set
        if self.api_client.client_side_validation and ('comment_id' not in params or
                                                       params['comment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `comment_id` when calling `delete_comment_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'id_or_key' in params:
            path_params['idOrKey'] = params['id_or_key']  # noqa: E501
        if 'comment_id' in params:
            path_params['commentId'] = params['comment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/test-runs/{idOrKey}/comments/{commentId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_test_run_by_id(self, project_id, test_run_id, **kwargs):  # noqa: E501
        """Deletes a Test Run  # noqa: E501

        To delete a Test Run  <strong>qTest Manager version:</strong> 6+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_test_run_by_id(project_id, test_run_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int test_run_id: ID of the Test Run (required)
        :return: Message
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_test_run_by_id_with_http_info(project_id, test_run_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_test_run_by_id_with_http_info(project_id, test_run_id, **kwargs)  # noqa: E501
            return data

    def delete_test_run_by_id_with_http_info(self, project_id, test_run_id, **kwargs):  # noqa: E501
        """Deletes a Test Run  # noqa: E501

        To delete a Test Run  <strong>qTest Manager version:</strong> 6+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_test_run_by_id_with_http_info(project_id, test_run_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int test_run_id: ID of the Test Run (required)
        :return: Message
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'test_run_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_test_run_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `delete_test_run_by_id`")  # noqa: E501
        # verify the required parameter 'test_run_id' is set
        if self.api_client.client_side_validation and ('test_run_id' not in params or
                                                       params['test_run_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `test_run_id` when calling `delete_test_run_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'test_run_id' in params:
            path_params['testRunId'] = params['test_run_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/test-runs/{testRunId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Message',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_of(self, project_id, **kwargs):  # noqa: E501
        """Gets multiple Test Runs  # noqa: E501

        To retrieve all Test Runs under root or under a container (Release, Test Cycle or Test Suite)  <strong>qTest Manager version:</strong> 6+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_of(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int parent_id: ID of the container (Release, Test Cycle or Test Suite)  Input 0 (zero) to retrieve Test Runs directly under root
        :param str parent_type: Type of the container. Valid values include <em>root</em>, <em>release</em>, <em>test-cycle</em> and <em>test-suite</em>
        :param str expand: Specify <em>expand=descendants</em> to include all Test Runs which are directly or indirectly under the container
        :param bool include_tosca_properties: By default, Tosca properties of Test Run (imported from Tosca) are not included in the response. Specify includeToscaProperties=true to include them.   <em>(tosca_guid, tosca_node_path, tosca_workspace_url, tosca_testevent_guid)</em>
        :param int page: By default the first page is returned but you can specify any page number to retrieve objects
        :param int page_size: The result is paginated. By the default, the number of objects in each page is 100 if this is omitted. You can specify your custom number (up to 999) in this parameter
        :return: GetMultipleTestRunListResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_of_with_http_info(project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_of_with_http_info(project_id, **kwargs)  # noqa: E501
            return data

    def get_of_with_http_info(self, project_id, **kwargs):  # noqa: E501
        """Gets multiple Test Runs  # noqa: E501

        To retrieve all Test Runs under root or under a container (Release, Test Cycle or Test Suite)  <strong>qTest Manager version:</strong> 6+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_of_with_http_info(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int parent_id: ID of the container (Release, Test Cycle or Test Suite)  Input 0 (zero) to retrieve Test Runs directly under root
        :param str parent_type: Type of the container. Valid values include <em>root</em>, <em>release</em>, <em>test-cycle</em> and <em>test-suite</em>
        :param str expand: Specify <em>expand=descendants</em> to include all Test Runs which are directly or indirectly under the container
        :param bool include_tosca_properties: By default, Tosca properties of Test Run (imported from Tosca) are not included in the response. Specify includeToscaProperties=true to include them.   <em>(tosca_guid, tosca_node_path, tosca_workspace_url, tosca_testevent_guid)</em>
        :param int page: By default the first page is returned but you can specify any page number to retrieve objects
        :param int page_size: The result is paginated. By the default, the number of objects in each page is 100 if this is omitted. You can specify your custom number (up to 999) in this parameter
        :return: GetMultipleTestRunListResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'parent_id', 'parent_type', 'expand', 'include_tosca_properties', 'page', 'page_size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_of" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `get_of`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []
        if 'parent_id' in params:
            query_params.append(('parentId', params['parent_id']))  # noqa: E501
        if 'parent_type' in params:
            query_params.append(('parentType', params['parent_type']))  # noqa: E501
        if 'expand' in params:
            query_params.append(('expand', params['expand']))  # noqa: E501
        if 'include_tosca_properties' in params:
            query_params.append(('includeToscaProperties', params['include_tosca_properties']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/test-runs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetMultipleTestRunListResource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_status_valuable(self, project_id, **kwargs):  # noqa: E501
        """Gets Test Run statuses  # noqa: E501

        Gets Test Run statuses  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_status_valuable(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :return: list[StatusResource]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_status_valuable_with_http_info(project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_status_valuable_with_http_info(project_id, **kwargs)  # noqa: E501
            return data

    def get_status_valuable_with_http_info(self, project_id, **kwargs):  # noqa: E501
        """Gets Test Run statuses  # noqa: E501

        Gets Test Run statuses  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_status_valuable_with_http_info(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :return: list[StatusResource]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_status_valuable" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `get_status_valuable`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/test-runs/execution-statuses', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[StatusResource]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_subhierachy(self, project_id, **kwargs):  # noqa: E501
        """Gets a Sub Hierarchy  # noqa: E501

        To retrieve a Sub Hierarchy of a container (root, release, test-cycle)   <strong>qTest Manager version:</strong> 9.3.4+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_subhierachy(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param str parent_type: parentType
        :param int parent_id: parentId
        :return: AutomationObjectTree
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_subhierachy_with_http_info(project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_subhierachy_with_http_info(project_id, **kwargs)  # noqa: E501
            return data

    def get_subhierachy_with_http_info(self, project_id, **kwargs):  # noqa: E501
        """Gets a Sub Hierarchy  # noqa: E501

        To retrieve a Sub Hierarchy of a container (root, release, test-cycle)   <strong>qTest Manager version:</strong> 9.3.4+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_subhierachy_with_http_info(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param str parent_type: parentType
        :param int parent_id: parentId
        :return: AutomationObjectTree
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'parent_type', 'parent_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_subhierachy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `get_subhierachy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []
        if 'parent_type' in params:
            query_params.append(('parentType', params['parent_type']))  # noqa: E501
        if 'parent_id' in params:
            query_params.append(('parentId', params['parent_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/test-runs/subhierarchy', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AutomationObjectTree',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_test_run_by_id(self, project_id, test_run_id, **kwargs):  # noqa: E501
        """Gets a Test Run  # noqa: E501

        To retrieve a Test Run  <strong>qTest Manager version:</strong> 4+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_test_run_by_id(project_id, test_run_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int test_run_id: ID of the Test Run. (required)
        :param str expand: Valid values include:   i)<em>testcase</em> - to expand the associated Test Case in the response;   ii) <em>testcase.teststep</em> - to expand the associated Test Case and its Test Steps in the response
        :param bool include_tosca_properties: By default, Tosca properties of Test Run (imported from Tosca) are not included in the response. Specify includeToscaProperties=true to include them.   <em>(tosca_guid, tosca_node_path, tosca_workspace_url, tosca_testevent_guid)</em>
        :return: TestRunWithCustomFieldResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_test_run_by_id_with_http_info(project_id, test_run_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_test_run_by_id_with_http_info(project_id, test_run_id, **kwargs)  # noqa: E501
            return data

    def get_test_run_by_id_with_http_info(self, project_id, test_run_id, **kwargs):  # noqa: E501
        """Gets a Test Run  # noqa: E501

        To retrieve a Test Run  <strong>qTest Manager version:</strong> 4+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_test_run_by_id_with_http_info(project_id, test_run_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int test_run_id: ID of the Test Run. (required)
        :param str expand: Valid values include:   i)<em>testcase</em> - to expand the associated Test Case in the response;   ii) <em>testcase.teststep</em> - to expand the associated Test Case and its Test Steps in the response
        :param bool include_tosca_properties: By default, Tosca properties of Test Run (imported from Tosca) are not included in the response. Specify includeToscaProperties=true to include them.   <em>(tosca_guid, tosca_node_path, tosca_workspace_url, tosca_testevent_guid)</em>
        :return: TestRunWithCustomFieldResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'test_run_id', 'expand', 'include_tosca_properties']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_test_run_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `get_test_run_by_id`")  # noqa: E501
        # verify the required parameter 'test_run_id' is set
        if self.api_client.client_side_validation and ('test_run_id' not in params or
                                                       params['test_run_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `test_run_id` when calling `get_test_run_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'test_run_id' in params:
            path_params['testRunId'] = params['test_run_id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('expand', params['expand']))  # noqa: E501
        if 'include_tosca_properties' in params:
            query_params.append(('includeToscaProperties', params['include_tosca_properties']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/test-runs/{testRunId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TestRunWithCustomFieldResource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_test_run_comment_by_id(self, project_id, id_or_key, comment_id, **kwargs):  # noqa: E501
        """Gets a Comment from a Test Run  # noqa: E501

        To retrieve a specific Comment from a Test Run  <strong>qTest Manager version:</strong> 7.5+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_test_run_comment_by_id(project_id, id_or_key, comment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param str id_or_key: PID or ID of the Test Run. (required)
        :param int comment_id: ID of the Comment (required)
        :return: CommentResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_test_run_comment_by_id_with_http_info(project_id, id_or_key, comment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_test_run_comment_by_id_with_http_info(project_id, id_or_key, comment_id, **kwargs)  # noqa: E501
            return data

    def get_test_run_comment_by_id_with_http_info(self, project_id, id_or_key, comment_id, **kwargs):  # noqa: E501
        """Gets a Comment from a Test Run  # noqa: E501

        To retrieve a specific Comment from a Test Run  <strong>qTest Manager version:</strong> 7.5+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_test_run_comment_by_id_with_http_info(project_id, id_or_key, comment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param str id_or_key: PID or ID of the Test Run. (required)
        :param int comment_id: ID of the Comment (required)
        :return: CommentResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'id_or_key', 'comment_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_test_run_comment_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `get_test_run_comment_by_id`")  # noqa: E501
        # verify the required parameter 'id_or_key' is set
        if self.api_client.client_side_validation and ('id_or_key' not in params or
                                                       params['id_or_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id_or_key` when calling `get_test_run_comment_by_id`")  # noqa: E501
        # verify the required parameter 'comment_id' is set
        if self.api_client.client_side_validation and ('comment_id' not in params or
                                                       params['comment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `comment_id` when calling `get_test_run_comment_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'id_or_key' in params:
            path_params['idOrKey'] = params['id_or_key']  # noqa: E501
        if 'comment_id' in params:
            path_params['commentId'] = params['comment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/test-runs/{idOrKey}/comments/{commentId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CommentResource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_test_run_comments(self, project_id, id_or_key, **kwargs):  # noqa: E501
        """Gets all Comments of a Test Run  # noqa: E501

        To retrieve all Comments of a Test Run  <strong>qTest Manager version:</strong> 7.5+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_test_run_comments(project_id, id_or_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param str id_or_key: PID or ID of the Test Run (required)
        :return: PagedResourceCommentResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_test_run_comments_with_http_info(project_id, id_or_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_test_run_comments_with_http_info(project_id, id_or_key, **kwargs)  # noqa: E501
            return data

    def get_test_run_comments_with_http_info(self, project_id, id_or_key, **kwargs):  # noqa: E501
        """Gets all Comments of a Test Run  # noqa: E501

        To retrieve all Comments of a Test Run  <strong>qTest Manager version:</strong> 7.5+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_test_run_comments_with_http_info(project_id, id_or_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param str id_or_key: PID or ID of the Test Run (required)
        :return: PagedResourceCommentResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'id_or_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_test_run_comments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `get_test_run_comments`")  # noqa: E501
        # verify the required parameter 'id_or_key' is set
        if self.api_client.client_side_validation and ('id_or_key' not in params or
                                                       params['id_or_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id_or_key` when calling `get_test_run_comments`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'id_or_key' in params:
            path_params['idOrKey'] = params['id_or_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/test-runs/{idOrKey}/comments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedResourceCommentResource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_comment_by_id(self, project_id, id_or_key, comment_id, body, **kwargs):  # noqa: E501
        """Updates a Comment of a Test Run  # noqa: E501

        To update a Comment of a Test Run  <strong>qTest Manager version:</strong> 7.5+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_comment_by_id(project_id, id_or_key, comment_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param str id_or_key: PID or ID of the Test Run (required)
        :param int comment_id: ID of the comment which you want to update. (required)
        :param CommentResource body: The Comment's updated content (required)
        :return: CommentResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_comment_by_id_with_http_info(project_id, id_or_key, comment_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_comment_by_id_with_http_info(project_id, id_or_key, comment_id, body, **kwargs)  # noqa: E501
            return data

    def update_comment_by_id_with_http_info(self, project_id, id_or_key, comment_id, body, **kwargs):  # noqa: E501
        """Updates a Comment of a Test Run  # noqa: E501

        To update a Comment of a Test Run  <strong>qTest Manager version:</strong> 7.5+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_comment_by_id_with_http_info(project_id, id_or_key, comment_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param str id_or_key: PID or ID of the Test Run (required)
        :param int comment_id: ID of the comment which you want to update. (required)
        :param CommentResource body: The Comment's updated content (required)
        :return: CommentResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'id_or_key', 'comment_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_comment_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `update_comment_by_id`")  # noqa: E501
        # verify the required parameter 'id_or_key' is set
        if self.api_client.client_side_validation and ('id_or_key' not in params or
                                                       params['id_or_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id_or_key` when calling `update_comment_by_id`")  # noqa: E501
        # verify the required parameter 'comment_id' is set
        if self.api_client.client_side_validation and ('comment_id' not in params or
                                                       params['comment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `comment_id` when calling `update_comment_by_id`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `update_comment_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'id_or_key' in params:
            path_params['idOrKey'] = params['id_or_key']  # noqa: E501
        if 'comment_id' in params:
            path_params['commentId'] = params['comment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/test-runs/{idOrKey}/comments/{commentId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CommentResource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_test_run_by_id(self, project_id, test_run_id, body, **kwargs):  # noqa: E501
        """Updates a Test Run  # noqa: E501

        To update a Test Run or move it to another container  <strong>qTest Manager version:</strong> 6+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_test_run_by_id(project_id, test_run_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int test_run_id: ID of the Test Run. (required)
        :param TestRunWithCustomFieldResource body: The Test Run's updated properties (required)
        :param int parent_id: ID of the container (Release, Test Cycle or Test Suite)  Input 0 (zero) to move the test run to under root  <strong>Important:</strong> If you use the request parameters, the request body will be ignored. That means the test run is being moved but it will not be updated with the properties specify in the request body
        :param str parent_type: Type of the container. Valid values include <em>root</em>, <em>release</em>, <em>test-cycle</em> and <em>test-suite</em>
        :return: TestRunWithCustomFieldResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_test_run_by_id_with_http_info(project_id, test_run_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_test_run_by_id_with_http_info(project_id, test_run_id, body, **kwargs)  # noqa: E501
            return data

    def update_test_run_by_id_with_http_info(self, project_id, test_run_id, body, **kwargs):  # noqa: E501
        """Updates a Test Run  # noqa: E501

        To update a Test Run or move it to another container  <strong>qTest Manager version:</strong> 6+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_test_run_by_id_with_http_info(project_id, test_run_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int test_run_id: ID of the Test Run. (required)
        :param TestRunWithCustomFieldResource body: The Test Run's updated properties (required)
        :param int parent_id: ID of the container (Release, Test Cycle or Test Suite)  Input 0 (zero) to move the test run to under root  <strong>Important:</strong> If you use the request parameters, the request body will be ignored. That means the test run is being moved but it will not be updated with the properties specify in the request body
        :param str parent_type: Type of the container. Valid values include <em>root</em>, <em>release</em>, <em>test-cycle</em> and <em>test-suite</em>
        :return: TestRunWithCustomFieldResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'test_run_id', 'body', 'parent_id', 'parent_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_test_run_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `update_test_run_by_id`")  # noqa: E501
        # verify the required parameter 'test_run_id' is set
        if self.api_client.client_side_validation and ('test_run_id' not in params or
                                                       params['test_run_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `test_run_id` when calling `update_test_run_by_id`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `update_test_run_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'test_run_id' in params:
            path_params['testRunId'] = params['test_run_id']  # noqa: E501

        query_params = []
        if 'parent_id' in params:
            query_params.append(('parentId', params['parent_id']))  # noqa: E501
        if 'parent_type' in params:
            query_params.append(('parentType', params['parent_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/test-runs/{testRunId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TestRunWithCustomFieldResource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
