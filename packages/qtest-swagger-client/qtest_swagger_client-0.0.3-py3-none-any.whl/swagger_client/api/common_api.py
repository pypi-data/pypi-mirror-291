# coding: utf-8

"""
    qTest Manager API Version 11.0.0 - 2023.6

    qTest Manager API Version 11.0.0 - 2023.6  # noqa: E501

    OpenAPI spec version: 11.0.0 - 2023.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class CommonApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def edit_system_field(self, project_id, field_id, body, object_type, **kwargs):  # noqa: E501
        """Edit System Field of an Object Type by the field  # noqa: E501

        To edit System Field of an Object Type by the field  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_system_field(project_id, field_id, body, object_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int field_id: ID of the field. (required)
        :param FieldResource body: Given resource to edit a system field. (required)
        :param str object_type: Valid values include releases, builds, requirements, test-cases, test-steps, defects, test-suites and test-runs (required)
        :return: FieldResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_system_field_with_http_info(project_id, field_id, body, object_type, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_system_field_with_http_info(project_id, field_id, body, object_type, **kwargs)  # noqa: E501
            return data

    def edit_system_field_with_http_info(self, project_id, field_id, body, object_type, **kwargs):  # noqa: E501
        """Edit System Field of an Object Type by the field  # noqa: E501

        To edit System Field of an Object Type by the field  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_system_field_with_http_info(project_id, field_id, body, object_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int field_id: ID of the field. (required)
        :param FieldResource body: Given resource to edit a system field. (required)
        :param str object_type: Valid values include releases, builds, requirements, test-cases, test-steps, defects, test-suites and test-runs (required)
        :return: FieldResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'field_id', 'body', 'object_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_system_field" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `edit_system_field`")  # noqa: E501
        # verify the required parameter 'field_id' is set
        if self.api_client.client_side_validation and ('field_id' not in params or
                                                       params['field_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `field_id` when calling `edit_system_field`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `edit_system_field`")  # noqa: E501
        # verify the required parameter 'object_type' is set
        if self.api_client.client_side_validation and ('object_type' not in params or
                                                       params['object_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_type` when calling `edit_system_field`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'field_id' in params:
            path_params['fieldId'] = params['field_id']  # noqa: E501
        if 'object_type' in params:
            path_params['objectType'] = params['object_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/settings/{objectType}/system-fields/{fieldId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FieldResource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_custom_field_status(self, project_id, object_type, body, **kwargs):  # noqa: E501
        """Update active or inactive custom fields of an Object Type  # noqa: E501

        To update active or inactive custom fields of an Object Type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_custom_field_status(project_id, object_type, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param str object_type: Valid values include releases, builds, requirements, test-cases, test-steps, defects, test-suites and test-runs (required)
        :param list[FieldResource] body: Given resource to update custom fields. (required)
        :return: list[FieldResource]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_custom_field_status_with_http_info(project_id, object_type, body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_custom_field_status_with_http_info(project_id, object_type, body, **kwargs)  # noqa: E501
            return data

    def update_custom_field_status_with_http_info(self, project_id, object_type, body, **kwargs):  # noqa: E501
        """Update active or inactive custom fields of an Object Type  # noqa: E501

        To update active or inactive custom fields of an Object Type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_custom_field_status_with_http_info(project_id, object_type, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param str object_type: Valid values include releases, builds, requirements, test-cases, test-steps, defects, test-suites and test-runs (required)
        :param list[FieldResource] body: Given resource to update custom fields. (required)
        :return: list[FieldResource]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'object_type', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_custom_field_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `update_custom_field_status`")  # noqa: E501
        # verify the required parameter 'object_type' is set
        if self.api_client.client_side_validation and ('object_type' not in params or
                                                       params['object_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_type` when calling `update_custom_field_status`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `update_custom_field_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'object_type' in params:
            path_params['objectType'] = params['object_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/settings/{objectType}/custom-fields/active', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[FieldResource]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
