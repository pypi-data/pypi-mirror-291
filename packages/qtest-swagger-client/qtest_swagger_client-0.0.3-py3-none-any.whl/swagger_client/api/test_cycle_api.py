# coding: utf-8

"""
    qTest Manager API Version 11.0.0 - 2023.6

    qTest Manager API Version 11.0.0 - 2023.6  # noqa: E501

    OpenAPI spec version: 11.0.0 - 2023.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class TestCycleApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_cycle(self, project_id, body, **kwargs):  # noqa: E501
        """Create a Test Cycle  # noqa: E501

        To create a Test Cycle  <strong>qTest Manager version:</strong> 6+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_cycle(project_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param TestCycleResource body: Given resource to create a test cycle. (required)
        :param int parent_id: ID of the Release or Test Cycle under which the newly created Test Cycle will be located.   Use 0 (zero) to create the Test Cycle under the root
        :param str parent_type: The artifact type of the parent folder. Valid values include <em>release</em>, <em>test-cycle</em> or <em>root</em>
        :return: TestCycleResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_cycle_with_http_info(project_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_cycle_with_http_info(project_id, body, **kwargs)  # noqa: E501
            return data

    def create_cycle_with_http_info(self, project_id, body, **kwargs):  # noqa: E501
        """Create a Test Cycle  # noqa: E501

        To create a Test Cycle  <strong>qTest Manager version:</strong> 6+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_cycle_with_http_info(project_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param TestCycleResource body: Given resource to create a test cycle. (required)
        :param int parent_id: ID of the Release or Test Cycle under which the newly created Test Cycle will be located.   Use 0 (zero) to create the Test Cycle under the root
        :param str parent_type: The artifact type of the parent folder. Valid values include <em>release</em>, <em>test-cycle</em> or <em>root</em>
        :return: TestCycleResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'body', 'parent_id', 'parent_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_cycle" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `create_cycle`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `create_cycle`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []
        if 'parent_id' in params:
            query_params.append(('parentId', params['parent_id']))  # noqa: E501
        if 'parent_type' in params:
            query_params.append(('parentType', params['parent_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/test-cycles', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TestCycleResource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_cycle(self, project_id, test_cycle_id, **kwargs):  # noqa: E501
        """Deletes a Test Cycle  # noqa: E501

        To delete a Test Cycle  <strong>qTest Manager version:</strong> 6+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_cycle(project_id, test_cycle_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int test_cycle_id: ID of the Test Cycle which needs to be deleted. (required)
        :param bool force: The Test Cycle can only be deleted if it contains no children. Specify <em>force=true</em> to delete the Test Cycle and its children
        :return: Message
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_cycle_with_http_info(project_id, test_cycle_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_cycle_with_http_info(project_id, test_cycle_id, **kwargs)  # noqa: E501
            return data

    def delete_cycle_with_http_info(self, project_id, test_cycle_id, **kwargs):  # noqa: E501
        """Deletes a Test Cycle  # noqa: E501

        To delete a Test Cycle  <strong>qTest Manager version:</strong> 6+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_cycle_with_http_info(project_id, test_cycle_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int test_cycle_id: ID of the Test Cycle which needs to be deleted. (required)
        :param bool force: The Test Cycle can only be deleted if it contains no children. Specify <em>force=true</em> to delete the Test Cycle and its children
        :return: Message
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'test_cycle_id', 'force']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_cycle" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `delete_cycle`")  # noqa: E501
        # verify the required parameter 'test_cycle_id' is set
        if self.api_client.client_side_validation and ('test_cycle_id' not in params or
                                                       params['test_cycle_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `test_cycle_id` when calling `delete_cycle`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'test_cycle_id' in params:
            path_params['testCycleId'] = params['test_cycle_id']  # noqa: E501

        query_params = []
        if 'force' in params:
            query_params.append(('force', params['force']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/test-cycles/{testCycleId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Message',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_test_cycle(self, project_id, test_cycle_id, **kwargs):  # noqa: E501
        """Gets a Test Cycle  # noqa: E501

        To retrieve a Test Cycle  <strong>qTest Manager version:</strong> 6+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_test_cycle(project_id, test_cycle_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int test_cycle_id: ID of the Test Cycle which you want to retrieve. (required)
        :param str expand: Specify <em>expand=descendants</em> to include its sub and grand-sub Test Cycles and Test Suites in the response
        :return: TestCycleResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_test_cycle_with_http_info(project_id, test_cycle_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_test_cycle_with_http_info(project_id, test_cycle_id, **kwargs)  # noqa: E501
            return data

    def get_test_cycle_with_http_info(self, project_id, test_cycle_id, **kwargs):  # noqa: E501
        """Gets a Test Cycle  # noqa: E501

        To retrieve a Test Cycle  <strong>qTest Manager version:</strong> 6+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_test_cycle_with_http_info(project_id, test_cycle_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int test_cycle_id: ID of the Test Cycle which you want to retrieve. (required)
        :param str expand: Specify <em>expand=descendants</em> to include its sub and grand-sub Test Cycles and Test Suites in the response
        :return: TestCycleResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'test_cycle_id', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_test_cycle" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `get_test_cycle`")  # noqa: E501
        # verify the required parameter 'test_cycle_id' is set
        if self.api_client.client_side_validation and ('test_cycle_id' not in params or
                                                       params['test_cycle_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `test_cycle_id` when calling `get_test_cycle`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'test_cycle_id' in params:
            path_params['testCycleId'] = params['test_cycle_id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('expand', params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/test-cycles/{testCycleId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TestCycleResource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_test_cycles(self, project_id, **kwargs):  # noqa: E501
        """Gets multiple Test Cycles  # noqa: E501

        To retrieve Test Cycles which are located directly under root or a Release/Test Cycle  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_test_cycles(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int parent_id: ID of the Release or Test Cycle which directly contains the Test Cycles you are retrieving. Input 0 (zero) to get Test Cycles directly under root
        :param str parent_type: The artifact type of the parent folder. Valid values include <em>release</em>, <em>test-cycle</em> or <em>root</em>
        :param str expand: Specify <em>expand=descendants</em> to retrieve the Test Cycles' sub and grand-sub Cycles/Suites
        :param bool tosca: tosca
        :param int page: Specify any page number to retrieve Test Cycles
        :param int page_size: Specify any page size to retrieve Test Cycles
        :return: list[TestCycleResource]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_test_cycles_with_http_info(project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_test_cycles_with_http_info(project_id, **kwargs)  # noqa: E501
            return data

    def get_test_cycles_with_http_info(self, project_id, **kwargs):  # noqa: E501
        """Gets multiple Test Cycles  # noqa: E501

        To retrieve Test Cycles which are located directly under root or a Release/Test Cycle  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_test_cycles_with_http_info(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int parent_id: ID of the Release or Test Cycle which directly contains the Test Cycles you are retrieving. Input 0 (zero) to get Test Cycles directly under root
        :param str parent_type: The artifact type of the parent folder. Valid values include <em>release</em>, <em>test-cycle</em> or <em>root</em>
        :param str expand: Specify <em>expand=descendants</em> to retrieve the Test Cycles' sub and grand-sub Cycles/Suites
        :param bool tosca: tosca
        :param int page: Specify any page number to retrieve Test Cycles
        :param int page_size: Specify any page size to retrieve Test Cycles
        :return: list[TestCycleResource]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'parent_id', 'parent_type', 'expand', 'tosca', 'page', 'page_size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_test_cycles" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `get_test_cycles`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []
        if 'parent_id' in params:
            query_params.append(('parentId', params['parent_id']))  # noqa: E501
        if 'parent_type' in params:
            query_params.append(('parentType', params['parent_type']))  # noqa: E501
        if 'expand' in params:
            query_params.append(('expand', params['expand']))  # noqa: E501
        if 'tosca' in params:
            query_params.append(('tosca', params['tosca']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/test-cycles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TestCycleResource]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_cycle(self, project_id, test_cycle_id, body, **kwargs):  # noqa: E501
        """Updates a Test Cycle  # noqa: E501

        To update a Test Cycle or move it to another container  <strong>qTest Manager version:</strong> 6+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_cycle(project_id, test_cycle_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int test_cycle_id: ID of the Test Cycle which needs to be updated. (required)
        :param TestCycleResource body: The Test Cycle's updated properties (required)
        :param int parent_id: ID of a Release or parent Test Cycle which the updated Test Cycle will be moved to. Input 0 (zero) to move the Test Cycle to under root
        :param str parent_type: The artifact type of the parent folder to which the Test Cycle will be moved to. Valid values include <em>release</em>, <em>test-cycle</em> or <em>root</em>
        :return: TestCycleResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_cycle_with_http_info(project_id, test_cycle_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_cycle_with_http_info(project_id, test_cycle_id, body, **kwargs)  # noqa: E501
            return data

    def update_cycle_with_http_info(self, project_id, test_cycle_id, body, **kwargs):  # noqa: E501
        """Updates a Test Cycle  # noqa: E501

        To update a Test Cycle or move it to another container  <strong>qTest Manager version:</strong> 6+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_cycle_with_http_info(project_id, test_cycle_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int test_cycle_id: ID of the Test Cycle which needs to be updated. (required)
        :param TestCycleResource body: The Test Cycle's updated properties (required)
        :param int parent_id: ID of a Release or parent Test Cycle which the updated Test Cycle will be moved to. Input 0 (zero) to move the Test Cycle to under root
        :param str parent_type: The artifact type of the parent folder to which the Test Cycle will be moved to. Valid values include <em>release</em>, <em>test-cycle</em> or <em>root</em>
        :return: TestCycleResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'test_cycle_id', 'body', 'parent_id', 'parent_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_cycle" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `update_cycle`")  # noqa: E501
        # verify the required parameter 'test_cycle_id' is set
        if self.api_client.client_side_validation and ('test_cycle_id' not in params or
                                                       params['test_cycle_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `test_cycle_id` when calling `update_cycle`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `update_cycle`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'test_cycle_id' in params:
            path_params['testCycleId'] = params['test_cycle_id']  # noqa: E501

        query_params = []
        if 'parent_id' in params:
            query_params.append(('parentId', params['parent_id']))  # noqa: E501
        if 'parent_type' in params:
            query_params.append(('parentType', params['parent_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/test-cycles/{testCycleId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TestCycleResource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
