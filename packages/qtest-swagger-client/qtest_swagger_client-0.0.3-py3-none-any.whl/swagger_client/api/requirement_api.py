# coding: utf-8

"""
    qTest Manager API Version 11.0.0 - 2023.6

    qTest Manager API Version 11.0.0 - 2023.6  # noqa: E501

    OpenAPI spec version: 11.0.0 - 2023.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class RequirementApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_requirement_comment(self, project_id, id_or_key, body, **kwargs):  # noqa: E501
        """Adds a Comment to a Requirement  # noqa: E501

        To add a comment to a Requirement  <strong>qTest Manager version:</strong> 7.5+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_requirement_comment(project_id, id_or_key, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param str id_or_key: PID or ID of the Requirement. (required)
        :param CommentResource body: The comment's properties and its content (required)
        :return: CommentResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_requirement_comment_with_http_info(project_id, id_or_key, body, **kwargs)  # noqa: E501
        else:
            (data) = self.add_requirement_comment_with_http_info(project_id, id_or_key, body, **kwargs)  # noqa: E501
            return data

    def add_requirement_comment_with_http_info(self, project_id, id_or_key, body, **kwargs):  # noqa: E501
        """Adds a Comment to a Requirement  # noqa: E501

        To add a comment to a Requirement  <strong>qTest Manager version:</strong> 7.5+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_requirement_comment_with_http_info(project_id, id_or_key, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param str id_or_key: PID or ID of the Requirement. (required)
        :param CommentResource body: The comment's properties and its content (required)
        :return: CommentResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'id_or_key', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_requirement_comment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `add_requirement_comment`")  # noqa: E501
        # verify the required parameter 'id_or_key' is set
        if self.api_client.client_side_validation and ('id_or_key' not in params or
                                                       params['id_or_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id_or_key` when calling `add_requirement_comment`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `add_requirement_comment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'id_or_key' in params:
            path_params['idOrKey'] = params['id_or_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/requirements/{idOrKey}/comments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CommentResource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_requirement(self, project_id, body, **kwargs):  # noqa: E501
        """Creates a Requirement  # noqa: E501

        To create a new Requirement  <strong>qTest Manager version:</strong> 4+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_requirement(project_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param RequirementResource body: <p><em>name *:</em> Requirement name</p><p><em>properties:</em> An array of field-value pairs</p> (required)
        :param int parent_id: ID of the parent Module under which the Requirement will be located
        :return: RequirementResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_requirement_with_http_info(project_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_requirement_with_http_info(project_id, body, **kwargs)  # noqa: E501
            return data

    def create_requirement_with_http_info(self, project_id, body, **kwargs):  # noqa: E501
        """Creates a Requirement  # noqa: E501

        To create a new Requirement  <strong>qTest Manager version:</strong> 4+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_requirement_with_http_info(project_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param RequirementResource body: <p><em>name *:</em> Requirement name</p><p><em>properties:</em> An array of field-value pairs</p> (required)
        :param int parent_id: ID of the parent Module under which the Requirement will be located
        :return: RequirementResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'body', 'parent_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_requirement" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `create_requirement`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `create_requirement`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []
        if 'parent_id' in params:
            query_params.append(('parentId', params['parent_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/requirements', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RequirementResource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_requirement_by_id(self, project_id, requirement_id, **kwargs):  # noqa: E501
        """Deletes a Requirement  # noqa: E501

        To delete a Requirement  <strong>qTest Manager version:</strong> 6+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_requirement_by_id(project_id, requirement_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int requirement_id: ID of the Requirement which needs to be deleted. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_requirement_by_id_with_http_info(project_id, requirement_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_requirement_by_id_with_http_info(project_id, requirement_id, **kwargs)  # noqa: E501
            return data

    def delete_requirement_by_id_with_http_info(self, project_id, requirement_id, **kwargs):  # noqa: E501
        """Deletes a Requirement  # noqa: E501

        To delete a Requirement  <strong>qTest Manager version:</strong> 6+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_requirement_by_id_with_http_info(project_id, requirement_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int requirement_id: ID of the Requirement which needs to be deleted. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'requirement_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_requirement_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `delete_requirement_by_id`")  # noqa: E501
        # verify the required parameter 'requirement_id' is set
        if self.api_client.client_side_validation and ('requirement_id' not in params or
                                                       params['requirement_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `requirement_id` when calling `delete_requirement_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'requirement_id' in params:
            path_params['requirementId'] = params['requirement_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/requirements/{requirementId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_requirement_comment_by_id(self, project_id, id_or_key, comment_id, **kwargs):  # noqa: E501
        """Deletes a Comment of a Requirement  # noqa: E501

        To delete a comment of a Requirement  <strong>qTest Manager version:</strong> 7.5+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_requirement_comment_by_id(project_id, id_or_key, comment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param str id_or_key: PID or ID of the Requirement whose comment you want to delete (required)
        :param int comment_id: The comment's ID (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_requirement_comment_by_id_with_http_info(project_id, id_or_key, comment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_requirement_comment_by_id_with_http_info(project_id, id_or_key, comment_id, **kwargs)  # noqa: E501
            return data

    def delete_requirement_comment_by_id_with_http_info(self, project_id, id_or_key, comment_id, **kwargs):  # noqa: E501
        """Deletes a Comment of a Requirement  # noqa: E501

        To delete a comment of a Requirement  <strong>qTest Manager version:</strong> 7.5+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_requirement_comment_by_id_with_http_info(project_id, id_or_key, comment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param str id_or_key: PID or ID of the Requirement whose comment you want to delete (required)
        :param int comment_id: The comment's ID (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'id_or_key', 'comment_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_requirement_comment_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `delete_requirement_comment_by_id`")  # noqa: E501
        # verify the required parameter 'id_or_key' is set
        if self.api_client.client_side_validation and ('id_or_key' not in params or
                                                       params['id_or_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id_or_key` when calling `delete_requirement_comment_by_id`")  # noqa: E501
        # verify the required parameter 'comment_id' is set
        if self.api_client.client_side_validation and ('comment_id' not in params or
                                                       params['comment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `comment_id` when calling `delete_requirement_comment_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'id_or_key' in params:
            path_params['idOrKey'] = params['id_or_key']  # noqa: E501
        if 'comment_id' in params:
            path_params['commentId'] = params['comment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/requirements/{idOrKey}/comments/{commentId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_requirement_comments(self, project_id, id_or_key, **kwargs):  # noqa: E501
        """Gets all Comments of a Requirement  # noqa: E501

        To retrieve all comments of a Requirement  <strong>qTest Manager version:</strong> 7.6+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_requirement_comments(project_id, id_or_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param str id_or_key: PID or ID of the Requirement whose comments you want to retrieve (required)
        :return: PagedResourceCommentResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_requirement_comments_with_http_info(project_id, id_or_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_requirement_comments_with_http_info(project_id, id_or_key, **kwargs)  # noqa: E501
            return data

    def get_all_requirement_comments_with_http_info(self, project_id, id_or_key, **kwargs):  # noqa: E501
        """Gets all Comments of a Requirement  # noqa: E501

        To retrieve all comments of a Requirement  <strong>qTest Manager version:</strong> 7.6+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_requirement_comments_with_http_info(project_id, id_or_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param str id_or_key: PID or ID of the Requirement whose comments you want to retrieve (required)
        :return: PagedResourceCommentResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'id_or_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_requirement_comments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `get_all_requirement_comments`")  # noqa: E501
        # verify the required parameter 'id_or_key' is set
        if self.api_client.client_side_validation and ('id_or_key' not in params or
                                                       params['id_or_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id_or_key` when calling `get_all_requirement_comments`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'id_or_key' in params:
            path_params['idOrKey'] = params['id_or_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/requirements/{idOrKey}/comments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedResourceCommentResource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_public_traceability_matrix_report(self, project_id, **kwargs):  # noqa: E501
        """Gets Requirement Traceability Matrix Report  # noqa: E501

        To retrieve a report of Requirements with their covering Test Cases  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_public_traceability_matrix_report(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int page: By default the first page is returned but you can specify any page number to retrieve requirements.
        :param int size: The result is paginated. By default, the number of requirements in each page is 20.  You can specify your custom number in this parameter and the maximum number is 999.
        :param str field_ids: ID(s) of requirement fields (system or custom fields) which you would like to retrieve.  They are separated by commas.
        :return: list[TraceabilityRequirement]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_public_traceability_matrix_report_with_http_info(project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_public_traceability_matrix_report_with_http_info(project_id, **kwargs)  # noqa: E501
            return data

    def get_public_traceability_matrix_report_with_http_info(self, project_id, **kwargs):  # noqa: E501
        """Gets Requirement Traceability Matrix Report  # noqa: E501

        To retrieve a report of Requirements with their covering Test Cases  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_public_traceability_matrix_report_with_http_info(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int page: By default the first page is returned but you can specify any page number to retrieve requirements.
        :param int size: The result is paginated. By default, the number of requirements in each page is 20.  You can specify your custom number in this parameter and the maximum number is 999.
        :param str field_ids: ID(s) of requirement fields (system or custom fields) which you would like to retrieve.  They are separated by commas.
        :return: list[TraceabilityRequirement]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'page', 'size', 'field_ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_public_traceability_matrix_report" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `get_public_traceability_matrix_report`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'field_ids' in params:
            query_params.append(('fieldIds', params['field_ids']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/requirements/trace-matrix-report', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TraceabilityRequirement]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_requirement(self, project_id, requirement_id, **kwargs):  # noqa: E501
        """Gets a Requirement  # noqa: E501

        To retrieve a Requirement  <strong>qTest Manager version:</strong> 6+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_requirement(project_id, requirement_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int requirement_id: ID of the Requirement which you want to retrieve. (required)
        :param bool include_external_properties: By default, Requirement external properties are not included in the response. Specify includeExternalProperties=true to include them.
        :return: RequirementResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_requirement_with_http_info(project_id, requirement_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_requirement_with_http_info(project_id, requirement_id, **kwargs)  # noqa: E501
            return data

    def get_requirement_with_http_info(self, project_id, requirement_id, **kwargs):  # noqa: E501
        """Gets a Requirement  # noqa: E501

        To retrieve a Requirement  <strong>qTest Manager version:</strong> 6+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_requirement_with_http_info(project_id, requirement_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int requirement_id: ID of the Requirement which you want to retrieve. (required)
        :param bool include_external_properties: By default, Requirement external properties are not included in the response. Specify includeExternalProperties=true to include them.
        :return: RequirementResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'requirement_id', 'include_external_properties']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_requirement" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `get_requirement`")  # noqa: E501
        # verify the required parameter 'requirement_id' is set
        if self.api_client.client_side_validation and ('requirement_id' not in params or
                                                       params['requirement_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `requirement_id` when calling `get_requirement`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'requirement_id' in params:
            path_params['requirementId'] = params['requirement_id']  # noqa: E501

        query_params = []
        if 'include_external_properties' in params:
            query_params.append(('includeExternalProperties', params['include_external_properties']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/requirements/{requirementId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RequirementResource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_requirement_comment_by_id(self, project_id, id_or_key, comment_id, **kwargs):  # noqa: E501
        """Gets a Comment of a Requirement  # noqa: E501

        To retrieve a comment of a Requirement  <strong>qTest Manager version:</strong> 7.5+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_requirement_comment_by_id(project_id, id_or_key, comment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param str id_or_key: PID or ID of the Requirement whose comment you want to delete (required)
        :param int comment_id: The comment's ID (required)
        :return: CommentResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_requirement_comment_by_id_with_http_info(project_id, id_or_key, comment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_requirement_comment_by_id_with_http_info(project_id, id_or_key, comment_id, **kwargs)  # noqa: E501
            return data

    def get_requirement_comment_by_id_with_http_info(self, project_id, id_or_key, comment_id, **kwargs):  # noqa: E501
        """Gets a Comment of a Requirement  # noqa: E501

        To retrieve a comment of a Requirement  <strong>qTest Manager version:</strong> 7.5+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_requirement_comment_by_id_with_http_info(project_id, id_or_key, comment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param str id_or_key: PID or ID of the Requirement whose comment you want to delete (required)
        :param int comment_id: The comment's ID (required)
        :return: CommentResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'id_or_key', 'comment_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_requirement_comment_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `get_requirement_comment_by_id`")  # noqa: E501
        # verify the required parameter 'id_or_key' is set
        if self.api_client.client_side_validation and ('id_or_key' not in params or
                                                       params['id_or_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id_or_key` when calling `get_requirement_comment_by_id`")  # noqa: E501
        # verify the required parameter 'comment_id' is set
        if self.api_client.client_side_validation and ('comment_id' not in params or
                                                       params['comment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `comment_id` when calling `get_requirement_comment_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'id_or_key' in params:
            path_params['idOrKey'] = params['id_or_key']  # noqa: E501
        if 'comment_id' in params:
            path_params['commentId'] = params['comment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/requirements/{idOrKey}/comments/{commentId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CommentResource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_requirements(self, project_id, **kwargs):  # noqa: E501
        """Gets multiple Requirements  # noqa: E501

        To retrieve all Requirements or Requirements under a specific Module  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_requirements(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int parent_id: Specify the parent Module's ID to retrieve all of its Requirements which are located directly under the parent Module
        :param int page: By default the first page is returned but you can specify any page number to retrieve requirements.
        :param int size: The result is paginated. By the default, the number of requirements in each page is 20.  You can specify your custom number in this parameter.
        :param bool include_external_properties: By default, Requirement external properties are not included in the response. Specify includeExternalProperties=true to include them.
        :return: list[RequirementResource]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_requirements_with_http_info(project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_requirements_with_http_info(project_id, **kwargs)  # noqa: E501
            return data

    def get_requirements_with_http_info(self, project_id, **kwargs):  # noqa: E501
        """Gets multiple Requirements  # noqa: E501

        To retrieve all Requirements or Requirements under a specific Module  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_requirements_with_http_info(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int parent_id: Specify the parent Module's ID to retrieve all of its Requirements which are located directly under the parent Module
        :param int page: By default the first page is returned but you can specify any page number to retrieve requirements.
        :param int size: The result is paginated. By the default, the number of requirements in each page is 20.  You can specify your custom number in this parameter.
        :param bool include_external_properties: By default, Requirement external properties are not included in the response. Specify includeExternalProperties=true to include them.
        :return: list[RequirementResource]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'parent_id', 'page', 'size', 'include_external_properties']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_requirements" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `get_requirements`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []
        if 'parent_id' in params:
            query_params.append(('parentId', params['parent_id']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'include_external_properties' in params:
            query_params.append(('includeExternalProperties', params['include_external_properties']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/requirements', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[RequirementResource]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_test_runs_by_requirment_id(self, project_id, requirement_id, **kwargs):  # noqa: E501
        """To get all test runs associated to requirement  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_test_runs_by_requirment_id(project_id, requirement_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int requirement_id: requirementId (required)
        :param int page: By default the first page is returned but you can specify any page number to retrieve objects
        :param int page_size: The result is paginated. By the default, the number of objects in each page is 100 if this is omitted. You can specify your custom number (up to 999) in this parameter
        :param bool include_latest_log: Include latest test log (default is false)
        :param str expand: Valid values: default is none.    1) testcase - to expand the associated Test Case in the response;    2) testcase.teststep - to expand the associated Test Case and its Test Steps in the response
        :return: TestRunByRequirementIdListResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_test_runs_by_requirment_id_with_http_info(project_id, requirement_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_test_runs_by_requirment_id_with_http_info(project_id, requirement_id, **kwargs)  # noqa: E501
            return data

    def get_test_runs_by_requirment_id_with_http_info(self, project_id, requirement_id, **kwargs):  # noqa: E501
        """To get all test runs associated to requirement  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_test_runs_by_requirment_id_with_http_info(project_id, requirement_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int requirement_id: requirementId (required)
        :param int page: By default the first page is returned but you can specify any page number to retrieve objects
        :param int page_size: The result is paginated. By the default, the number of objects in each page is 100 if this is omitted. You can specify your custom number (up to 999) in this parameter
        :param bool include_latest_log: Include latest test log (default is false)
        :param str expand: Valid values: default is none.    1) testcase - to expand the associated Test Case in the response;    2) testcase.teststep - to expand the associated Test Case and its Test Steps in the response
        :return: TestRunByRequirementIdListResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'requirement_id', 'page', 'page_size', 'include_latest_log', 'expand']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_test_runs_by_requirment_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `get_test_runs_by_requirment_id`")  # noqa: E501
        # verify the required parameter 'requirement_id' is set
        if self.api_client.client_side_validation and ('requirement_id' not in params or
                                                       params['requirement_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `requirement_id` when calling `get_test_runs_by_requirment_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'requirement_id' in params:
            path_params['requirementId'] = params['requirement_id']  # noqa: E501

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'include_latest_log' in params:
            query_params.append(('includeLatestLog', params['include_latest_log']))  # noqa: E501
        if 'expand' in params:
            query_params.append(('expand', params['expand']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/requirements/{requirementId}/test-runs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TestRunByRequirementIdListResource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_requirement(self, project_id, requirement_id, body, **kwargs):  # noqa: E501
        """Updates a Requirement  # noqa: E501

        To update properties of an Requirement or to move it to other parent Module  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_requirement(project_id, requirement_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int requirement_id: ID of the Requirement which needs to be updated. (required)
        :param RequirementResource body: <strong>name: *</strong> Requirement name.  <strong>properties:</strong> An array of field-value pairs (required)
        :param int parent_id: ID of the parent Module to which the Requirement will be moved to
        :return: RequirementResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_requirement_with_http_info(project_id, requirement_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_requirement_with_http_info(project_id, requirement_id, body, **kwargs)  # noqa: E501
            return data

    def update_requirement_with_http_info(self, project_id, requirement_id, body, **kwargs):  # noqa: E501
        """Updates a Requirement  # noqa: E501

        To update properties of an Requirement or to move it to other parent Module  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_requirement_with_http_info(project_id, requirement_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int requirement_id: ID of the Requirement which needs to be updated. (required)
        :param RequirementResource body: <strong>name: *</strong> Requirement name.  <strong>properties:</strong> An array of field-value pairs (required)
        :param int parent_id: ID of the parent Module to which the Requirement will be moved to
        :return: RequirementResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'requirement_id', 'body', 'parent_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_requirement" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `update_requirement`")  # noqa: E501
        # verify the required parameter 'requirement_id' is set
        if self.api_client.client_side_validation and ('requirement_id' not in params or
                                                       params['requirement_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `requirement_id` when calling `update_requirement`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `update_requirement`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'requirement_id' in params:
            path_params['requirementId'] = params['requirement_id']  # noqa: E501

        query_params = []
        if 'parent_id' in params:
            query_params.append(('parentId', params['parent_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/requirements/{requirementId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RequirementResource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_requirement_comment_by_id(self, project_id, id_or_key, comment_id, body, **kwargs):  # noqa: E501
        """Updates a Comment of a Requirement  # noqa: E501

        To modify a comment of a Requirement  <strong>qTest Manager version:</strong> 7.5+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_requirement_comment_by_id(project_id, id_or_key, comment_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param str id_or_key: PID or ID of the Requirement whose comment you want to update (required)
        :param int comment_id: The comment's ID (required)
        :param CommentResource body: The comment's updated content (required)
        :return: CommentResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_requirement_comment_by_id_with_http_info(project_id, id_or_key, comment_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_requirement_comment_by_id_with_http_info(project_id, id_or_key, comment_id, body, **kwargs)  # noqa: E501
            return data

    def update_requirement_comment_by_id_with_http_info(self, project_id, id_or_key, comment_id, body, **kwargs):  # noqa: E501
        """Updates a Comment of a Requirement  # noqa: E501

        To modify a comment of a Requirement  <strong>qTest Manager version:</strong> 7.5+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_requirement_comment_by_id_with_http_info(project_id, id_or_key, comment_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param str id_or_key: PID or ID of the Requirement whose comment you want to update (required)
        :param int comment_id: The comment's ID (required)
        :param CommentResource body: The comment's updated content (required)
        :return: CommentResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'id_or_key', 'comment_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_requirement_comment_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `update_requirement_comment_by_id`")  # noqa: E501
        # verify the required parameter 'id_or_key' is set
        if self.api_client.client_side_validation and ('id_or_key' not in params or
                                                       params['id_or_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id_or_key` when calling `update_requirement_comment_by_id`")  # noqa: E501
        # verify the required parameter 'comment_id' is set
        if self.api_client.client_side_validation and ('comment_id' not in params or
                                                       params['comment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `comment_id` when calling `update_requirement_comment_by_id`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `update_requirement_comment_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'id_or_key' in params:
            path_params['idOrKey'] = params['id_or_key']  # noqa: E501
        if 'comment_id' in params:
            path_params['commentId'] = params['comment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/requirements/{idOrKey}/comments/{commentId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CommentResource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
