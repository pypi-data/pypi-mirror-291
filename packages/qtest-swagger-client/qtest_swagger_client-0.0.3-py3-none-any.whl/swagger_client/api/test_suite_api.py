# coding: utf-8

"""
    qTest Manager API Version 11.0.0 - 2023.6

    qTest Manager API Version 11.0.0 - 2023.6  # noqa: E501

    OpenAPI spec version: 11.0.0 - 2023.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class TestSuiteApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_test_suite(self, project_id, body, **kwargs):  # noqa: E501
        """Creates a Test Suite  # noqa: E501

        To create a new Test Suite  <strong>qTest Manager version:</strong> 6+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_test_suite(project_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param TestSuiteWithCustomFieldResource body: The Test Suite's properties (required)
        :param int parent_id: ID of the Release or Test Cycle under which the newly created Test Suites are located. Input 0 (zero) to create Test Suites directly under root
        :param str parent_type: Arifact type of the container. Valid values include <em>release</em>, <em>test-cycle</em> and <em>root</em>
        :return: TestSuiteWithCustomFieldResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_test_suite_with_http_info(project_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_test_suite_with_http_info(project_id, body, **kwargs)  # noqa: E501
            return data

    def create_test_suite_with_http_info(self, project_id, body, **kwargs):  # noqa: E501
        """Creates a Test Suite  # noqa: E501

        To create a new Test Suite  <strong>qTest Manager version:</strong> 6+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_test_suite_with_http_info(project_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param TestSuiteWithCustomFieldResource body: The Test Suite's properties (required)
        :param int parent_id: ID of the Release or Test Cycle under which the newly created Test Suites are located. Input 0 (zero) to create Test Suites directly under root
        :param str parent_type: Arifact type of the container. Valid values include <em>release</em>, <em>test-cycle</em> and <em>root</em>
        :return: TestSuiteWithCustomFieldResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'body', 'parent_id', 'parent_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_test_suite" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `create_test_suite`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `create_test_suite`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []
        if 'parent_id' in params:
            query_params.append(('parentId', params['parent_id']))  # noqa: E501
        if 'parent_type' in params:
            query_params.append(('parentType', params['parent_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/test-suites', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TestSuiteWithCustomFieldResource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_test_suite_by_id(self, project_id, test_suite_id, **kwargs):  # noqa: E501
        """Deletes a Test Suite  # noqa: E501

        To delete a Test Suite  <strong>qTest Manager version:</strong> 6+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_test_suite_by_id(project_id, test_suite_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int test_suite_id: ID of the Test Suite. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_test_suite_by_id_with_http_info(project_id, test_suite_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_test_suite_by_id_with_http_info(project_id, test_suite_id, **kwargs)  # noqa: E501
            return data

    def delete_test_suite_by_id_with_http_info(self, project_id, test_suite_id, **kwargs):  # noqa: E501
        """Deletes a Test Suite  # noqa: E501

        To delete a Test Suite  <strong>qTest Manager version:</strong> 6+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_test_suite_by_id_with_http_info(project_id, test_suite_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int test_suite_id: ID of the Test Suite. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'test_suite_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_test_suite_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `delete_test_suite_by_id`")  # noqa: E501
        # verify the required parameter 'test_suite_id' is set
        if self.api_client.client_side_validation and ('test_suite_id' not in params or
                                                       params['test_suite_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `test_suite_id` when calling `delete_test_suite_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'test_suite_id' in params:
            path_params['testSuiteId'] = params['test_suite_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/test-suites/{testSuiteId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_list_test_suite(self, project_id, **kwargs):  # noqa: E501
        """Gets multiple Test Suite  # noqa: E501

        To retrieve Test Suites which located under a parent Release, Test Cycle or root  <strong>qTest Manager version:</strong> 6+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_test_suite(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int parent_id: ID of the Release or Test Cycle under which the Test Suites are located. Input 0 (zero) to get Test Suites directly under root
        :param str parent_type: Arifact type of the container. Valid values include <em>release</em>, <em>test-cycle</em> and <em>root</em>
        :return: list[TestSuiteWithCustomFieldResource]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_list_test_suite_with_http_info(project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_list_test_suite_with_http_info(project_id, **kwargs)  # noqa: E501
            return data

    def get_list_test_suite_with_http_info(self, project_id, **kwargs):  # noqa: E501
        """Gets multiple Test Suite  # noqa: E501

        To retrieve Test Suites which located under a parent Release, Test Cycle or root  <strong>qTest Manager version:</strong> 6+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_list_test_suite_with_http_info(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int parent_id: ID of the Release or Test Cycle under which the Test Suites are located. Input 0 (zero) to get Test Suites directly under root
        :param str parent_type: Arifact type of the container. Valid values include <em>release</em>, <em>test-cycle</em> and <em>root</em>
        :return: list[TestSuiteWithCustomFieldResource]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'parent_id', 'parent_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_list_test_suite" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `get_list_test_suite`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []
        if 'parent_id' in params:
            query_params.append(('parentId', params['parent_id']))  # noqa: E501
        if 'parent_type' in params:
            query_params.append(('parentType', params['parent_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/test-suites', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TestSuiteWithCustomFieldResource]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_test_suite(self, project_id, test_suite_id, **kwargs):  # noqa: E501
        """Gets a Test Suite  # noqa: E501

        To retrieve a Test Suite  <strong>qTest Manager version:</strong> 6+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_test_suite(project_id, test_suite_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int test_suite_id: ID of the Test Suite (required)
        :return: TestSuiteWithCustomFieldResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_test_suite_with_http_info(project_id, test_suite_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_test_suite_with_http_info(project_id, test_suite_id, **kwargs)  # noqa: E501
            return data

    def get_test_suite_with_http_info(self, project_id, test_suite_id, **kwargs):  # noqa: E501
        """Gets a Test Suite  # noqa: E501

        To retrieve a Test Suite  <strong>qTest Manager version:</strong> 6+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_test_suite_with_http_info(project_id, test_suite_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int test_suite_id: ID of the Test Suite (required)
        :return: TestSuiteWithCustomFieldResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'test_suite_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_test_suite" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `get_test_suite`")  # noqa: E501
        # verify the required parameter 'test_suite_id' is set
        if self.api_client.client_side_validation and ('test_suite_id' not in params or
                                                       params['test_suite_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `test_suite_id` when calling `get_test_suite`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'test_suite_id' in params:
            path_params['testSuiteId'] = params['test_suite_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/test-suites/{testSuiteId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TestSuiteWithCustomFieldResource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_test_suite(self, project_id, test_suite_id, body, **kwargs):  # noqa: E501
        """Updates a Test Suite  # noqa: E501

        To update an existing Test Suite or to move it to other container  <strong>Important:</strong> If you use the request parameters <em>parentId</em> and <em>parentType</em>, the request body will be ignore.   That means the Test Suite is being moved but it will not be updated with the properties specify in the request body  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_test_suite(project_id, test_suite_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int test_suite_id: ID of the Test Suite (required)
        :param TestSuiteWithCustomFieldResource body: The Test Suite's updated properties (required)
        :param int parent_id: ID of the Release or Test Cycle which the Test Suite will be moved to. Input 0 (zero) to move the Test Suite to under root
        :param str parent_type: Artifact type of the parent container. Valid values include <em>release</em>, <em>test-cycle</em> and <em>root</em>
        :param bool no_email:
        :return: TestSuiteWithCustomFieldResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_test_suite_with_http_info(project_id, test_suite_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_test_suite_with_http_info(project_id, test_suite_id, body, **kwargs)  # noqa: E501
            return data

    def update_test_suite_with_http_info(self, project_id, test_suite_id, body, **kwargs):  # noqa: E501
        """Updates a Test Suite  # noqa: E501

        To update an existing Test Suite or to move it to other container  <strong>Important:</strong> If you use the request parameters <em>parentId</em> and <em>parentType</em>, the request body will be ignore.   That means the Test Suite is being moved but it will not be updated with the properties specify in the request body  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_test_suite_with_http_info(project_id, test_suite_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int test_suite_id: ID of the Test Suite (required)
        :param TestSuiteWithCustomFieldResource body: The Test Suite's updated properties (required)
        :param int parent_id: ID of the Release or Test Cycle which the Test Suite will be moved to. Input 0 (zero) to move the Test Suite to under root
        :param str parent_type: Artifact type of the parent container. Valid values include <em>release</em>, <em>test-cycle</em> and <em>root</em>
        :param bool no_email:
        :return: TestSuiteWithCustomFieldResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'test_suite_id', 'body', 'parent_id', 'parent_type', 'no_email']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_test_suite" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `update_test_suite`")  # noqa: E501
        # verify the required parameter 'test_suite_id' is set
        if self.api_client.client_side_validation and ('test_suite_id' not in params or
                                                       params['test_suite_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `test_suite_id` when calling `update_test_suite`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `update_test_suite`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'test_suite_id' in params:
            path_params['testSuiteId'] = params['test_suite_id']  # noqa: E501

        query_params = []
        if 'parent_id' in params:
            query_params.append(('parentId', params['parent_id']))  # noqa: E501
        if 'parent_type' in params:
            query_params.append(('parentType', params['parent_type']))  # noqa: E501
        if 'no_email' in params:
            query_params.append(('noEmail', params['no_email']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/test-suites/{testSuiteId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TestSuiteWithCustomFieldResource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
