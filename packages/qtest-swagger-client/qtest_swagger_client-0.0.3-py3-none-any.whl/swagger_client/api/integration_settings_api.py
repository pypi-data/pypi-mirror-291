# coding: utf-8

"""
    qTest Manager API Version 11.0.0 - 2023.6

    qTest Manager API Version 11.0.0 - 2023.6  # noqa: E501

    OpenAPI spec version: 11.0.0 - 2023.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class IntegrationSettingsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_new_connection(self, project_id, body, **kwargs):  # noqa: E501
        """Add a new Jira connection  # noqa: E501

        Add a new Jira connection  <strong>qTest Manager version:</strong> 9.7+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_new_connection(project_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param IntegrationConnection body: <em>external_system (required):</em> Input <em>Jira</em>  <em>connection_name (required):</em> Name of connection  <em>server_url (required):</em> your Jira server URL  <em>web_url:</em> Your Jira web URL (for Jira server only)  <em>authentication_type (required):</em> Input <em>Token</em> if you are using password or API token, or <em>OAuth</em> if you are using Jira OAuth for authentication  <em>username:</em> If <em>authentication_type=Token</em>, then input your Jira username. If <em>authentication_type=OAuth</em>, then input <em>apikey</em>  <em>password:</em> Input your Jira password or API token (only required if <em>authentication_type=Token</em>)  <em>jiraToken, jiraSecret</em> and <em>jiraVerifier</em> these are required if authentication_type=Oauth. You will need to use our API to <em>Get OAuth Authorize URL</em> described below to retrieve values for these fields. (required)
        :return: NewIntegrationConnectionInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_new_connection_with_http_info(project_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.add_new_connection_with_http_info(project_id, body, **kwargs)  # noqa: E501
            return data

    def add_new_connection_with_http_info(self, project_id, body, **kwargs):  # noqa: E501
        """Add a new Jira connection  # noqa: E501

        Add a new Jira connection  <strong>qTest Manager version:</strong> 9.7+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_new_connection_with_http_info(project_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param IntegrationConnection body: <em>external_system (required):</em> Input <em>Jira</em>  <em>connection_name (required):</em> Name of connection  <em>server_url (required):</em> your Jira server URL  <em>web_url:</em> Your Jira web URL (for Jira server only)  <em>authentication_type (required):</em> Input <em>Token</em> if you are using password or API token, or <em>OAuth</em> if you are using Jira OAuth for authentication  <em>username:</em> If <em>authentication_type=Token</em>, then input your Jira username. If <em>authentication_type=OAuth</em>, then input <em>apikey</em>  <em>password:</em> Input your Jira password or API token (only required if <em>authentication_type=Token</em>)  <em>jiraToken, jiraSecret</em> and <em>jiraVerifier</em> these are required if authentication_type=Oauth. You will need to use our API to <em>Get OAuth Authorize URL</em> described below to retrieve values for these fields. (required)
        :return: NewIntegrationConnectionInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_new_connection" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `add_new_connection`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `add_new_connection`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/settings/integration/connections', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NewIntegrationConnectionInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_new_defect_mapping(self, project_id, connection_id, external_project_id, external_issue_type_id, **kwargs):  # noqa: E501
        """Add a defect mapping to a Jira connection  # noqa: E501

        Add a defect mapping to a Jira connection  <strong>qTest Manager version:</strong> 9.7+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_new_defect_mapping(project_id, connection_id, external_project_id, external_issue_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int connection_id: ID of the Jira connection (required)
        :param str external_project_id: ID of a Jira project. Use this to retrieve mappings with this Jira project only (required)
        :param str external_issue_type_id: ID of a Jira issue type. Use this to retrieve mappings with this Jira issue type only (required)
        :return: IntegrationAutoFillMappingVM
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_new_defect_mapping_with_http_info(project_id, connection_id, external_project_id, external_issue_type_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_new_defect_mapping_with_http_info(project_id, connection_id, external_project_id, external_issue_type_id, **kwargs)  # noqa: E501
            return data

    def add_new_defect_mapping_with_http_info(self, project_id, connection_id, external_project_id, external_issue_type_id, **kwargs):  # noqa: E501
        """Add a defect mapping to a Jira connection  # noqa: E501

        Add a defect mapping to a Jira connection  <strong>qTest Manager version:</strong> 9.7+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_new_defect_mapping_with_http_info(project_id, connection_id, external_project_id, external_issue_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int connection_id: ID of the Jira connection (required)
        :param str external_project_id: ID of a Jira project. Use this to retrieve mappings with this Jira project only (required)
        :param str external_issue_type_id: ID of a Jira issue type. Use this to retrieve mappings with this Jira issue type only (required)
        :return: IntegrationAutoFillMappingVM
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'connection_id', 'external_project_id', 'external_issue_type_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_new_defect_mapping" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `add_new_defect_mapping`")  # noqa: E501
        # verify the required parameter 'connection_id' is set
        if self.api_client.client_side_validation and ('connection_id' not in params or
                                                       params['connection_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `connection_id` when calling `add_new_defect_mapping`")  # noqa: E501
        # verify the required parameter 'external_project_id' is set
        if self.api_client.client_side_validation and ('external_project_id' not in params or
                                                       params['external_project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `external_project_id` when calling `add_new_defect_mapping`")  # noqa: E501
        # verify the required parameter 'external_issue_type_id' is set
        if self.api_client.client_side_validation and ('external_issue_type_id' not in params or
                                                       params['external_issue_type_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `external_issue_type_id` when calling `add_new_defect_mapping`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'connection_id' in params:
            path_params['connectionId'] = params['connection_id']  # noqa: E501

        query_params = []
        if 'external_project_id' in params:
            query_params.append(('externalProjectId', params['external_project_id']))  # noqa: E501
        if 'external_issue_type_id' in params:
            query_params.append(('externalIssueTypeId', params['external_issue_type_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/settings/integration/connections/{connectionId}/defect/mappings', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IntegrationAutoFillMappingVM',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_new_release_mapping(self, project_id, connection_id, external_project_id, external_issue_type_id, **kwargs):  # noqa: E501
        """Add a new Jira release mapping to a Jira connection  # noqa: E501

        Add a new Jira release mapping to a Jira connection.   <strong>qTest Manager version:</strong> 9.7+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_new_release_mapping(project_id, connection_id, external_project_id, external_issue_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int connection_id: ID of the Jira connection (required)
        :param str external_project_id: ID of a Jira project. You will need to make API calls to Jira to get its project IDs (required)
        :param str external_issue_type_id: valid values include: fixVersions, Sprint (<strong>case-sensitive</strong>) (required)
        :return: IntegrationReleaseMappingResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_new_release_mapping_with_http_info(project_id, connection_id, external_project_id, external_issue_type_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_new_release_mapping_with_http_info(project_id, connection_id, external_project_id, external_issue_type_id, **kwargs)  # noqa: E501
            return data

    def add_new_release_mapping_with_http_info(self, project_id, connection_id, external_project_id, external_issue_type_id, **kwargs):  # noqa: E501
        """Add a new Jira release mapping to a Jira connection  # noqa: E501

        Add a new Jira release mapping to a Jira connection.   <strong>qTest Manager version:</strong> 9.7+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_new_release_mapping_with_http_info(project_id, connection_id, external_project_id, external_issue_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int connection_id: ID of the Jira connection (required)
        :param str external_project_id: ID of a Jira project. You will need to make API calls to Jira to get its project IDs (required)
        :param str external_issue_type_id: valid values include: fixVersions, Sprint (<strong>case-sensitive</strong>) (required)
        :return: IntegrationReleaseMappingResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'connection_id', 'external_project_id', 'external_issue_type_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_new_release_mapping" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `add_new_release_mapping`")  # noqa: E501
        # verify the required parameter 'connection_id' is set
        if self.api_client.client_side_validation and ('connection_id' not in params or
                                                       params['connection_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `connection_id` when calling `add_new_release_mapping`")  # noqa: E501
        # verify the required parameter 'external_project_id' is set
        if self.api_client.client_side_validation and ('external_project_id' not in params or
                                                       params['external_project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `external_project_id` when calling `add_new_release_mapping`")  # noqa: E501
        # verify the required parameter 'external_issue_type_id' is set
        if self.api_client.client_side_validation and ('external_issue_type_id' not in params or
                                                       params['external_issue_type_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `external_issue_type_id` when calling `add_new_release_mapping`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'connection_id' in params:
            path_params['connectionId'] = params['connection_id']  # noqa: E501

        query_params = []
        if 'external_project_id' in params:
            query_params.append(('externalProjectId', params['external_project_id']))  # noqa: E501
        if 'external_issue_type_id' in params:
            query_params.append(('externalIssueTypeId', params['external_issue_type_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/settings/integration/connections/{connectionId}/release/mappings', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IntegrationReleaseMappingResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_new_requirement_mapping(self, project_id, connection_id, external_project_id, external_issue_type_id, **kwargs):  # noqa: E501
        """Add a requirement mapping to a Jira connection  # noqa: E501

        Add a requirement mapping to a Jira connection  <strong>qTest Manager version:</strong> 9.7+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_new_requirement_mapping(project_id, connection_id, external_project_id, external_issue_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int connection_id: ID of the Jira connection (required)
        :param str external_project_id: ID of a Jira project. You will need to make API calls to Jira to retrieve its project IDs (required)
        :param str external_issue_type_id: ID of a Jira issue type. You will need to make API calls to Jira to retrieve its issue type IDs (required)
        :return: RequirementMapping
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_new_requirement_mapping_with_http_info(project_id, connection_id, external_project_id, external_issue_type_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_new_requirement_mapping_with_http_info(project_id, connection_id, external_project_id, external_issue_type_id, **kwargs)  # noqa: E501
            return data

    def add_new_requirement_mapping_with_http_info(self, project_id, connection_id, external_project_id, external_issue_type_id, **kwargs):  # noqa: E501
        """Add a requirement mapping to a Jira connection  # noqa: E501

        Add a requirement mapping to a Jira connection  <strong>qTest Manager version:</strong> 9.7+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_new_requirement_mapping_with_http_info(project_id, connection_id, external_project_id, external_issue_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int connection_id: ID of the Jira connection (required)
        :param str external_project_id: ID of a Jira project. You will need to make API calls to Jira to retrieve its project IDs (required)
        :param str external_issue_type_id: ID of a Jira issue type. You will need to make API calls to Jira to retrieve its issue type IDs (required)
        :return: RequirementMapping
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'connection_id', 'external_project_id', 'external_issue_type_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_new_requirement_mapping" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `add_new_requirement_mapping`")  # noqa: E501
        # verify the required parameter 'connection_id' is set
        if self.api_client.client_side_validation and ('connection_id' not in params or
                                                       params['connection_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `connection_id` when calling `add_new_requirement_mapping`")  # noqa: E501
        # verify the required parameter 'external_project_id' is set
        if self.api_client.client_side_validation and ('external_project_id' not in params or
                                                       params['external_project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `external_project_id` when calling `add_new_requirement_mapping`")  # noqa: E501
        # verify the required parameter 'external_issue_type_id' is set
        if self.api_client.client_side_validation and ('external_issue_type_id' not in params or
                                                       params['external_issue_type_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `external_issue_type_id` when calling `add_new_requirement_mapping`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'connection_id' in params:
            path_params['connectionId'] = params['connection_id']  # noqa: E501

        query_params = []
        if 'external_project_id' in params:
            query_params.append(('externalProjectId', params['external_project_id']))  # noqa: E501
        if 'external_issue_type_id' in params:
            query_params.append(('externalIssueTypeId', params['external_issue_type_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/settings/integration/connections/{connectionId}/requirement/mappings', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RequirementMapping',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def configure_populating_jira_unlinked_defects(self, project_id, connection_id, **kwargs):  # noqa: E501
        """Enable or disable populating Jira Unlinked Defects of a Jira connection  # noqa: E501

        Enable or disable populating Jira Unlinked Defects of a Jira connection  <strong>qTest Manager version:</strong> 9.7+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.configure_populating_jira_unlinked_defects(project_id, connection_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int connection_id: ID of the Jira connection (required)
        :param str store_unlinked_defects: Input <em>true</em> to populate unlinked Jira Defects, or <em>false</em> to disable this feature
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.configure_populating_jira_unlinked_defects_with_http_info(project_id, connection_id, **kwargs)  # noqa: E501
        else:
            (data) = self.configure_populating_jira_unlinked_defects_with_http_info(project_id, connection_id, **kwargs)  # noqa: E501
            return data

    def configure_populating_jira_unlinked_defects_with_http_info(self, project_id, connection_id, **kwargs):  # noqa: E501
        """Enable or disable populating Jira Unlinked Defects of a Jira connection  # noqa: E501

        Enable or disable populating Jira Unlinked Defects of a Jira connection  <strong>qTest Manager version:</strong> 9.7+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.configure_populating_jira_unlinked_defects_with_http_info(project_id, connection_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int connection_id: ID of the Jira connection (required)
        :param str store_unlinked_defects: Input <em>true</em> to populate unlinked Jira Defects, or <em>false</em> to disable this feature
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'connection_id', 'store_unlinked_defects']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method configure_populating_jira_unlinked_defects" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `configure_populating_jira_unlinked_defects`")  # noqa: E501
        # verify the required parameter 'connection_id' is set
        if self.api_client.client_side_validation and ('connection_id' not in params or
                                                       params['connection_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `connection_id` when calling `configure_populating_jira_unlinked_defects`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'connection_id' in params:
            path_params['connectionId'] = params['connection_id']  # noqa: E501

        query_params = []
        if 'store_unlinked_defects' in params:
            query_params.append(('storeUnlinkedDefects', params['store_unlinked_defects']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/settings/integration/connections/{connectionId}/defect', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def configure_release_mapping(self, project_id, connection_id, external_project_id, external_issue_type_id, body, **kwargs):  # noqa: E501
        """Update a Release Mapping of a Jira connection  # noqa: E501

        To configure a Release Mapping of a Jira connection.   <strong>qTest Manager version:</strong> 9.7+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.configure_release_mapping(project_id, connection_id, external_project_id, external_issue_type_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int connection_id: ID of the Jira connection (required)
        :param str external_project_id: ID of a Jira project (required)
        :param str external_issue_type_id: valid values include: fixVersions, Sprint (<strong>case-sensitive</strong>)   externalProjectId and externalIssueTypeId are used to identify a release mapping and cannot be modified (required)
        :param IntegrationReleaseConfigurationVM body: <em>data_retrieval_options:</em> If <em>externalIssueTypeId=fixVersions</em>, valid values include: <strong>released, unreleased</strong>. If <em>externalIssueTypeId=fixVersions</em>, valid values include: <strong>active, future, completed</strong>  <em>auto_update_release_scope:</em> Select to automatically update scope of imported Releases in qTest. Valid values include: <b>True, False</b> (required)
        :return: IntegrationReleaseMappingResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.configure_release_mapping_with_http_info(project_id, connection_id, external_project_id, external_issue_type_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.configure_release_mapping_with_http_info(project_id, connection_id, external_project_id, external_issue_type_id, body, **kwargs)  # noqa: E501
            return data

    def configure_release_mapping_with_http_info(self, project_id, connection_id, external_project_id, external_issue_type_id, body, **kwargs):  # noqa: E501
        """Update a Release Mapping of a Jira connection  # noqa: E501

        To configure a Release Mapping of a Jira connection.   <strong>qTest Manager version:</strong> 9.7+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.configure_release_mapping_with_http_info(project_id, connection_id, external_project_id, external_issue_type_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int connection_id: ID of the Jira connection (required)
        :param str external_project_id: ID of a Jira project (required)
        :param str external_issue_type_id: valid values include: fixVersions, Sprint (<strong>case-sensitive</strong>)   externalProjectId and externalIssueTypeId are used to identify a release mapping and cannot be modified (required)
        :param IntegrationReleaseConfigurationVM body: <em>data_retrieval_options:</em> If <em>externalIssueTypeId=fixVersions</em>, valid values include: <strong>released, unreleased</strong>. If <em>externalIssueTypeId=fixVersions</em>, valid values include: <strong>active, future, completed</strong>  <em>auto_update_release_scope:</em> Select to automatically update scope of imported Releases in qTest. Valid values include: <b>True, False</b> (required)
        :return: IntegrationReleaseMappingResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'connection_id', 'external_project_id', 'external_issue_type_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method configure_release_mapping" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `configure_release_mapping`")  # noqa: E501
        # verify the required parameter 'connection_id' is set
        if self.api_client.client_side_validation and ('connection_id' not in params or
                                                       params['connection_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `connection_id` when calling `configure_release_mapping`")  # noqa: E501
        # verify the required parameter 'external_project_id' is set
        if self.api_client.client_side_validation and ('external_project_id' not in params or
                                                       params['external_project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `external_project_id` when calling `configure_release_mapping`")  # noqa: E501
        # verify the required parameter 'external_issue_type_id' is set
        if self.api_client.client_side_validation and ('external_issue_type_id' not in params or
                                                       params['external_issue_type_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `external_issue_type_id` when calling `configure_release_mapping`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `configure_release_mapping`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'connection_id' in params:
            path_params['connectionId'] = params['connection_id']  # noqa: E501

        query_params = []
        if 'external_project_id' in params:
            query_params.append(('externalProjectId', params['external_project_id']))  # noqa: E501
        if 'external_issue_type_id' in params:
            query_params.append(('externalIssueTypeId', params['external_issue_type_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/settings/integration/connections/{connectionId}/release/mappings', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IntegrationReleaseMappingResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def configure_requirement_mapping(self, project_id, connection_id, external_project_id, external_issue_type_id, body, **kwargs):  # noqa: E501
        """Update a requirement mapping of a Jira connection  # noqa: E501

        To configure a requirement mapping of a Jira connection  <strong>qTest Manager version:</strong> 9.7+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.configure_requirement_mapping(project_id, connection_id, external_project_id, external_issue_type_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int connection_id: ID of the Jira connection (required)
        :param str external_project_id: ID of a Jira project (required)
        :param str external_issue_type_id: ID of a Jira issue type   externalProjectId and externalIssueTypeId are used to identify a release mapping and cannot be modified (required)
        :param RequirementMapping body: <em>external_filter:</em> ID of a Jira filter whose Jira issues will be imported to qTest as Requirements.  <em>external_field_1_id</em> and <em>external_field_2_id:</em> <strong>Jira keys</strong> of 2 Jira fields that are used to organize imported Requirements  <em>active_external_fields:</em> <em>Jira keys</em> of Jira fields that will show up in qTest requirement page (Jira read-only properties panel). You can specify a list of Jira fields, <em>separated by comma without a following space</em> (required)
        :return: RequirementMapping
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.configure_requirement_mapping_with_http_info(project_id, connection_id, external_project_id, external_issue_type_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.configure_requirement_mapping_with_http_info(project_id, connection_id, external_project_id, external_issue_type_id, body, **kwargs)  # noqa: E501
            return data

    def configure_requirement_mapping_with_http_info(self, project_id, connection_id, external_project_id, external_issue_type_id, body, **kwargs):  # noqa: E501
        """Update a requirement mapping of a Jira connection  # noqa: E501

        To configure a requirement mapping of a Jira connection  <strong>qTest Manager version:</strong> 9.7+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.configure_requirement_mapping_with_http_info(project_id, connection_id, external_project_id, external_issue_type_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int connection_id: ID of the Jira connection (required)
        :param str external_project_id: ID of a Jira project (required)
        :param str external_issue_type_id: ID of a Jira issue type   externalProjectId and externalIssueTypeId are used to identify a release mapping and cannot be modified (required)
        :param RequirementMapping body: <em>external_filter:</em> ID of a Jira filter whose Jira issues will be imported to qTest as Requirements.  <em>external_field_1_id</em> and <em>external_field_2_id:</em> <strong>Jira keys</strong> of 2 Jira fields that are used to organize imported Requirements  <em>active_external_fields:</em> <em>Jira keys</em> of Jira fields that will show up in qTest requirement page (Jira read-only properties panel). You can specify a list of Jira fields, <em>separated by comma without a following space</em> (required)
        :return: RequirementMapping
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'connection_id', 'external_project_id', 'external_issue_type_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method configure_requirement_mapping" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `configure_requirement_mapping`")  # noqa: E501
        # verify the required parameter 'connection_id' is set
        if self.api_client.client_side_validation and ('connection_id' not in params or
                                                       params['connection_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `connection_id` when calling `configure_requirement_mapping`")  # noqa: E501
        # verify the required parameter 'external_project_id' is set
        if self.api_client.client_side_validation and ('external_project_id' not in params or
                                                       params['external_project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `external_project_id` when calling `configure_requirement_mapping`")  # noqa: E501
        # verify the required parameter 'external_issue_type_id' is set
        if self.api_client.client_side_validation and ('external_issue_type_id' not in params or
                                                       params['external_issue_type_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `external_issue_type_id` when calling `configure_requirement_mapping`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `configure_requirement_mapping`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'connection_id' in params:
            path_params['connectionId'] = params['connection_id']  # noqa: E501

        query_params = []
        if 'external_project_id' in params:
            query_params.append(('externalProjectId', params['external_project_id']))  # noqa: E501
        if 'external_issue_type_id' in params:
            query_params.append(('externalIssueTypeId', params['external_issue_type_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/settings/integration/connections/{connectionId}/requirement/mappings', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RequirementMapping',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_connection(self, project_id, connection_id, **kwargs):  # noqa: E501
        """Delete a Jira connection  # noqa: E501

        Delete a Jira connection  <strong>qTest Manager version:</strong> 9.7+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_connection(project_id, connection_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int connection_id: ID of the Jira connection (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_connection_with_http_info(project_id, connection_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_connection_with_http_info(project_id, connection_id, **kwargs)  # noqa: E501
            return data

    def delete_connection_with_http_info(self, project_id, connection_id, **kwargs):  # noqa: E501
        """Delete a Jira connection  # noqa: E501

        Delete a Jira connection  <strong>qTest Manager version:</strong> 9.7+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_connection_with_http_info(project_id, connection_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int connection_id: ID of the Jira connection (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'connection_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_connection" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `delete_connection`")  # noqa: E501
        # verify the required parameter 'connection_id' is set
        if self.api_client.client_side_validation and ('connection_id' not in params or
                                                       params['connection_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `connection_id` when calling `delete_connection`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'connection_id' in params:
            path_params['connectionId'] = params['connection_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/settings/integration/connections/{connectionId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_authorize_url(self, project_id, server_url, **kwargs):  # noqa: E501
        """OAuth Authorize URL  # noqa: E501

        OAuth Authorize URL (for Jira Server or DC only).  <strong>qTest Manager version:</strong> 9.7+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_authorize_url(project_id, server_url, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: this must be 0 (zero) (required)
        :param str server_url: your Jira's Server URL (required)
        :return: TokenSecretVerifierHolder
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_authorize_url_with_http_info(project_id, server_url, **kwargs)  # noqa: E501
        else:
            (data) = self.get_authorize_url_with_http_info(project_id, server_url, **kwargs)  # noqa: E501
            return data

    def get_authorize_url_with_http_info(self, project_id, server_url, **kwargs):  # noqa: E501
        """OAuth Authorize URL  # noqa: E501

        OAuth Authorize URL (for Jira Server or DC only).  <strong>qTest Manager version:</strong> 9.7+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_authorize_url_with_http_info(project_id, server_url, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: this must be 0 (zero) (required)
        :param str server_url: your Jira's Server URL (required)
        :return: TokenSecretVerifierHolder
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'server_url']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_authorize_url" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `get_authorize_url`")  # noqa: E501
        # verify the required parameter 'server_url' is set
        if self.api_client.client_side_validation and ('server_url' not in params or
                                                       params['server_url'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `server_url` when calling `get_authorize_url`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []
        if 'server_url' in params:
            query_params.append(('serverUrl', params['server_url']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/settings/integration/connections/oauthAuthorizeURL', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TokenSecretVerifierHolder',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_connections(self, project_id, **kwargs):  # noqa: E501
        """Get all Jira connections of a project  # noqa: E501

        Get all Jira connections of a project  <strong>qTest Manager version:</strong> 9.7+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_connections(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :return: IntegrationConnectionVM
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_connections_with_http_info(project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_connections_with_http_info(project_id, **kwargs)  # noqa: E501
            return data

    def get_connections_with_http_info(self, project_id, **kwargs):  # noqa: E501
        """Get all Jira connections of a project  # noqa: E501

        Get all Jira connections of a project  <strong>qTest Manager version:</strong> 9.7+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_connections_with_http_info(project_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :return: IntegrationConnectionVM
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_connections" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `get_connections`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/settings/integration/connections', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IntegrationConnectionVM',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_defect_mappings(self, project_id, connection_id, **kwargs):  # noqa: E501
        """Get Jira defect mappings of a Jira connection  # noqa: E501

        Get Jira defect mappings of a Jira connection  <strong>qTest Manager version:</strong> 9.7+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_defect_mappings(project_id, connection_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int connection_id: ID of the Jira connection (required)
        :param str external_project_id: ID of a Jira project. Use this to retrieve mappings with this Jira project only
        :param str external_issue_type_id: ID of a Jira issue type. Use this to retrieve mappings with this Jira issue type
        :return: IntegrationAutoFillMappingVM
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_defect_mappings_with_http_info(project_id, connection_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_defect_mappings_with_http_info(project_id, connection_id, **kwargs)  # noqa: E501
            return data

    def get_defect_mappings_with_http_info(self, project_id, connection_id, **kwargs):  # noqa: E501
        """Get Jira defect mappings of a Jira connection  # noqa: E501

        Get Jira defect mappings of a Jira connection  <strong>qTest Manager version:</strong> 9.7+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_defect_mappings_with_http_info(project_id, connection_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int connection_id: ID of the Jira connection (required)
        :param str external_project_id: ID of a Jira project. Use this to retrieve mappings with this Jira project only
        :param str external_issue_type_id: ID of a Jira issue type. Use this to retrieve mappings with this Jira issue type
        :return: IntegrationAutoFillMappingVM
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'connection_id', 'external_project_id', 'external_issue_type_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_defect_mappings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `get_defect_mappings`")  # noqa: E501
        # verify the required parameter 'connection_id' is set
        if self.api_client.client_side_validation and ('connection_id' not in params or
                                                       params['connection_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `connection_id` when calling `get_defect_mappings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'connection_id' in params:
            path_params['connectionId'] = params['connection_id']  # noqa: E501

        query_params = []
        if 'external_project_id' in params:
            query_params.append(('externalProjectId', params['external_project_id']))  # noqa: E501
        if 'external_issue_type_id' in params:
            query_params.append(('externalIssueTypeId', params['external_issue_type_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/settings/integration/connections/{connectionId}/defect/mappings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IntegrationAutoFillMappingVM',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_release_mappings(self, project_id, connection_id, **kwargs):  # noqa: E501
        """Get Jira release mappings of a Jira connection  # noqa: E501

        Get Jira release mappings of a Jira connection  <strong>qTest Manager version:</strong> 9.7+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_release_mappings(project_id, connection_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int connection_id: ID of the Jira connection (required)
        :param str external_project_id: ID of a Jira project. Use this to retrieve mappings with this Jira project only
        :param str external_issue_type_id: Valid values include: fixVersions, Sprint (<strong>case-sensitive</strong>)
        :return: list[IntegrationReleaseMappingResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_release_mappings_with_http_info(project_id, connection_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_release_mappings_with_http_info(project_id, connection_id, **kwargs)  # noqa: E501
            return data

    def get_release_mappings_with_http_info(self, project_id, connection_id, **kwargs):  # noqa: E501
        """Get Jira release mappings of a Jira connection  # noqa: E501

        Get Jira release mappings of a Jira connection  <strong>qTest Manager version:</strong> 9.7+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_release_mappings_with_http_info(project_id, connection_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int connection_id: ID of the Jira connection (required)
        :param str external_project_id: ID of a Jira project. Use this to retrieve mappings with this Jira project only
        :param str external_issue_type_id: Valid values include: fixVersions, Sprint (<strong>case-sensitive</strong>)
        :return: list[IntegrationReleaseMappingResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'connection_id', 'external_project_id', 'external_issue_type_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_release_mappings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `get_release_mappings`")  # noqa: E501
        # verify the required parameter 'connection_id' is set
        if self.api_client.client_side_validation and ('connection_id' not in params or
                                                       params['connection_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `connection_id` when calling `get_release_mappings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'connection_id' in params:
            path_params['connectionId'] = params['connection_id']  # noqa: E501

        query_params = []
        if 'external_project_id' in params:
            query_params.append(('externalProjectId', params['external_project_id']))  # noqa: E501
        if 'external_issue_type_id' in params:
            query_params.append(('externalIssueTypeId', params['external_issue_type_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/settings/integration/connections/{connectionId}/release/mappings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[IntegrationReleaseMappingResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def refresh_field_settings(self, project_id, connection_id, artifact, **kwargs):  # noqa: E501
        """Trigger retrieving latest field settings from a JIRA connection  # noqa: E501

        Trigger retrieving the latest Defects/Requirements field settings from Jira  <strong>qTest Manager version:</strong> 9.7+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.refresh_field_settings(project_id, connection_id, artifact, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int connection_id: ID of the Jira connection (required)
        :param str artifact: Single value. Valid values include: <b>Defects, Requirements</b> (required)
        :param int mapping_id: ID of the mapping. Only required if <em>artifact=Requirements<em>
        :return: list[IntegrationFieldMapVM]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.refresh_field_settings_with_http_info(project_id, connection_id, artifact, **kwargs)  # noqa: E501
        else:
            (data) = self.refresh_field_settings_with_http_info(project_id, connection_id, artifact, **kwargs)  # noqa: E501
            return data

    def refresh_field_settings_with_http_info(self, project_id, connection_id, artifact, **kwargs):  # noqa: E501
        """Trigger retrieving latest field settings from a JIRA connection  # noqa: E501

        Trigger retrieving the latest Defects/Requirements field settings from Jira  <strong>qTest Manager version:</strong> 9.7+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.refresh_field_settings_with_http_info(project_id, connection_id, artifact, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int connection_id: ID of the Jira connection (required)
        :param str artifact: Single value. Valid values include: <b>Defects, Requirements</b> (required)
        :param int mapping_id: ID of the mapping. Only required if <em>artifact=Requirements<em>
        :return: list[IntegrationFieldMapVM]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'connection_id', 'artifact', 'mapping_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method refresh_field_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `refresh_field_settings`")  # noqa: E501
        # verify the required parameter 'connection_id' is set
        if self.api_client.client_side_validation and ('connection_id' not in params or
                                                       params['connection_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `connection_id` when calling `refresh_field_settings`")  # noqa: E501
        # verify the required parameter 'artifact' is set
        if self.api_client.client_side_validation and ('artifact' not in params or
                                                       params['artifact'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `artifact` when calling `refresh_field_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'connection_id' in params:
            path_params['connectionId'] = params['connection_id']  # noqa: E501

        query_params = []
        if 'artifact' in params:
            query_params.append(('artifact', params['artifact']))  # noqa: E501
        if 'mapping_id' in params:
            query_params.append(('mappingId', params['mapping_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/settings/integration/connections/{connectionId}/refreshFieldSettings', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[IntegrationFieldMapVM]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_mapping(self, project_id, connection_id, artifact, external_project_id, external_issue_type_id, **kwargs):  # noqa: E501
        """Remove a Mapping of a Jira connection  # noqa: E501

        Remove a Mapping of a Jira connection  <strong>qTest Manager version:</strong> 9.7+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_mapping(project_id, connection_id, artifact, external_project_id, external_issue_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int connection_id: ID of the Jira connection (required)
        :param str artifact: Valid values can be: <b>Defect, Requirement, Release</b> (required)
        :param str external_project_id: ID of a Jira project (required)
        :param str external_issue_type_id: ID of a Jira issue type.    externalProjectId and externalIssueTypeId are used to identify a mapping (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_mapping_with_http_info(project_id, connection_id, artifact, external_project_id, external_issue_type_id, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_mapping_with_http_info(project_id, connection_id, artifact, external_project_id, external_issue_type_id, **kwargs)  # noqa: E501
            return data

    def remove_mapping_with_http_info(self, project_id, connection_id, artifact, external_project_id, external_issue_type_id, **kwargs):  # noqa: E501
        """Remove a Mapping of a Jira connection  # noqa: E501

        Remove a Mapping of a Jira connection  <strong>qTest Manager version:</strong> 9.7+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_mapping_with_http_info(project_id, connection_id, artifact, external_project_id, external_issue_type_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int connection_id: ID of the Jira connection (required)
        :param str artifact: Valid values can be: <b>Defect, Requirement, Release</b> (required)
        :param str external_project_id: ID of a Jira project (required)
        :param str external_issue_type_id: ID of a Jira issue type.    externalProjectId and externalIssueTypeId are used to identify a mapping (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'connection_id', 'artifact', 'external_project_id', 'external_issue_type_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_mapping" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `remove_mapping`")  # noqa: E501
        # verify the required parameter 'connection_id' is set
        if self.api_client.client_side_validation and ('connection_id' not in params or
                                                       params['connection_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `connection_id` when calling `remove_mapping`")  # noqa: E501
        # verify the required parameter 'artifact' is set
        if self.api_client.client_side_validation and ('artifact' not in params or
                                                       params['artifact'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `artifact` when calling `remove_mapping`")  # noqa: E501
        # verify the required parameter 'external_project_id' is set
        if self.api_client.client_side_validation and ('external_project_id' not in params or
                                                       params['external_project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `external_project_id` when calling `remove_mapping`")  # noqa: E501
        # verify the required parameter 'external_issue_type_id' is set
        if self.api_client.client_side_validation and ('external_issue_type_id' not in params or
                                                       params['external_issue_type_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `external_issue_type_id` when calling `remove_mapping`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'connection_id' in params:
            path_params['connectionId'] = params['connection_id']  # noqa: E501
        if 'artifact' in params:
            path_params['artifact'] = params['artifact']  # noqa: E501

        query_params = []
        if 'external_project_id' in params:
            query_params.append(('externalProjectId', params['external_project_id']))  # noqa: E501
        if 'external_issue_type_id' in params:
            query_params.append(('externalIssueTypeId', params['external_issue_type_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/settings/integration/connections/{connectionId}/{artifact}/mappings', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieve_all_requirement_mappings_of_connection(self, project_id, connection_id, **kwargs):  # noqa: E501
        """Get requirement mappings of a Jira connection  # noqa: E501

        Get requirement mappings of a Jira connection  <strong>qTest Manager version:</strong> 9.7+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_all_requirement_mappings_of_connection(project_id, connection_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int connection_id: ID of the Jira connection (required)
        :param str external_project_id: ID of the Jira project. You will need to make API calls to Jira to get its project IDs
        :param str external_issue_type_id: ID of the Jira issue type. You will need to make API calls to Jira to get its issue type IDs
        :return: list[RequirementMapping]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_all_requirement_mappings_of_connection_with_http_info(project_id, connection_id, **kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_all_requirement_mappings_of_connection_with_http_info(project_id, connection_id, **kwargs)  # noqa: E501
            return data

    def retrieve_all_requirement_mappings_of_connection_with_http_info(self, project_id, connection_id, **kwargs):  # noqa: E501
        """Get requirement mappings of a Jira connection  # noqa: E501

        Get requirement mappings of a Jira connection  <strong>qTest Manager version:</strong> 9.7+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_all_requirement_mappings_of_connection_with_http_info(project_id, connection_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int connection_id: ID of the Jira connection (required)
        :param str external_project_id: ID of the Jira project. You will need to make API calls to Jira to get its project IDs
        :param str external_issue_type_id: ID of the Jira issue type. You will need to make API calls to Jira to get its issue type IDs
        :return: list[RequirementMapping]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'connection_id', 'external_project_id', 'external_issue_type_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_all_requirement_mappings_of_connection" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `retrieve_all_requirement_mappings_of_connection`")  # noqa: E501
        # verify the required parameter 'connection_id' is set
        if self.api_client.client_side_validation and ('connection_id' not in params or
                                                       params['connection_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `connection_id` when calling `retrieve_all_requirement_mappings_of_connection`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'connection_id' in params:
            path_params['connectionId'] = params['connection_id']  # noqa: E501

        query_params = []
        if 'external_project_id' in params:
            query_params.append(('externalProjectId', params['external_project_id']))  # noqa: E501
        if 'external_issue_type_id' in params:
            query_params.append(('externalIssueTypeId', params['external_issue_type_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/settings/integration/connections/{connectionId}/requirement/mappings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[RequirementMapping]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def toggle_release_integration(self, project_id, connection_id, **kwargs):  # noqa: E501
        """Enable or disable Release Integration feature of a Jira connection  # noqa: E501

        Enable or disable Release Integration feature  <strong>qTest Manager version:</strong> 9.7+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.toggle_release_integration(project_id, connection_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int connection_id: ID of the Jira connection (required)
        :param str active: Input <em>true</em> to enable Release integration, or <em>false</em> to disable it
        :param str auto_filter_test_run: select or deselect the checkbox <em>Auto-filter Test Runs on Jira iframe to match Fix Version/Sprint of Jira issue</em>. Valid values include: <b>True, False</b>
        :param str merge_duplicated_fix_versions: select or deselect the checkbox Merge all Jira Fix versions with existing qTest Releases that have the same name into a single Release and link to all Jira projects. Valid values include: <b>True, False</b>
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.toggle_release_integration_with_http_info(project_id, connection_id, **kwargs)  # noqa: E501
        else:
            (data) = self.toggle_release_integration_with_http_info(project_id, connection_id, **kwargs)  # noqa: E501
            return data

    def toggle_release_integration_with_http_info(self, project_id, connection_id, **kwargs):  # noqa: E501
        """Enable or disable Release Integration feature of a Jira connection  # noqa: E501

        Enable or disable Release Integration feature  <strong>qTest Manager version:</strong> 9.7+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.toggle_release_integration_with_http_info(project_id, connection_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int connection_id: ID of the Jira connection (required)
        :param str active: Input <em>true</em> to enable Release integration, or <em>false</em> to disable it
        :param str auto_filter_test_run: select or deselect the checkbox <em>Auto-filter Test Runs on Jira iframe to match Fix Version/Sprint of Jira issue</em>. Valid values include: <b>True, False</b>
        :param str merge_duplicated_fix_versions: select or deselect the checkbox Merge all Jira Fix versions with existing qTest Releases that have the same name into a single Release and link to all Jira projects. Valid values include: <b>True, False</b>
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'connection_id', 'active', 'auto_filter_test_run', 'merge_duplicated_fix_versions']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method toggle_release_integration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `toggle_release_integration`")  # noqa: E501
        # verify the required parameter 'connection_id' is set
        if self.api_client.client_side_validation and ('connection_id' not in params or
                                                       params['connection_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `connection_id` when calling `toggle_release_integration`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'connection_id' in params:
            path_params['connectionId'] = params['connection_id']  # noqa: E501

        query_params = []
        if 'active' in params:
            query_params.append(('active', params['active']))  # noqa: E501
        if 'auto_filter_test_run' in params:
            query_params.append(('autoFilterTestRun', params['auto_filter_test_run']))  # noqa: E501
        if 'merge_duplicated_fix_versions' in params:
            query_params.append(('mergeDuplicatedFixVersions', params['merge_duplicated_fix_versions']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/settings/integration/connections/{connectionId}/release', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def toggle_requirement_integration(self, project_id, connection_id, **kwargs):  # noqa: E501
        """Enable or disable a Requirement Integration feature of a Jira connection  # noqa: E501

        Enable or disable a Requirement Integration feature of a Jira connection  <strong>qTest Manager version:</strong> 9.7+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.toggle_requirement_integration(project_id, connection_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int connection_id: ID of the Jira connection (required)
        :param str active: Input <em>true</em> to enable the feature, or <em>false</em> to disable it
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.toggle_requirement_integration_with_http_info(project_id, connection_id, **kwargs)  # noqa: E501
        else:
            (data) = self.toggle_requirement_integration_with_http_info(project_id, connection_id, **kwargs)  # noqa: E501
            return data

    def toggle_requirement_integration_with_http_info(self, project_id, connection_id, **kwargs):  # noqa: E501
        """Enable or disable a Requirement Integration feature of a Jira connection  # noqa: E501

        Enable or disable a Requirement Integration feature of a Jira connection  <strong>qTest Manager version:</strong> 9.7+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.toggle_requirement_integration_with_http_info(project_id, connection_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int connection_id: ID of the Jira connection (required)
        :param str active: Input <em>true</em> to enable the feature, or <em>false</em> to disable it
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'connection_id', 'active']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method toggle_requirement_integration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `toggle_requirement_integration`")  # noqa: E501
        # verify the required parameter 'connection_id' is set
        if self.api_client.client_side_validation and ('connection_id' not in params or
                                                       params['connection_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `connection_id` when calling `toggle_requirement_integration`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'connection_id' in params:
            path_params['connectionId'] = params['connection_id']  # noqa: E501

        query_params = []
        if 'active' in params:
            query_params.append(('active', params['active']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/settings/integration/connections/{connectionId}/requirement', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def trigger_retrieving_data_for_connection(self, project_id, connection_id, artifact, **kwargs):  # noqa: E501
        """Trigger data retrieval from an integrated Jira system  # noqa: E501

        Trigger data retrieval from an integrated Jira system  <strong>qTest Manager version:</strong> 9.7+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.trigger_retrieving_data_for_connection(project_id, connection_id, artifact, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int connection_id: ID of the Jira connection (required)
        :param str artifact: Valid values include: <b>Defects, Requirements, Releases</b> (required)
        :return: QueueProcessingResponseFetchDataVM
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.trigger_retrieving_data_for_connection_with_http_info(project_id, connection_id, artifact, **kwargs)  # noqa: E501
        else:
            (data) = self.trigger_retrieving_data_for_connection_with_http_info(project_id, connection_id, artifact, **kwargs)  # noqa: E501
            return data

    def trigger_retrieving_data_for_connection_with_http_info(self, project_id, connection_id, artifact, **kwargs):  # noqa: E501
        """Trigger data retrieval from an integrated Jira system  # noqa: E501

        Trigger data retrieval from an integrated Jira system  <strong>qTest Manager version:</strong> 9.7+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.trigger_retrieving_data_for_connection_with_http_info(project_id, connection_id, artifact, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int connection_id: ID of the Jira connection (required)
        :param str artifact: Valid values include: <b>Defects, Requirements, Releases</b> (required)
        :return: QueueProcessingResponseFetchDataVM
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'connection_id', 'artifact']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method trigger_retrieving_data_for_connection" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `trigger_retrieving_data_for_connection`")  # noqa: E501
        # verify the required parameter 'connection_id' is set
        if self.api_client.client_side_validation and ('connection_id' not in params or
                                                       params['connection_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `connection_id` when calling `trigger_retrieving_data_for_connection`")  # noqa: E501
        # verify the required parameter 'artifact' is set
        if self.api_client.client_side_validation and ('artifact' not in params or
                                                       params['artifact'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `artifact` when calling `trigger_retrieving_data_for_connection`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'connection_id' in params:
            path_params['connectionId'] = params['connection_id']  # noqa: E501

        query_params = []
        if 'artifact' in params:
            query_params.append(('artifact', params['artifact']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/settings/integration/connections/{connectionId}/retrieve', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QueueProcessingResponseFetchDataVM',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def trigger_retrieving_defect_data_for_connection(self, project_id, body, **kwargs):  # noqa: E501
        """Trigger defect retrieval from an integrated Jira system  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.trigger_retrieving_defect_data_for_connection(project_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param list[str] body: PID of Jira defects (required)
        :return: QueueProcessingResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.trigger_retrieving_defect_data_for_connection_with_http_info(project_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.trigger_retrieving_defect_data_for_connection_with_http_info(project_id, body, **kwargs)  # noqa: E501
            return data

    def trigger_retrieving_defect_data_for_connection_with_http_info(self, project_id, body, **kwargs):  # noqa: E501
        """Trigger defect retrieval from an integrated Jira system  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.trigger_retrieving_defect_data_for_connection_with_http_info(project_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param list[str] body: PID of Jira defects (required)
        :return: QueueProcessingResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method trigger_retrieving_defect_data_for_connection" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `trigger_retrieving_defect_data_for_connection`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `trigger_retrieving_defect_data_for_connection`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/settings/jira-integration/defect/retrieve', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QueueProcessingResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_defect_mapping(self, project_id, connection_id, external_project_id, external_issue_type_id, body, **kwargs):  # noqa: E501
        """Update a defect mapping of Jira connection  # noqa: E501

        Update a defect mapping of Jira connection  <strong>qTest Manager version:</strong> 9.7+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_defect_mapping(project_id, connection_id, external_project_id, external_issue_type_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int connection_id: ID of the Jira connection (required)
        :param str external_project_id: ID of a Jira project (required)
        :param str external_issue_type_id: ID of the Jira issue type   externalProjectId and externalIssueTypeId are used to identify a defect mapping and cannot be modified (required)
        :param IntegrationAutoFillMappingVM body: <em>sendAttachmentToJira:</em> send test log and test step log attachments to linked Jira Defects. Valid values include: <b>True, False</b>  <em>configures:</em> Auto filling configuration for Defect submission to Jira. This is an array of JSON objects each of which consists of a Jira field Id (<em>externalFieldId</em>) and qTest fields (<em>qTestFieldIds</em>) to be auto filled to the Jira field<ul><li>You can only config auto fill for Jira text typed fields</li><li>You can auto fill multiple qTest fields to one Jira fields. Use <strong>comma without a following space</strong> to separate the fields</li><li>These following qTest fields can be configured to be auto filled to Jira fields (use these field names exactly as mentioned below instead of their IDs in qTestFieldIds): <em>Assigned To, Description, Environment, Execution Type, Planned End, Planned Start, Submitter, Target Release/Build, Test Case Version, Test Data Source, Name, Precondition, Test Case Description, Session URL, Session Description, Session Environment, Test Run URL</em></li></ul> (required)
        :return: IntegrationAutoFillMappingVM
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_defect_mapping_with_http_info(project_id, connection_id, external_project_id, external_issue_type_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_defect_mapping_with_http_info(project_id, connection_id, external_project_id, external_issue_type_id, body, **kwargs)  # noqa: E501
            return data

    def update_defect_mapping_with_http_info(self, project_id, connection_id, external_project_id, external_issue_type_id, body, **kwargs):  # noqa: E501
        """Update a defect mapping of Jira connection  # noqa: E501

        Update a defect mapping of Jira connection  <strong>qTest Manager version:</strong> 9.7+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_defect_mapping_with_http_info(project_id, connection_id, external_project_id, external_issue_type_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int connection_id: ID of the Jira connection (required)
        :param str external_project_id: ID of a Jira project (required)
        :param str external_issue_type_id: ID of the Jira issue type   externalProjectId and externalIssueTypeId are used to identify a defect mapping and cannot be modified (required)
        :param IntegrationAutoFillMappingVM body: <em>sendAttachmentToJira:</em> send test log and test step log attachments to linked Jira Defects. Valid values include: <b>True, False</b>  <em>configures:</em> Auto filling configuration for Defect submission to Jira. This is an array of JSON objects each of which consists of a Jira field Id (<em>externalFieldId</em>) and qTest fields (<em>qTestFieldIds</em>) to be auto filled to the Jira field<ul><li>You can only config auto fill for Jira text typed fields</li><li>You can auto fill multiple qTest fields to one Jira fields. Use <strong>comma without a following space</strong> to separate the fields</li><li>These following qTest fields can be configured to be auto filled to Jira fields (use these field names exactly as mentioned below instead of their IDs in qTestFieldIds): <em>Assigned To, Description, Environment, Execution Type, Planned End, Planned Start, Submitter, Target Release/Build, Test Case Version, Test Data Source, Name, Precondition, Test Case Description, Session URL, Session Description, Session Environment, Test Run URL</em></li></ul> (required)
        :return: IntegrationAutoFillMappingVM
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'connection_id', 'external_project_id', 'external_issue_type_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_defect_mapping" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `update_defect_mapping`")  # noqa: E501
        # verify the required parameter 'connection_id' is set
        if self.api_client.client_side_validation and ('connection_id' not in params or
                                                       params['connection_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `connection_id` when calling `update_defect_mapping`")  # noqa: E501
        # verify the required parameter 'external_project_id' is set
        if self.api_client.client_side_validation and ('external_project_id' not in params or
                                                       params['external_project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `external_project_id` when calling `update_defect_mapping`")  # noqa: E501
        # verify the required parameter 'external_issue_type_id' is set
        if self.api_client.client_side_validation and ('external_issue_type_id' not in params or
                                                       params['external_issue_type_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `external_issue_type_id` when calling `update_defect_mapping`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `update_defect_mapping`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'connection_id' in params:
            path_params['connectionId'] = params['connection_id']  # noqa: E501

        query_params = []
        if 'external_project_id' in params:
            query_params.append(('externalProjectId', params['external_project_id']))  # noqa: E501
        if 'external_issue_type_id' in params:
            query_params.append(('externalIssueTypeId', params['external_issue_type_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/settings/integration/connections/{connectionId}/defect/mappings', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IntegrationAutoFillMappingVM',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_integration_connection_status(self, project_id, connection_id, active, **kwargs):  # noqa: E501
        """Activate or deactivate a Jira connection  # noqa: E501

        Activate or deactivate a Jira connection  <strong>qTest Manager version:</strong> 9.7+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_integration_connection_status(project_id, connection_id, active, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int connection_id: ID of the Jira connection (required)
        :param str active: Input <em>true</em> to activate a connection, or <em>false</em> to deactivate it (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_integration_connection_status_with_http_info(project_id, connection_id, active, **kwargs)  # noqa: E501
        else:
            (data) = self.update_integration_connection_status_with_http_info(project_id, connection_id, active, **kwargs)  # noqa: E501
            return data

    def update_integration_connection_status_with_http_info(self, project_id, connection_id, active, **kwargs):  # noqa: E501
        """Activate or deactivate a Jira connection  # noqa: E501

        Activate or deactivate a Jira connection  <strong>qTest Manager version:</strong> 9.7+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_integration_connection_status_with_http_info(project_id, connection_id, active, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int connection_id: ID of the Jira connection (required)
        :param str active: Input <em>true</em> to activate a connection, or <em>false</em> to deactivate it (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'connection_id', 'active']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_integration_connection_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `update_integration_connection_status`")  # noqa: E501
        # verify the required parameter 'connection_id' is set
        if self.api_client.client_side_validation and ('connection_id' not in params or
                                                       params['connection_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `connection_id` when calling `update_integration_connection_status`")  # noqa: E501
        # verify the required parameter 'active' is set
        if self.api_client.client_side_validation and ('active' not in params or
                                                       params['active'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `active` when calling `update_integration_connection_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'connection_id' in params:
            path_params['connectionId'] = params['connection_id']  # noqa: E501

        query_params = []
        if 'active' in params:
            query_params.append(('active', params['active']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/settings/integration/connections/{connectionId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
