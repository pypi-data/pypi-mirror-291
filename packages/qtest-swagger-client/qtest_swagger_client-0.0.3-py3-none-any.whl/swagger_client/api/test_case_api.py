# coding: utf-8

"""
    qTest Manager API Version 11.0.0 - 2023.6

    qTest Manager API Version 11.0.0 - 2023.6  # noqa: E501

    OpenAPI spec version: 11.0.0 - 2023.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class TestCaseApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_test_case_comment(self, project_id, id_or_key, body, **kwargs):  # noqa: E501
        """Adds a Comment to a Test Case  # noqa: E501

        To add a Comment to a Test Case  <strong>qTest Manager version:</strong> 7.5+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_test_case_comment(project_id, id_or_key, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param str id_or_key: PID or ID of the Test Case (required)
        :param CommentResource body: The comment's properties and its content (required)
        :return: CommentResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_test_case_comment_with_http_info(project_id, id_or_key, body, **kwargs)  # noqa: E501
        else:
            (data) = self.add_test_case_comment_with_http_info(project_id, id_or_key, body, **kwargs)  # noqa: E501
            return data

    def add_test_case_comment_with_http_info(self, project_id, id_or_key, body, **kwargs):  # noqa: E501
        """Adds a Comment to a Test Case  # noqa: E501

        To add a Comment to a Test Case  <strong>qTest Manager version:</strong> 7.5+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_test_case_comment_with_http_info(project_id, id_or_key, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param str id_or_key: PID or ID of the Test Case (required)
        :param CommentResource body: The comment's properties and its content (required)
        :return: CommentResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'id_or_key', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_test_case_comment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `add_test_case_comment`")  # noqa: E501
        # verify the required parameter 'id_or_key' is set
        if self.api_client.client_side_validation and ('id_or_key' not in params or
                                                       params['id_or_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id_or_key` when calling `add_test_case_comment`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `add_test_case_comment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'id_or_key' in params:
            path_params['idOrKey'] = params['id_or_key']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/test-cases/{idOrKey}/comments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CommentResource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_test_step(self, project_id, test_case_id, body, **kwargs):  # noqa: E501
        """Creates a Test Step  # noqa: E501

        To add a Test Step to a Test Case's latest version  <strong>qTest Manager version:</strong> 6+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_test_step(project_id, test_case_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int test_case_id: ID of the Test Case (required)
        :param TestStepResource body: Given resource will add or create a test step and its CustomField columns details.  Support create test step with Parameters by inputting parameters identifier in teststep's <em>description</em> with sample like below. Parameters will be automatically added to current project.  &nbsp;&nbsp;&nbsp;&nbsp;    { &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;      \"description\": \"Description [~param1] with [~param2].\" &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;      ... &nbsp;&nbsp;&nbsp;&nbsp;    { (required)
        :param bool show_param_identifier: By default, Parameters in Test Steps are displayed in ID number mode (like \"<strong>[~123]</strong>\"). Input <strong><em>showParamIdentifier=true</em></strong> to change to Identifier text mode. Result should be like \"<strong>[~myIdentifier]</strong>\".
        :return: TestStepResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_test_step_with_http_info(project_id, test_case_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.add_test_step_with_http_info(project_id, test_case_id, body, **kwargs)  # noqa: E501
            return data

    def add_test_step_with_http_info(self, project_id, test_case_id, body, **kwargs):  # noqa: E501
        """Creates a Test Step  # noqa: E501

        To add a Test Step to a Test Case's latest version  <strong>qTest Manager version:</strong> 6+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_test_step_with_http_info(project_id, test_case_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int test_case_id: ID of the Test Case (required)
        :param TestStepResource body: Given resource will add or create a test step and its CustomField columns details.  Support create test step with Parameters by inputting parameters identifier in teststep's <em>description</em> with sample like below. Parameters will be automatically added to current project.  &nbsp;&nbsp;&nbsp;&nbsp;    { &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;      \"description\": \"Description [~param1] with [~param2].\" &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;      ... &nbsp;&nbsp;&nbsp;&nbsp;    { (required)
        :param bool show_param_identifier: By default, Parameters in Test Steps are displayed in ID number mode (like \"<strong>[~123]</strong>\"). Input <strong><em>showParamIdentifier=true</em></strong> to change to Identifier text mode. Result should be like \"<strong>[~myIdentifier]</strong>\".
        :return: TestStepResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'test_case_id', 'body', 'show_param_identifier']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_test_step" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `add_test_step`")  # noqa: E501
        # verify the required parameter 'test_case_id' is set
        if self.api_client.client_side_validation and ('test_case_id' not in params or
                                                       params['test_case_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `test_case_id` when calling `add_test_step`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `add_test_step`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'test_case_id' in params:
            path_params['testCaseId'] = params['test_case_id']  # noqa: E501

        query_params = []
        if 'show_param_identifier' in params:
            query_params.append(('showParamIdentifier', params['show_param_identifier']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/test-cases/{testCaseId}/test-steps', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TestStepResource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def approve_test_case(self, project_id, test_case_id, **kwargs):  # noqa: E501
        """Approves a Test Case  # noqa: E501

        To approve a Test Case  <strong>qTest Manager version:</strong> 7.4+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.approve_test_case(project_id, test_case_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int test_case_id: ID of the Test Case (required)
        :return: TestCaseWithCustomFieldResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.approve_test_case_with_http_info(project_id, test_case_id, **kwargs)  # noqa: E501
        else:
            (data) = self.approve_test_case_with_http_info(project_id, test_case_id, **kwargs)  # noqa: E501
            return data

    def approve_test_case_with_http_info(self, project_id, test_case_id, **kwargs):  # noqa: E501
        """Approves a Test Case  # noqa: E501

        To approve a Test Case  <strong>qTest Manager version:</strong> 7.4+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.approve_test_case_with_http_info(project_id, test_case_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int test_case_id: ID of the Test Case (required)
        :return: TestCaseWithCustomFieldResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'test_case_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method approve_test_case" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `approve_test_case`")  # noqa: E501
        # verify the required parameter 'test_case_id' is set
        if self.api_client.client_side_validation and ('test_case_id' not in params or
                                                       params['test_case_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `test_case_id` when calling `approve_test_case`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'test_case_id' in params:
            path_params['testCaseId'] = params['test_case_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/test-cases/{testCaseId}/approve', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TestCaseWithCustomFieldResource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def approve_test_case_by_vera(self, project_id, test_case_id, **kwargs):  # noqa: E501
        """test-case.vera.approve  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.approve_test_case_by_vera(project_id, test_case_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int test_case_id: ID of the Test Case (required)
        :return: TestCaseWithCustomFieldResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.approve_test_case_by_vera_with_http_info(project_id, test_case_id, **kwargs)  # noqa: E501
        else:
            (data) = self.approve_test_case_by_vera_with_http_info(project_id, test_case_id, **kwargs)  # noqa: E501
            return data

    def approve_test_case_by_vera_with_http_info(self, project_id, test_case_id, **kwargs):  # noqa: E501
        """test-case.vera.approve  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.approve_test_case_by_vera_with_http_info(project_id, test_case_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int test_case_id: ID of the Test Case (required)
        :return: TestCaseWithCustomFieldResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'test_case_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method approve_test_case_by_vera" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `approve_test_case_by_vera`")  # noqa: E501
        # verify the required parameter 'test_case_id' is set
        if self.api_client.client_side_validation and ('test_case_id' not in params or
                                                       params['test_case_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `test_case_id` when calling `approve_test_case_by_vera`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'test_case_id' in params:
            path_params['testCaseId'] = params['test_case_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/test-cases/{testCaseId}/vera/approve', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TestCaseWithCustomFieldResource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_test_case(self, project_id, body, **kwargs):  # noqa: E501
        """Creates a Test Case  # noqa: E501

        To create a Test Case  <strong>qTest Manager version:</strong> 4+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_test_case(project_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param TestCaseWithCustomFieldResource body: Test Case properties, Test Steps along with custom field information(if any), Attachments and other information to create a Test Case.  If <em>parent_id</em> is omitted, the Test Case will be created under \"Created via API\" Module.  <em>tosca_guid</em>: GUID of Tosca test case. Use for creating Tosca Test Case.  <em>tosca_node_path</em>: Node Path of Tosca test case. Use for creating Tosca Test Case.  <em>tosca_guid</em> and <em>tosca_node_path</em> are optional but must be specified in pair  Support create test case with Parameters by inputting parameters identifier in teststep's <em>description</em> with sample like below. Parameters will be automatically added to current project.  &nbsp;&nbsp;&nbsp;&nbsp;    { &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;      \"description\": \"Description [~param1] with [~param2].\" &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;      ... &nbsp;&nbsp;&nbsp;&nbsp;    { (required)
        :param str agent_id:
        :param bool show_param_identifier: By default, Parameters in Test Steps are displayed in ID number mode (like \"<strong>[~123]</strong>\"). Input <strong><em>showParamIdentifier=true</em></strong> to change to Identifier text mode. Result should be like \"<strong>[~myIdentifier]</strong>\".
        :return: TestCaseWithCustomFieldResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_test_case_with_http_info(project_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_test_case_with_http_info(project_id, body, **kwargs)  # noqa: E501
            return data

    def create_test_case_with_http_info(self, project_id, body, **kwargs):  # noqa: E501
        """Creates a Test Case  # noqa: E501

        To create a Test Case  <strong>qTest Manager version:</strong> 4+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_test_case_with_http_info(project_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param TestCaseWithCustomFieldResource body: Test Case properties, Test Steps along with custom field information(if any), Attachments and other information to create a Test Case.  If <em>parent_id</em> is omitted, the Test Case will be created under \"Created via API\" Module.  <em>tosca_guid</em>: GUID of Tosca test case. Use for creating Tosca Test Case.  <em>tosca_node_path</em>: Node Path of Tosca test case. Use for creating Tosca Test Case.  <em>tosca_guid</em> and <em>tosca_node_path</em> are optional but must be specified in pair  Support create test case with Parameters by inputting parameters identifier in teststep's <em>description</em> with sample like below. Parameters will be automatically added to current project.  &nbsp;&nbsp;&nbsp;&nbsp;    { &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;      \"description\": \"Description [~param1] with [~param2].\" &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;      ... &nbsp;&nbsp;&nbsp;&nbsp;    { (required)
        :param str agent_id:
        :param bool show_param_identifier: By default, Parameters in Test Steps are displayed in ID number mode (like \"<strong>[~123]</strong>\"). Input <strong><em>showParamIdentifier=true</em></strong> to change to Identifier text mode. Result should be like \"<strong>[~myIdentifier]</strong>\".
        :return: TestCaseWithCustomFieldResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'body', 'agent_id', 'show_param_identifier']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_test_case" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `create_test_case`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `create_test_case`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []
        if 'agent_id' in params:
            query_params.append(('agentId', params['agent_id']))  # noqa: E501
        if 'show_param_identifier' in params:
            query_params.append(('showParamIdentifier', params['show_param_identifier']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/test-cases', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TestCaseWithCustomFieldResource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_test_case(self, project_id, test_case_id, **kwargs):  # noqa: E501
        """Deletes a Test Case  # noqa: E501

        To delete Test Case  <strong>qTest Manager version:</strong> 6+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_test_case(project_id, test_case_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int test_case_id: ID of the Test Case which needs to be deleted. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_test_case_with_http_info(project_id, test_case_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_test_case_with_http_info(project_id, test_case_id, **kwargs)  # noqa: E501
            return data

    def delete_test_case_with_http_info(self, project_id, test_case_id, **kwargs):  # noqa: E501
        """Deletes a Test Case  # noqa: E501

        To delete Test Case  <strong>qTest Manager version:</strong> 6+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_test_case_with_http_info(project_id, test_case_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int test_case_id: ID of the Test Case which needs to be deleted. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'test_case_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_test_case" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `delete_test_case`")  # noqa: E501
        # verify the required parameter 'test_case_id' is set
        if self.api_client.client_side_validation and ('test_case_id' not in params or
                                                       params['test_case_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `test_case_id` when calling `delete_test_case`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'test_case_id' in params:
            path_params['testCaseId'] = params['test_case_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/test-cases/{testCaseId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_test_case_comment(self, project_id, id_or_key, comment_id, **kwargs):  # noqa: E501
        """Deletes a Comment of a Test Case  # noqa: E501

        To delete a comment of a Test Case  <strong>qTest Manager version:</strong> 7.5+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_test_case_comment(project_id, id_or_key, comment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param str id_or_key: PID or ID of the Test Case (required)
        :param int comment_id: ID of the comment. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_test_case_comment_with_http_info(project_id, id_or_key, comment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_test_case_comment_with_http_info(project_id, id_or_key, comment_id, **kwargs)  # noqa: E501
            return data

    def delete_test_case_comment_with_http_info(self, project_id, id_or_key, comment_id, **kwargs):  # noqa: E501
        """Deletes a Comment of a Test Case  # noqa: E501

        To delete a comment of a Test Case  <strong>qTest Manager version:</strong> 7.5+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_test_case_comment_with_http_info(project_id, id_or_key, comment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param str id_or_key: PID or ID of the Test Case (required)
        :param int comment_id: ID of the comment. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'id_or_key', 'comment_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_test_case_comment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `delete_test_case_comment`")  # noqa: E501
        # verify the required parameter 'id_or_key' is set
        if self.api_client.client_side_validation and ('id_or_key' not in params or
                                                       params['id_or_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id_or_key` when calling `delete_test_case_comment`")  # noqa: E501
        # verify the required parameter 'comment_id' is set
        if self.api_client.client_side_validation and ('comment_id' not in params or
                                                       params['comment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `comment_id` when calling `delete_test_case_comment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'id_or_key' in params:
            path_params['idOrKey'] = params['id_or_key']  # noqa: E501
        if 'comment_id' in params:
            path_params['commentId'] = params['comment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/test-cases/{idOrKey}/comments/{commentId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_test_step(self, project_id, test_case_id, step_id, **kwargs):  # noqa: E501
        """Deletes a Test Step  # noqa: E501

        To delete a test step of a Test Case  <strong>qTest Manager version:</strong> 6+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_test_step(project_id, test_case_id, step_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int test_case_id: ID of the Test Case (required)
        :param int step_id: ID of the Test Step (required)
        :param bool update_version: If specified updateVersion=true, then the test case version will be updated when the test step is deleted.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_test_step_with_http_info(project_id, test_case_id, step_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_test_step_with_http_info(project_id, test_case_id, step_id, **kwargs)  # noqa: E501
            return data

    def delete_test_step_with_http_info(self, project_id, test_case_id, step_id, **kwargs):  # noqa: E501
        """Deletes a Test Step  # noqa: E501

        To delete a test step of a Test Case  <strong>qTest Manager version:</strong> 6+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_test_step_with_http_info(project_id, test_case_id, step_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int test_case_id: ID of the Test Case (required)
        :param int step_id: ID of the Test Step (required)
        :param bool update_version: If specified updateVersion=true, then the test case version will be updated when the test step is deleted.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'test_case_id', 'step_id', 'update_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_test_step" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `delete_test_step`")  # noqa: E501
        # verify the required parameter 'test_case_id' is set
        if self.api_client.client_side_validation and ('test_case_id' not in params or
                                                       params['test_case_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `test_case_id` when calling `delete_test_step`")  # noqa: E501
        # verify the required parameter 'step_id' is set
        if self.api_client.client_side_validation and ('step_id' not in params or
                                                       params['step_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `step_id` when calling `delete_test_step`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'test_case_id' in params:
            path_params['testCaseId'] = params['test_case_id']  # noqa: E501
        if 'step_id' in params:
            path_params['stepId'] = params['step_id']  # noqa: E501

        query_params = []
        if 'update_version' in params:
            query_params.append(('updateVersion', params['update_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/test-cases/{testCaseId}/test-steps/{stepId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_test_case(self, project_id, test_case_id_or_pid, **kwargs):  # noqa: E501
        """Gets a Test Case  # noqa: E501

        To retrieve a Test Case  <strong>qTest Manager version:</strong> 6+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_test_case(project_id, test_case_id_or_pid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param str test_case_id_or_pid: ID of the Test Case Or Pid of the test case (required)
        :param int version_id: ID of the Test Case version
        :param str expand: By default, Test Steps are excluded from the response. Specify <em>expand=teststep</em> to include Test Steps
        :param bool show_param_identifier: By default, Parameters in Test Steps are displayed in ID number mode (like \"<strong>[~123]</strong>\"). Input <strong><em>showParamIdentifier=true</em></strong> to change to Identifier text mode. Result should be like \"<strong>[~myIdentifier]</strong>\".
        :return: TestCaseWithCustomFieldResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_test_case_with_http_info(project_id, test_case_id_or_pid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_test_case_with_http_info(project_id, test_case_id_or_pid, **kwargs)  # noqa: E501
            return data

    def get_test_case_with_http_info(self, project_id, test_case_id_or_pid, **kwargs):  # noqa: E501
        """Gets a Test Case  # noqa: E501

        To retrieve a Test Case  <strong>qTest Manager version:</strong> 6+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_test_case_with_http_info(project_id, test_case_id_or_pid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param str test_case_id_or_pid: ID of the Test Case Or Pid of the test case (required)
        :param int version_id: ID of the Test Case version
        :param str expand: By default, Test Steps are excluded from the response. Specify <em>expand=teststep</em> to include Test Steps
        :param bool show_param_identifier: By default, Parameters in Test Steps are displayed in ID number mode (like \"<strong>[~123]</strong>\"). Input <strong><em>showParamIdentifier=true</em></strong> to change to Identifier text mode. Result should be like \"<strong>[~myIdentifier]</strong>\".
        :return: TestCaseWithCustomFieldResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'test_case_id_or_pid', 'version_id', 'expand', 'show_param_identifier']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_test_case" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `get_test_case`")  # noqa: E501
        # verify the required parameter 'test_case_id_or_pid' is set
        if self.api_client.client_side_validation and ('test_case_id_or_pid' not in params or
                                                       params['test_case_id_or_pid'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `test_case_id_or_pid` when calling `get_test_case`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'test_case_id_or_pid' in params:
            path_params['testCaseIdOrPid'] = params['test_case_id_or_pid']  # noqa: E501

        query_params = []
        if 'version_id' in params:
            query_params.append(('versionId', params['version_id']))  # noqa: E501
        if 'expand' in params:
            query_params.append(('expand', params['expand']))  # noqa: E501
        if 'show_param_identifier' in params:
            query_params.append(('showParamIdentifier', params['show_param_identifier']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/test-cases/{testCaseIdOrPid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TestCaseWithCustomFieldResource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_test_case_comment_by_id(self, project_id, id_or_key, comment_id, **kwargs):  # noqa: E501
        """Gets a Comment of a Test Case  # noqa: E501

        To retrieve a comment of a Test Case  <strong>qTest Manager version:</strong> 7.5+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_test_case_comment_by_id(project_id, id_or_key, comment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param str id_or_key: PID or ID of the Test Case (required)
        :param int comment_id: ID of the comment. (required)
        :return: CommentResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_test_case_comment_by_id_with_http_info(project_id, id_or_key, comment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_test_case_comment_by_id_with_http_info(project_id, id_or_key, comment_id, **kwargs)  # noqa: E501
            return data

    def get_test_case_comment_by_id_with_http_info(self, project_id, id_or_key, comment_id, **kwargs):  # noqa: E501
        """Gets a Comment of a Test Case  # noqa: E501

        To retrieve a comment of a Test Case  <strong>qTest Manager version:</strong> 7.5+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_test_case_comment_by_id_with_http_info(project_id, id_or_key, comment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param str id_or_key: PID or ID of the Test Case (required)
        :param int comment_id: ID of the comment. (required)
        :return: CommentResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'id_or_key', 'comment_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_test_case_comment_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `get_test_case_comment_by_id`")  # noqa: E501
        # verify the required parameter 'id_or_key' is set
        if self.api_client.client_side_validation and ('id_or_key' not in params or
                                                       params['id_or_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id_or_key` when calling `get_test_case_comment_by_id`")  # noqa: E501
        # verify the required parameter 'comment_id' is set
        if self.api_client.client_side_validation and ('comment_id' not in params or
                                                       params['comment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `comment_id` when calling `get_test_case_comment_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'id_or_key' in params:
            path_params['idOrKey'] = params['id_or_key']  # noqa: E501
        if 'comment_id' in params:
            path_params['commentId'] = params['comment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/test-cases/{idOrKey}/comments/{commentId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CommentResource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_test_case_comments(self, project_id, id_or_key, **kwargs):  # noqa: E501
        """Gets all Comments of a Test Case  # noqa: E501

        To retrieve all comments of a Test Case  <strong>qTest Manager version:</strong> 7.5+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_test_case_comments(project_id, id_or_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param str id_or_key: PID or ID of the Test Case whose comments you want to retrieve (required)
        :param int page: By default the first page is returned but you can specify any page number to retrieve objects
        :param int page_size: The result is paginated. By the default, the number of objects in each page is 100 if this is omitted. You can specify your custom number (up to 999) in this parameter
        :return: PagedResourceCommentResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_test_case_comments_with_http_info(project_id, id_or_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_test_case_comments_with_http_info(project_id, id_or_key, **kwargs)  # noqa: E501
            return data

    def get_test_case_comments_with_http_info(self, project_id, id_or_key, **kwargs):  # noqa: E501
        """Gets all Comments of a Test Case  # noqa: E501

        To retrieve all comments of a Test Case  <strong>qTest Manager version:</strong> 7.5+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_test_case_comments_with_http_info(project_id, id_or_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param str id_or_key: PID or ID of the Test Case whose comments you want to retrieve (required)
        :param int page: By default the first page is returned but you can specify any page number to retrieve objects
        :param int page_size: The result is paginated. By the default, the number of objects in each page is 100 if this is omitted. You can specify your custom number (up to 999) in this parameter
        :return: PagedResourceCommentResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'id_or_key', 'page', 'page_size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_test_case_comments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `get_test_case_comments`")  # noqa: E501
        # verify the required parameter 'id_or_key' is set
        if self.api_client.client_side_validation and ('id_or_key' not in params or
                                                       params['id_or_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id_or_key` when calling `get_test_case_comments`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'id_or_key' in params:
            path_params['idOrKey'] = params['id_or_key']  # noqa: E501

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/test-cases/{idOrKey}/comments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedResourceCommentResource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_test_case_version_by_id(self, project_id, test_case_id, version_id, **kwargs):  # noqa: E501
        """Gets a version of a Test Case  # noqa: E501

        To retrieve a specific version of a Test Case  <strong>qTest Manager version:</strong> 4+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_test_case_version_by_id(project_id, test_case_id, version_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int test_case_id: ID of the Test Case (required)
        :param int version_id: ID of the Test Case version (required)
        :param bool show_param_identifier: By default, Parameters in Test Steps are displayed in ID number mode (like \"<strong>[~123]</strong>\"). Input <strong><em>showParamIdentifier=true</em></strong> to change to Identifier text mode. Result should be like \"<strong>[~myIdentifier]</strong>\".
        :return: TestCaseWithCustomFieldResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_test_case_version_by_id_with_http_info(project_id, test_case_id, version_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_test_case_version_by_id_with_http_info(project_id, test_case_id, version_id, **kwargs)  # noqa: E501
            return data

    def get_test_case_version_by_id_with_http_info(self, project_id, test_case_id, version_id, **kwargs):  # noqa: E501
        """Gets a version of a Test Case  # noqa: E501

        To retrieve a specific version of a Test Case  <strong>qTest Manager version:</strong> 4+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_test_case_version_by_id_with_http_info(project_id, test_case_id, version_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int test_case_id: ID of the Test Case (required)
        :param int version_id: ID of the Test Case version (required)
        :param bool show_param_identifier: By default, Parameters in Test Steps are displayed in ID number mode (like \"<strong>[~123]</strong>\"). Input <strong><em>showParamIdentifier=true</em></strong> to change to Identifier text mode. Result should be like \"<strong>[~myIdentifier]</strong>\".
        :return: TestCaseWithCustomFieldResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'test_case_id', 'version_id', 'show_param_identifier']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_test_case_version_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `get_test_case_version_by_id`")  # noqa: E501
        # verify the required parameter 'test_case_id' is set
        if self.api_client.client_side_validation and ('test_case_id' not in params or
                                                       params['test_case_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `test_case_id` when calling `get_test_case_version_by_id`")  # noqa: E501
        # verify the required parameter 'version_id' is set
        if self.api_client.client_side_validation and ('version_id' not in params or
                                                       params['version_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `version_id` when calling `get_test_case_version_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'test_case_id' in params:
            path_params['testCaseId'] = params['test_case_id']  # noqa: E501
        if 'version_id' in params:
            path_params['versionId'] = params['version_id']  # noqa: E501

        query_params = []
        if 'show_param_identifier' in params:
            query_params.append(('showParamIdentifier', params['show_param_identifier']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/test-cases/{testCaseId}/versions/{versionId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TestCaseWithCustomFieldResource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_test_cases(self, project_id, page, size, **kwargs):  # noqa: E501
        """Gets multiple Test Cases  # noqa: E501

        To retrieve all Test Cases or Test Cases which are located directly under a Module  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_test_cases(project_id, page, size, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int page: By default the first page is returned. However, you can specify any page number to retrieve test cases. (required)
        :param int size: The result is paginated. By the default, the number of requirements in each page is 20.  You can specify your custom number in this parameter. (required)
        :param int parent_id: Module ID
        :param bool expand_props: By default, Test Case properties are included in the response. specify <em>expandProps=false</em> to exclude them
        :param bool expand_steps: By default, Test Steps are excluded from the response body. Input <em>expandSteps=true</em> to include Test Steps
        :param bool show_param_identifier: By default, Parameters in Test Steps are displayed in ID number mode (like \"<strong>[~123]</strong>\"). Input <strong><em>showParamIdentifier=true</em></strong> to change to Identifier text mode. Result should be like \"<strong>[~myIdentifier]</strong>\".
        :return: list[TestCaseWithCustomFieldResource]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_test_cases_with_http_info(project_id, page, size, **kwargs)  # noqa: E501
        else:
            (data) = self.get_test_cases_with_http_info(project_id, page, size, **kwargs)  # noqa: E501
            return data

    def get_test_cases_with_http_info(self, project_id, page, size, **kwargs):  # noqa: E501
        """Gets multiple Test Cases  # noqa: E501

        To retrieve all Test Cases or Test Cases which are located directly under a Module  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_test_cases_with_http_info(project_id, page, size, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int page: By default the first page is returned. However, you can specify any page number to retrieve test cases. (required)
        :param int size: The result is paginated. By the default, the number of requirements in each page is 20.  You can specify your custom number in this parameter. (required)
        :param int parent_id: Module ID
        :param bool expand_props: By default, Test Case properties are included in the response. specify <em>expandProps=false</em> to exclude them
        :param bool expand_steps: By default, Test Steps are excluded from the response body. Input <em>expandSteps=true</em> to include Test Steps
        :param bool show_param_identifier: By default, Parameters in Test Steps are displayed in ID number mode (like \"<strong>[~123]</strong>\"). Input <strong><em>showParamIdentifier=true</em></strong> to change to Identifier text mode. Result should be like \"<strong>[~myIdentifier]</strong>\".
        :return: list[TestCaseWithCustomFieldResource]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'page', 'size', 'parent_id', 'expand_props', 'expand_steps', 'show_param_identifier']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_test_cases" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `get_test_cases`")  # noqa: E501
        # verify the required parameter 'page' is set
        if self.api_client.client_side_validation and ('page' not in params or
                                                       params['page'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `page` when calling `get_test_cases`")  # noqa: E501
        # verify the required parameter 'size' is set
        if self.api_client.client_side_validation and ('size' not in params or
                                                       params['size'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `size` when calling `get_test_cases`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []
        if 'parent_id' in params:
            query_params.append(('parentId', params['parent_id']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'expand_props' in params:
            query_params.append(('expandProps', params['expand_props']))  # noqa: E501
        if 'expand_steps' in params:
            query_params.append(('expandSteps', params['expand_steps']))  # noqa: E501
        if 'show_param_identifier' in params:
            query_params.append(('showParamIdentifier', params['show_param_identifier']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/test-cases', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_test_step(self, project_id, test_case_id, step_id, **kwargs):  # noqa: E501
        """Gets a Test Step  # noqa: E501

        To retrieve a Test Step of a Test Case's latest version  <strong>qTest Manager version:</strong> 6+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_test_step(project_id, test_case_id, step_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int test_case_id: ID of the Test Case (required)
        :param int step_id: ID of the test step.   The ObjectId of customFieldInfo is used as a StepId here. (required)
        :param bool show_param_identifier: By default, Parameters in Test Steps are displayed in ID number mode (like \"<strong>[~123]</strong>\"). Input <strong><em>showParamIdentifier=true</em></strong> to change to Identifier text mode. Result should be like \"<strong>[~myIdentifier]</strong>\".
        :return: TestStepResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_test_step_with_http_info(project_id, test_case_id, step_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_test_step_with_http_info(project_id, test_case_id, step_id, **kwargs)  # noqa: E501
            return data

    def get_test_step_with_http_info(self, project_id, test_case_id, step_id, **kwargs):  # noqa: E501
        """Gets a Test Step  # noqa: E501

        To retrieve a Test Step of a Test Case's latest version  <strong>qTest Manager version:</strong> 6+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_test_step_with_http_info(project_id, test_case_id, step_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int test_case_id: ID of the Test Case (required)
        :param int step_id: ID of the test step.   The ObjectId of customFieldInfo is used as a StepId here. (required)
        :param bool show_param_identifier: By default, Parameters in Test Steps are displayed in ID number mode (like \"<strong>[~123]</strong>\"). Input <strong><em>showParamIdentifier=true</em></strong> to change to Identifier text mode. Result should be like \"<strong>[~myIdentifier]</strong>\".
        :return: TestStepResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'test_case_id', 'step_id', 'show_param_identifier']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_test_step" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `get_test_step`")  # noqa: E501
        # verify the required parameter 'test_case_id' is set
        if self.api_client.client_side_validation and ('test_case_id' not in params or
                                                       params['test_case_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `test_case_id` when calling `get_test_step`")  # noqa: E501
        # verify the required parameter 'step_id' is set
        if self.api_client.client_side_validation and ('step_id' not in params or
                                                       params['step_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `step_id` when calling `get_test_step`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'test_case_id' in params:
            path_params['testCaseId'] = params['test_case_id']  # noqa: E501
        if 'step_id' in params:
            path_params['stepId'] = params['step_id']  # noqa: E501

        query_params = []
        if 'show_param_identifier' in params:
            query_params.append(('showParamIdentifier', params['show_param_identifier']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/test-cases/{testCaseId}/test-steps/{stepId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TestStepResource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_test_steps(self, project_id, test_case_id, **kwargs):  # noqa: E501
        """Gets Test Steps of a Test Case  # noqa: E501

        To retrieve all Test Steps of a Test Case's latest version  <strong>qTest Manager version:</strong> 6+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_test_steps(project_id, test_case_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int test_case_id: ID of the Test Case (required)
        :param bool show_param_identifier: By default, Parameters in Test Steps are displayed in ID number mode (like \"<strong>[~123]</strong>\"). Input <strong><em>showParamIdentifier=true</em></strong> to change to Identifier text mode. Result should be like \"<strong>[~myIdentifier]</strong>\".
        :return: list[TestStepResource]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_test_steps_with_http_info(project_id, test_case_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_test_steps_with_http_info(project_id, test_case_id, **kwargs)  # noqa: E501
            return data

    def get_test_steps_with_http_info(self, project_id, test_case_id, **kwargs):  # noqa: E501
        """Gets Test Steps of a Test Case  # noqa: E501

        To retrieve all Test Steps of a Test Case's latest version  <strong>qTest Manager version:</strong> 6+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_test_steps_with_http_info(project_id, test_case_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int test_case_id: ID of the Test Case (required)
        :param bool show_param_identifier: By default, Parameters in Test Steps are displayed in ID number mode (like \"<strong>[~123]</strong>\"). Input <strong><em>showParamIdentifier=true</em></strong> to change to Identifier text mode. Result should be like \"<strong>[~myIdentifier]</strong>\".
        :return: list[TestStepResource]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'test_case_id', 'show_param_identifier']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_test_steps" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `get_test_steps`")  # noqa: E501
        # verify the required parameter 'test_case_id' is set
        if self.api_client.client_side_validation and ('test_case_id' not in params or
                                                       params['test_case_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `test_case_id` when calling `get_test_steps`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'test_case_id' in params:
            path_params['testCaseId'] = params['test_case_id']  # noqa: E501

        query_params = []
        if 'show_param_identifier' in params:
            query_params.append(('showParamIdentifier', params['show_param_identifier']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/test-cases/{testCaseId}/test-steps', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TestStepResource]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_test_steps_by_version(self, project_id, test_case_id, version_id, **kwargs):  # noqa: E501
        """Gets Test Steps of a Test Case version  # noqa: E501

        To retrieve all Test Steps of a specific Test Case version  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_test_steps_by_version(project_id, test_case_id, version_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int test_case_id: ID of the Test Case (required)
        :param int version_id: ID of the Test Case version (required)
        :param str expand: when you Specify <em>expand=calledteststep</em>   It will include Test Steps of the called Test Cases in your response.
        :param bool show_param_identifier: By default, Parameters in Test Steps are displayed in ID number mode (like \"<strong>[~123]</strong>\"). Input <strong><em>showParamIdentifier=true</em></strong> to change to Identifier text mode. Result should be like \"<strong>[~myIdentifier]</strong>\".
        :return: list[TestStepResource]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_test_steps_by_version_with_http_info(project_id, test_case_id, version_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_test_steps_by_version_with_http_info(project_id, test_case_id, version_id, **kwargs)  # noqa: E501
            return data

    def get_test_steps_by_version_with_http_info(self, project_id, test_case_id, version_id, **kwargs):  # noqa: E501
        """Gets Test Steps of a Test Case version  # noqa: E501

        To retrieve all Test Steps of a specific Test Case version  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_test_steps_by_version_with_http_info(project_id, test_case_id, version_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int test_case_id: ID of the Test Case (required)
        :param int version_id: ID of the Test Case version (required)
        :param str expand: when you Specify <em>expand=calledteststep</em>   It will include Test Steps of the called Test Cases in your response.
        :param bool show_param_identifier: By default, Parameters in Test Steps are displayed in ID number mode (like \"<strong>[~123]</strong>\"). Input <strong><em>showParamIdentifier=true</em></strong> to change to Identifier text mode. Result should be like \"<strong>[~myIdentifier]</strong>\".
        :return: list[TestStepResource]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'test_case_id', 'version_id', 'expand', 'show_param_identifier']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_test_steps_by_version" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `get_test_steps_by_version`")  # noqa: E501
        # verify the required parameter 'test_case_id' is set
        if self.api_client.client_side_validation and ('test_case_id' not in params or
                                                       params['test_case_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `test_case_id` when calling `get_test_steps_by_version`")  # noqa: E501
        # verify the required parameter 'version_id' is set
        if self.api_client.client_side_validation and ('version_id' not in params or
                                                       params['version_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `version_id` when calling `get_test_steps_by_version`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'test_case_id' in params:
            path_params['testCaseId'] = params['test_case_id']  # noqa: E501
        if 'version_id' in params:
            path_params['versionId'] = params['version_id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('expand', params['expand']))  # noqa: E501
        if 'show_param_identifier' in params:
            query_params.append(('showParamIdentifier', params['show_param_identifier']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/test-cases/{testCaseId}/versions/{versionId}/test-steps', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TestStepResource]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_test_steps_by_version_id(self, project_id, test_case_id, version_id, page, size, **kwargs):  # noqa: E501
        """Gets Test Steps of a Test Case version  # noqa: E501

        To retrieve all Test Steps of a specific Test Case version  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_test_steps_by_version_id(project_id, test_case_id, version_id, page, size, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int test_case_id: ID of the Test Case (required)
        :param int version_id: ID of the Test Case version (required)
        :param int page: By default the first page is returned but you can specify any page number to retrieve objects (required)
        :param int size: size (required)
        :param str expand: when you Specify <em>expand=calledteststep</em>   It will include Test Steps of the called Test Cases in your response.
        :param bool show_param_identifier: By default, Parameters in Test Steps are displayed in ID number mode (like \"<strong>[~123]</strong>\"). Input <strong><em>showParamIdentifier=true</em></strong> to change to Identifier text mode. Result should be like \"<strong>[~myIdentifier]</strong>\".
        :return: list[TestStepResource]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_test_steps_by_version_id_with_http_info(project_id, test_case_id, version_id, page, size, **kwargs)  # noqa: E501
        else:
            (data) = self.get_test_steps_by_version_id_with_http_info(project_id, test_case_id, version_id, page, size, **kwargs)  # noqa: E501
            return data

    def get_test_steps_by_version_id_with_http_info(self, project_id, test_case_id, version_id, page, size, **kwargs):  # noqa: E501
        """Gets Test Steps of a Test Case version  # noqa: E501

        To retrieve all Test Steps of a specific Test Case version  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_test_steps_by_version_id_with_http_info(project_id, test_case_id, version_id, page, size, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int test_case_id: ID of the Test Case (required)
        :param int version_id: ID of the Test Case version (required)
        :param int page: By default the first page is returned but you can specify any page number to retrieve objects (required)
        :param int size: size (required)
        :param str expand: when you Specify <em>expand=calledteststep</em>   It will include Test Steps of the called Test Cases in your response.
        :param bool show_param_identifier: By default, Parameters in Test Steps are displayed in ID number mode (like \"<strong>[~123]</strong>\"). Input <strong><em>showParamIdentifier=true</em></strong> to change to Identifier text mode. Result should be like \"<strong>[~myIdentifier]</strong>\".
        :return: list[TestStepResource]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'test_case_id', 'version_id', 'page', 'size', 'expand', 'show_param_identifier']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_test_steps_by_version_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `get_test_steps_by_version_id`")  # noqa: E501
        # verify the required parameter 'test_case_id' is set
        if self.api_client.client_side_validation and ('test_case_id' not in params or
                                                       params['test_case_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `test_case_id` when calling `get_test_steps_by_version_id`")  # noqa: E501
        # verify the required parameter 'version_id' is set
        if self.api_client.client_side_validation and ('version_id' not in params or
                                                       params['version_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `version_id` when calling `get_test_steps_by_version_id`")  # noqa: E501
        # verify the required parameter 'page' is set
        if self.api_client.client_side_validation and ('page' not in params or
                                                       params['page'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `page` when calling `get_test_steps_by_version_id`")  # noqa: E501
        # verify the required parameter 'size' is set
        if self.api_client.client_side_validation and ('size' not in params or
                                                       params['size'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `size` when calling `get_test_steps_by_version_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'test_case_id' in params:
            path_params['testCaseId'] = params['test_case_id']  # noqa: E501
        if 'version_id' in params:
            path_params['versionId'] = params['version_id']  # noqa: E501

        query_params = []
        if 'expand' in params:
            query_params.append(('expand', params['expand']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'show_param_identifier' in params:
            query_params.append(('showParamIdentifier', params['show_param_identifier']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v4/projects/{projectId}/test-cases/{testCaseId}/versions/{versionId}/test-steps', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TestStepResource]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_test_steps_of_test_case(self, project_id, test_case_id, page, size, **kwargs):  # noqa: E501
        """Gets Test Steps of a Test Case  # noqa: E501

        To retrieve all Test Steps of a Test Case's latest version  <strong>qTest Manager version:</strong> 6+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_test_steps_of_test_case(project_id, test_case_id, page, size, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int test_case_id: ID of the Test Case (required)
        :param int page: By default the first page is returned but you can specify any page number to retrieve objects (required)
        :param int size: size (required)
        :param bool show_param_identifier: By default, Parameters in Test Steps are displayed in ID number mode (like \"<strong>[~123]</strong>\"). Input <strong><em>showParamIdentifier=true</em></strong> to change to Identifier text mode. Result should be like \"<strong>[~myIdentifier]</strong>\".
        :return: list[TestStepResource]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_test_steps_of_test_case_with_http_info(project_id, test_case_id, page, size, **kwargs)  # noqa: E501
        else:
            (data) = self.get_test_steps_of_test_case_with_http_info(project_id, test_case_id, page, size, **kwargs)  # noqa: E501
            return data

    def get_test_steps_of_test_case_with_http_info(self, project_id, test_case_id, page, size, **kwargs):  # noqa: E501
        """Gets Test Steps of a Test Case  # noqa: E501

        To retrieve all Test Steps of a Test Case's latest version  <strong>qTest Manager version:</strong> 6+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_test_steps_of_test_case_with_http_info(project_id, test_case_id, page, size, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int test_case_id: ID of the Test Case (required)
        :param int page: By default the first page is returned but you can specify any page number to retrieve objects (required)
        :param int size: size (required)
        :param bool show_param_identifier: By default, Parameters in Test Steps are displayed in ID number mode (like \"<strong>[~123]</strong>\"). Input <strong><em>showParamIdentifier=true</em></strong> to change to Identifier text mode. Result should be like \"<strong>[~myIdentifier]</strong>\".
        :return: list[TestStepResource]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'test_case_id', 'page', 'size', 'show_param_identifier']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_test_steps_of_test_case" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `get_test_steps_of_test_case`")  # noqa: E501
        # verify the required parameter 'test_case_id' is set
        if self.api_client.client_side_validation and ('test_case_id' not in params or
                                                       params['test_case_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `test_case_id` when calling `get_test_steps_of_test_case`")  # noqa: E501
        # verify the required parameter 'page' is set
        if self.api_client.client_side_validation and ('page' not in params or
                                                       params['page'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `page` when calling `get_test_steps_of_test_case`")  # noqa: E501
        # verify the required parameter 'size' is set
        if self.api_client.client_side_validation and ('size' not in params or
                                                       params['size'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `size` when calling `get_test_steps_of_test_case`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'test_case_id' in params:
            path_params['testCaseId'] = params['test_case_id']  # noqa: E501

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'show_param_identifier' in params:
            query_params.append(('showParamIdentifier', params['show_param_identifier']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v4/projects/{projectId}/test-cases/{testCaseId}/test-steps', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TestStepResource]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_versions(self, project_id, test_case_id, **kwargs):  # noqa: E501
        """Gets all versions of a Test Case  # noqa: E501

        Get all versions of a Test Case.  Example:  API returns all approved major test case versions and the last unapproved minor version if there is one.  <li>if version history is 1.0, 1.1, 2.0, 2.1, 2.2, 3.0, 3.1, 3.2; it will only return versions 1.0, 2.0, 3.0 and 3.2</li><li>if the version history is 1.0, 1.1, 2.0, 2.1, 2.2, 3.0; it will only return versions 1.0, 2.0, and 3.0</li><li>if the version history is 0.1, 0.2, 0.3, 0.4; it will only return version 0.4</li><strong>qTest Manager version:</strong> 7.4+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_versions(project_id, test_case_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int test_case_id: ID of the test case (required)
        :param bool show_param_identifier: By default, Parameters in Test Steps are displayed in ID number mode (like \"<strong>[~123]</strong>\"). Input <strong><em>showParamIdentifier=true</em></strong> to change to Identifier text mode. Result should be like \"<strong>[~myIdentifier]</strong>\".
        :return: list[TestCaseWithCustomFieldResource]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_versions_with_http_info(project_id, test_case_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_versions_with_http_info(project_id, test_case_id, **kwargs)  # noqa: E501
            return data

    def get_versions_with_http_info(self, project_id, test_case_id, **kwargs):  # noqa: E501
        """Gets all versions of a Test Case  # noqa: E501

        Get all versions of a Test Case.  Example:  API returns all approved major test case versions and the last unapproved minor version if there is one.  <li>if version history is 1.0, 1.1, 2.0, 2.1, 2.2, 3.0, 3.1, 3.2; it will only return versions 1.0, 2.0, 3.0 and 3.2</li><li>if the version history is 1.0, 1.1, 2.0, 2.1, 2.2, 3.0; it will only return versions 1.0, 2.0, and 3.0</li><li>if the version history is 0.1, 0.2, 0.3, 0.4; it will only return version 0.4</li><strong>qTest Manager version:</strong> 7.4+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_versions_with_http_info(project_id, test_case_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int test_case_id: ID of the test case (required)
        :param bool show_param_identifier: By default, Parameters in Test Steps are displayed in ID number mode (like \"<strong>[~123]</strong>\"). Input <strong><em>showParamIdentifier=true</em></strong> to change to Identifier text mode. Result should be like \"<strong>[~myIdentifier]</strong>\".
        :return: list[TestCaseWithCustomFieldResource]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'test_case_id', 'show_param_identifier']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_versions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `get_versions`")  # noqa: E501
        # verify the required parameter 'test_case_id' is set
        if self.api_client.client_side_validation and ('test_case_id' not in params or
                                                       params['test_case_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `test_case_id` when calling `get_versions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'test_case_id' in params:
            path_params['testCaseId'] = params['test_case_id']  # noqa: E501

        query_params = []
        if 'show_param_identifier' in params:
            query_params.append(('showParamIdentifier', params['show_param_identifier']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/test-cases/{testCaseId}/versions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TestCaseWithCustomFieldResource]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_multiple_test_cases(self, project_id, body, **kwargs):  # noqa: E501
        """Updates multiple test cases  # noqa: E501

        To update multiple Test Cases  <strong>qTest Manager version:</strong> 6+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_multiple_test_cases(project_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param object body: Test Case properties for all the test cases, Test Steps along with custom field information(if any) to update the Test Case.  Support update test case with Parameters by inputting parameters identifier in teststep's <em>description</em> with sample like below. Parameters will be automatically added to current project.  &nbsp;&nbsp;&nbsp;&nbsp;    { &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;      \"description\": \"Description [~param1] with [~param2].\" &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;      ... &nbsp;&nbsp;&nbsp;&nbsp;    { (required)
        :param bool show_param_identifier: By default, Parameters in Test Steps are displayed in ID number mode (like \"<strong>[~123]</strong>\"). Input <strong><em>showParamIdentifier=true</em></strong> to change to Identifier text mode. Result should be like \"<strong>[~myIdentifier]</strong>\".
        :return: TestCaseWithCustomFieldResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_multiple_test_cases_with_http_info(project_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_multiple_test_cases_with_http_info(project_id, body, **kwargs)  # noqa: E501
            return data

    def update_multiple_test_cases_with_http_info(self, project_id, body, **kwargs):  # noqa: E501
        """Updates multiple test cases  # noqa: E501

        To update multiple Test Cases  <strong>qTest Manager version:</strong> 6+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_multiple_test_cases_with_http_info(project_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param object body: Test Case properties for all the test cases, Test Steps along with custom field information(if any) to update the Test Case.  Support update test case with Parameters by inputting parameters identifier in teststep's <em>description</em> with sample like below. Parameters will be automatically added to current project.  &nbsp;&nbsp;&nbsp;&nbsp;    { &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;      \"description\": \"Description [~param1] with [~param2].\" &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;      ... &nbsp;&nbsp;&nbsp;&nbsp;    { (required)
        :param bool show_param_identifier: By default, Parameters in Test Steps are displayed in ID number mode (like \"<strong>[~123]</strong>\"). Input <strong><em>showParamIdentifier=true</em></strong> to change to Identifier text mode. Result should be like \"<strong>[~myIdentifier]</strong>\".
        :return: TestCaseWithCustomFieldResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'body', 'show_param_identifier']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_multiple_test_cases" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `update_multiple_test_cases`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `update_multiple_test_cases`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []
        if 'show_param_identifier' in params:
            query_params.append(('showParamIdentifier', params['show_param_identifier']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/test-cases/update/testcases', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TestCaseWithCustomFieldResource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_test_case(self, project_id, test_case_id, body, **kwargs):  # noqa: E501
        """Updates a Test Case  # noqa: E501

        To update a Test Case  <strong>qTest Manager version:</strong> 6+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_test_case(project_id, test_case_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int test_case_id: ID of the Test Case which needs to be updated. (required)
        :param TestCaseWithCustomFieldResource body: Test Case properties, Test Steps along with custom field information(if any) to update the Test Case.  Support update test case with Parameters by inputting parameters identifier in teststep's <em>description</em> with sample like below. Parameters will be automatically added to current project.  &nbsp;&nbsp;&nbsp;&nbsp;    { &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;      \"description\": \"Description [~param1] with [~param2].\" &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;      ... &nbsp;&nbsp;&nbsp;&nbsp;    { (required)
        :param bool show_param_identifier: By default, Parameters in Test Steps are displayed in ID number mode (like \"<strong>[~123]</strong>\"). Input <strong><em>showParamIdentifier=true</em></strong> to change to Identifier text mode. Result should be like \"<strong>[~myIdentifier]</strong>\".
        :return: TestCaseWithCustomFieldResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_test_case_with_http_info(project_id, test_case_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_test_case_with_http_info(project_id, test_case_id, body, **kwargs)  # noqa: E501
            return data

    def update_test_case_with_http_info(self, project_id, test_case_id, body, **kwargs):  # noqa: E501
        """Updates a Test Case  # noqa: E501

        To update a Test Case  <strong>qTest Manager version:</strong> 6+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_test_case_with_http_info(project_id, test_case_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int test_case_id: ID of the Test Case which needs to be updated. (required)
        :param TestCaseWithCustomFieldResource body: Test Case properties, Test Steps along with custom field information(if any) to update the Test Case.  Support update test case with Parameters by inputting parameters identifier in teststep's <em>description</em> with sample like below. Parameters will be automatically added to current project.  &nbsp;&nbsp;&nbsp;&nbsp;    { &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;      \"description\": \"Description [~param1] with [~param2].\" &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;      ... &nbsp;&nbsp;&nbsp;&nbsp;    { (required)
        :param bool show_param_identifier: By default, Parameters in Test Steps are displayed in ID number mode (like \"<strong>[~123]</strong>\"). Input <strong><em>showParamIdentifier=true</em></strong> to change to Identifier text mode. Result should be like \"<strong>[~myIdentifier]</strong>\".
        :return: TestCaseWithCustomFieldResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'test_case_id', 'body', 'show_param_identifier']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_test_case" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `update_test_case`")  # noqa: E501
        # verify the required parameter 'test_case_id' is set
        if self.api_client.client_side_validation and ('test_case_id' not in params or
                                                       params['test_case_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `test_case_id` when calling `update_test_case`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `update_test_case`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'test_case_id' in params:
            path_params['testCaseId'] = params['test_case_id']  # noqa: E501

        query_params = []
        if 'show_param_identifier' in params:
            query_params.append(('showParamIdentifier', params['show_param_identifier']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/test-cases/{testCaseId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TestCaseWithCustomFieldResource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_test_case_comment(self, project_id, id_or_key, comment_id, body, **kwargs):  # noqa: E501
        """Updates a Comment of a Test Case  # noqa: E501

        To modify a comment of a Test Case  <strong>qTest Manager version:</strong> 7.5+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_test_case_comment(project_id, id_or_key, comment_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param str id_or_key: PID or ID of the Test Case (required)
        :param int comment_id: ID of the comment. (required)
        :param CommentResource body: The comment's updated content (required)
        :return: CommentResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_test_case_comment_with_http_info(project_id, id_or_key, comment_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_test_case_comment_with_http_info(project_id, id_or_key, comment_id, body, **kwargs)  # noqa: E501
            return data

    def update_test_case_comment_with_http_info(self, project_id, id_or_key, comment_id, body, **kwargs):  # noqa: E501
        """Updates a Comment of a Test Case  # noqa: E501

        To modify a comment of a Test Case  <strong>qTest Manager version:</strong> 7.5+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_test_case_comment_with_http_info(project_id, id_or_key, comment_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param str id_or_key: PID or ID of the Test Case (required)
        :param int comment_id: ID of the comment. (required)
        :param CommentResource body: The comment's updated content (required)
        :return: CommentResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'id_or_key', 'comment_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_test_case_comment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `update_test_case_comment`")  # noqa: E501
        # verify the required parameter 'id_or_key' is set
        if self.api_client.client_side_validation and ('id_or_key' not in params or
                                                       params['id_or_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id_or_key` when calling `update_test_case_comment`")  # noqa: E501
        # verify the required parameter 'comment_id' is set
        if self.api_client.client_side_validation and ('comment_id' not in params or
                                                       params['comment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `comment_id` when calling `update_test_case_comment`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `update_test_case_comment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'id_or_key' in params:
            path_params['idOrKey'] = params['id_or_key']  # noqa: E501
        if 'comment_id' in params:
            path_params['commentId'] = params['comment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/test-cases/{idOrKey}/comments/{commentId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CommentResource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_test_step(self, project_id, test_case_id, step_id, body, **kwargs):  # noqa: E501
        """Update a Test Step  # noqa: E501

        To update a Test Step of a Test Case's latest version  <strong>qTest Manager version:</strong> 6+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_test_step(project_id, test_case_id, step_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int test_case_id: ID of the Test Case (required)
        :param int step_id: ID of the Test Step (required)
        :param TestStepResource body: Updated content of the Test Step for test case ID or PID   This Shows the updated CustomFields id, as well as you will get the updated stepId which will be ObjectId.  Support update test step with Parameters by inputting parameters identifier in teststep's <em>description</em> with sample like below. Parameters will be automatically added to current project.  &nbsp;&nbsp;&nbsp;&nbsp;    { &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;      \"description\": \"Description [~param1] with [~param2].\" &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;      ... &nbsp;&nbsp;&nbsp;&nbsp;    { (required)
        :param bool show_param_identifier: By default, Parameters in Test Steps are displayed in ID number mode (like \"<strong>[~123]</strong>\"). Input <strong><em>showParamIdentifier=true</em></strong> to change to Identifier text mode. Result should be like \"<strong>[~myIdentifier]</strong>\".
        :return: TestStepResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_test_step_with_http_info(project_id, test_case_id, step_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_test_step_with_http_info(project_id, test_case_id, step_id, body, **kwargs)  # noqa: E501
            return data

    def update_test_step_with_http_info(self, project_id, test_case_id, step_id, body, **kwargs):  # noqa: E501
        """Update a Test Step  # noqa: E501

        To update a Test Step of a Test Case's latest version  <strong>qTest Manager version:</strong> 6+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_test_step_with_http_info(project_id, test_case_id, step_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int test_case_id: ID of the Test Case (required)
        :param int step_id: ID of the Test Step (required)
        :param TestStepResource body: Updated content of the Test Step for test case ID or PID   This Shows the updated CustomFields id, as well as you will get the updated stepId which will be ObjectId.  Support update test step with Parameters by inputting parameters identifier in teststep's <em>description</em> with sample like below. Parameters will be automatically added to current project.  &nbsp;&nbsp;&nbsp;&nbsp;    { &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;      \"description\": \"Description [~param1] with [~param2].\" &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;      ... &nbsp;&nbsp;&nbsp;&nbsp;    { (required)
        :param bool show_param_identifier: By default, Parameters in Test Steps are displayed in ID number mode (like \"<strong>[~123]</strong>\"). Input <strong><em>showParamIdentifier=true</em></strong> to change to Identifier text mode. Result should be like \"<strong>[~myIdentifier]</strong>\".
        :return: TestStepResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'test_case_id', 'step_id', 'body', 'show_param_identifier']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_test_step" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `update_test_step`")  # noqa: E501
        # verify the required parameter 'test_case_id' is set
        if self.api_client.client_side_validation and ('test_case_id' not in params or
                                                       params['test_case_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `test_case_id` when calling `update_test_step`")  # noqa: E501
        # verify the required parameter 'step_id' is set
        if self.api_client.client_side_validation and ('step_id' not in params or
                                                       params['step_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `step_id` when calling `update_test_step`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `update_test_step`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'test_case_id' in params:
            path_params['testCaseId'] = params['test_case_id']  # noqa: E501
        if 'step_id' in params:
            path_params['stepId'] = params['step_id']  # noqa: E501

        query_params = []
        if 'show_param_identifier' in params:
            query_params.append(('showParamIdentifier', params['show_param_identifier']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/test-cases/{testCaseId}/test-steps/{stepId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TestStepResource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
