# coding: utf-8

"""
    qTest Manager API Version 11.0.0 - 2023.6

    qTest Manager API Version 11.0.0 - 2023.6  # noqa: E501

    OpenAPI spec version: 11.0.0 - 2023.6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class AttachmentApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_by_blob_handle_id(self, project_id, blob_handle_id, object_type, object_id, **kwargs):  # noqa: E501
        """Deletes an Attachment from an Object  # noqa: E501

        To delete an Attachment from a Release, Build, Requirement, Test Case, Test Log, Test Step, Test Step Log or Defect  <strong>qTest Manager version:</strong> 7.5+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_by_blob_handle_id(project_id, blob_handle_id, object_type, object_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int blob_handle_id: ID of the Attachment (required)
        :param str object_type: Valid values include releases, builds, requirements, test-cases, test-logs, test-steps, test-step-logs or defects  <strong>qTest Manager version:</strong> 4+ (required)
        :param int object_id: ID of the object (Release, Build, Requirement, Test Case, Test Log, Test Step, Test Step Log or Defect) (required)
        :return: Message
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_by_blob_handle_id_with_http_info(project_id, blob_handle_id, object_type, object_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_by_blob_handle_id_with_http_info(project_id, blob_handle_id, object_type, object_id, **kwargs)  # noqa: E501
            return data

    def delete_by_blob_handle_id_with_http_info(self, project_id, blob_handle_id, object_type, object_id, **kwargs):  # noqa: E501
        """Deletes an Attachment from an Object  # noqa: E501

        To delete an Attachment from a Release, Build, Requirement, Test Case, Test Log, Test Step, Test Step Log or Defect  <strong>qTest Manager version:</strong> 7.5+  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_by_blob_handle_id_with_http_info(project_id, blob_handle_id, object_type, object_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int blob_handle_id: ID of the Attachment (required)
        :param str object_type: Valid values include releases, builds, requirements, test-cases, test-logs, test-steps, test-step-logs or defects  <strong>qTest Manager version:</strong> 4+ (required)
        :param int object_id: ID of the object (Release, Build, Requirement, Test Case, Test Log, Test Step, Test Step Log or Defect) (required)
        :return: Message
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'blob_handle_id', 'object_type', 'object_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_by_blob_handle_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `delete_by_blob_handle_id`")  # noqa: E501
        # verify the required parameter 'blob_handle_id' is set
        if self.api_client.client_side_validation and ('blob_handle_id' not in params or
                                                       params['blob_handle_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `blob_handle_id` when calling `delete_by_blob_handle_id`")  # noqa: E501
        # verify the required parameter 'object_type' is set
        if self.api_client.client_side_validation and ('object_type' not in params or
                                                       params['object_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_type` when calling `delete_by_blob_handle_id`")  # noqa: E501
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `delete_by_blob_handle_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'blob_handle_id' in params:
            path_params['blobHandleId'] = params['blob_handle_id']  # noqa: E501
        if 'object_type' in params:
            path_params['objectType'] = params['object_type']  # noqa: E501
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/{objectType}/{objectId}/blob-handles/{blobHandleId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Message',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_attachment(self, project_id, attachment_id, object_type, object_id, **kwargs):  # noqa: E501
        """Gets an Attachment of an Object  # noqa: E501

        To retrieve an Attachment from a Release, Build, Requirement, Test Case, Test Log, Test Step, Test Step Log or Defect  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_attachment(project_id, attachment_id, object_type, object_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int attachment_id: ID of attachment (required)
        :param str object_type: Valid values include <em>release</em>, <em>build</em>, <em>requirements</em>, <em>test-cases</em>, <em>test-logs</em>, <em>test-steps</em>, <em>test-step-logs</em> or <em>defects</em> (required)
        :param int object_id: ID of the object (Release, Build, Requirement, Test Case, Test Log, Test Step Test Step Log or Defect) (required)
        :param str force_download: Input true to download attachments which have not been scanned for malware/virus successfully. By default, its value is false
        :return: OutputStream
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_attachment_with_http_info(project_id, attachment_id, object_type, object_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_attachment_with_http_info(project_id, attachment_id, object_type, object_id, **kwargs)  # noqa: E501
            return data

    def get_attachment_with_http_info(self, project_id, attachment_id, object_type, object_id, **kwargs):  # noqa: E501
        """Gets an Attachment of an Object  # noqa: E501

        To retrieve an Attachment from a Release, Build, Requirement, Test Case, Test Log, Test Step, Test Step Log or Defect  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_attachment_with_http_info(project_id, attachment_id, object_type, object_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param int attachment_id: ID of attachment (required)
        :param str object_type: Valid values include <em>release</em>, <em>build</em>, <em>requirements</em>, <em>test-cases</em>, <em>test-logs</em>, <em>test-steps</em>, <em>test-step-logs</em> or <em>defects</em> (required)
        :param int object_id: ID of the object (Release, Build, Requirement, Test Case, Test Log, Test Step Test Step Log or Defect) (required)
        :param str force_download: Input true to download attachments which have not been scanned for malware/virus successfully. By default, its value is false
        :return: OutputStream
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'attachment_id', 'object_type', 'object_id', 'force_download']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_attachment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `get_attachment`")  # noqa: E501
        # verify the required parameter 'attachment_id' is set
        if self.api_client.client_side_validation and ('attachment_id' not in params or
                                                       params['attachment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `attachment_id` when calling `get_attachment`")  # noqa: E501
        # verify the required parameter 'object_type' is set
        if self.api_client.client_side_validation and ('object_type' not in params or
                                                       params['object_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_type` when calling `get_attachment`")  # noqa: E501
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_attachment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'attachment_id' in params:
            path_params['attachmentId'] = params['attachment_id']  # noqa: E501
        if 'object_type' in params:
            path_params['objectType'] = params['object_type']  # noqa: E501
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501

        query_params = []
        if 'force_download' in params:
            query_params.append(('forceDownload', params['force_download']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/{objectType}/{objectId}/attachments/{attachmentId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OutputStream',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_attachments_of(self, project_id, object_type, object_id, **kwargs):  # noqa: E501
        """Gets all Attachments of an Object  # noqa: E501

        To retrieve all Attachments of a Release, Build, Requirement, Test Case, Test Log, Test Step, Test Step Log or Defect  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_attachments_of(project_id, object_type, object_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param str object_type: Valid values include <em>release</em>, <em>build</em>, <em>requirements</em>, <em>test-cases</em>, <em>test-logs</em>, <em>test-steps</em>, <em>test-step-logs</em> or <em>defects</em> (required)
        :param int object_id: ID of the object (Release, Build, Requirement, Test Case, Test Log, Test Step, Test Step Log or Defect) (required)
        :return: list[AttachmentResource]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_attachments_of_with_http_info(project_id, object_type, object_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_attachments_of_with_http_info(project_id, object_type, object_id, **kwargs)  # noqa: E501
            return data

    def get_attachments_of_with_http_info(self, project_id, object_type, object_id, **kwargs):  # noqa: E501
        """Gets all Attachments of an Object  # noqa: E501

        To retrieve all Attachments of a Release, Build, Requirement, Test Case, Test Log, Test Step, Test Step Log or Defect  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_attachments_of_with_http_info(project_id, object_type, object_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param str object_type: Valid values include <em>release</em>, <em>build</em>, <em>requirements</em>, <em>test-cases</em>, <em>test-logs</em>, <em>test-steps</em>, <em>test-step-logs</em> or <em>defects</em> (required)
        :param int object_id: ID of the object (Release, Build, Requirement, Test Case, Test Log, Test Step, Test Step Log or Defect) (required)
        :return: list[AttachmentResource]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'object_type', 'object_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_attachments_of" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `get_attachments_of`")  # noqa: E501
        # verify the required parameter 'object_type' is set
        if self.api_client.client_side_validation and ('object_type' not in params or
                                                       params['object_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_type` when calling `get_attachments_of`")  # noqa: E501
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `get_attachments_of`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'object_type' in params:
            path_params['objectType'] = params['object_type']  # noqa: E501
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/{objectType}/{objectId}/attachments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AttachmentResource]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search(self, project_id, type, **kwargs):  # noqa: E501
        """Searches for Attachments  # noqa: E501

        To query for attachments of <em>Releases</em>, <em>Builds</em>, <em>Requirements</em>, <em>Test Cases</em>, <em>Test Logs</em>, <em>Test Steps</em> or <em>Defects</em>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search(project_id, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param str type: Its valid values include <em>releases</em>, <em>builds</em>, <em>requirements</em>, <em>test-cases</em>, <em>test-steps</em>, <em>test-logs</em> or <em>defects</em> (required)
        :param list[int] ids: List of object IDs (of the same type as specified in the parameter above), separated by commas
        :param int author: ID of the user who created the attachment
        :param str created_date: Its format is: <strong>{operator} {createdDate in timestamp or UTC}</strong>  The <em>operator</em> can be one of the following values:  <b>lt</b>: less than the given date  <b>gt</b>: greater than given date  <b>eq</b>: equal to the given date  <b>le</b>: less than or equal to the given date  <b>ge</b>: greater then or equal to the given date
        :param int page_size: The result is paginated. By the default, the number of objects in each page is 100 if this is omitted. You can specify your custom number (up to 999) in this parameter
        :param int page: By default, the first page is returned but you can specify any page number to retrieve attachments
        :return: PagedResourceAttachmentResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_with_http_info(project_id, type, **kwargs)  # noqa: E501
        else:
            (data) = self.search_with_http_info(project_id, type, **kwargs)  # noqa: E501
            return data

    def search_with_http_info(self, project_id, type, **kwargs):  # noqa: E501
        """Searches for Attachments  # noqa: E501

        To query for attachments of <em>Releases</em>, <em>Builds</em>, <em>Requirements</em>, <em>Test Cases</em>, <em>Test Logs</em>, <em>Test Steps</em> or <em>Defects</em>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_with_http_info(project_id, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param str type: Its valid values include <em>releases</em>, <em>builds</em>, <em>requirements</em>, <em>test-cases</em>, <em>test-steps</em>, <em>test-logs</em> or <em>defects</em> (required)
        :param list[int] ids: List of object IDs (of the same type as specified in the parameter above), separated by commas
        :param int author: ID of the user who created the attachment
        :param str created_date: Its format is: <strong>{operator} {createdDate in timestamp or UTC}</strong>  The <em>operator</em> can be one of the following values:  <b>lt</b>: less than the given date  <b>gt</b>: greater than given date  <b>eq</b>: equal to the given date  <b>le</b>: less than or equal to the given date  <b>ge</b>: greater then or equal to the given date
        :param int page_size: The result is paginated. By the default, the number of objects in each page is 100 if this is omitted. You can specify your custom number (up to 999) in this parameter
        :param int page: By default, the first page is returned but you can specify any page number to retrieve attachments
        :return: PagedResourceAttachmentResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'type', 'ids', 'author', 'created_date', 'page_size', 'page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `search`")  # noqa: E501
        # verify the required parameter 'type' is set
        if self.api_client.client_side_validation and ('type' not in params or
                                                       params['type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `type` when calling `search`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'ids' in params:
            query_params.append(('ids', params['ids']))  # noqa: E501
            collection_formats['ids'] = 'multi'  # noqa: E501
        if 'author' in params:
            query_params.append(('author', params['author']))  # noqa: E501
        if 'created_date' in params:
            query_params.append(('createdDate', params['created_date']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('pageSize', params['page_size']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/attachments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedResourceAttachmentResource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upload(self, project_id, object_type, object_id, file_name, content_type, body, **kwargs):  # noqa: E501
        """Uploads an Attachment to an Object  # noqa: E501

        To upload an Attachment to a Release, Build, Requirement, Test Case, Test Log, Test Step, Test Step Log or Defect  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload(project_id, object_type, object_id, file_name, content_type, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param str object_type: Valid values include releases, builds, requirements, test-cases, test-logs, test-steps, test-step-logs or defects  <strong>qTest Manager version:</strong> 4+ (required)
        :param int object_id: ID of the object (Release, Build, Requirement, Test Case, Test Log, Test Step, Test Step Log or Defect) (required)
        :param str file_name: (required)
        :param str content_type: (required)
        :param str body: (required)
        :return: AttachmentResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.upload_with_http_info(project_id, object_type, object_id, file_name, content_type, body, **kwargs)  # noqa: E501
        else:
            (data) = self.upload_with_http_info(project_id, object_type, object_id, file_name, content_type, body, **kwargs)  # noqa: E501
            return data

    def upload_with_http_info(self, project_id, object_type, object_id, file_name, content_type, body, **kwargs):  # noqa: E501
        """Uploads an Attachment to an Object  # noqa: E501

        To upload an Attachment to a Release, Build, Requirement, Test Case, Test Log, Test Step, Test Step Log or Defect  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_with_http_info(project_id, object_type, object_id, file_name, content_type, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int project_id: ID of the project (required)
        :param str object_type: Valid values include releases, builds, requirements, test-cases, test-logs, test-steps, test-step-logs or defects  <strong>qTest Manager version:</strong> 4+ (required)
        :param int object_id: ID of the object (Release, Build, Requirement, Test Case, Test Log, Test Step, Test Step Log or Defect) (required)
        :param str file_name: (required)
        :param str content_type: (required)
        :param str body: (required)
        :return: AttachmentResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'object_type', 'object_id', 'file_name', 'content_type', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if self.api_client.client_side_validation and ('project_id' not in params or
                                                       params['project_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `project_id` when calling `upload`")  # noqa: E501
        # verify the required parameter 'object_type' is set
        if self.api_client.client_side_validation and ('object_type' not in params or
                                                       params['object_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_type` when calling `upload`")  # noqa: E501
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ('object_id' not in params or
                                                       params['object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `object_id` when calling `upload`")  # noqa: E501
        # verify the required parameter 'file_name' is set
        if self.api_client.client_side_validation and ('file_name' not in params or
                                                       params['file_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `file_name` when calling `upload`")  # noqa: E501
        # verify the required parameter 'content_type' is set
        if self.api_client.client_side_validation and ('content_type' not in params or
                                                       params['content_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `content_type` when calling `upload`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `upload`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501
        if 'object_type' in params:
            path_params['objectType'] = params['object_type']  # noqa: E501
        if 'object_id' in params:
            path_params['objectId'] = params['object_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'file_name' in params:
            header_params['File-Name'] = params['file_name']  # noqa: E501
        if 'content_type' in params:
            header_params['Content-Type'] = params['content_type']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/api/v3/projects/{projectId}/{objectType}/{objectId}/blob-handles', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AttachmentResource',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
