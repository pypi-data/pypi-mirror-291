Metadata-Version: 2.1
Name: short-circuit-torch
Version: 0.0.1
Summary: Paper - Pytorch
Home-page: https://github.com/kyegomez/ShortCircuit
License: MIT
Keywords: artificial intelligence,deep learning,optimizers,Prompt Engineering
Author: Kye Gomez
Author-email: kye@apac.ai
Requires-Python: >=3.10,<4.0
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.9
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Requires-Dist: einops
Requires-Dist: torch
Requires-Dist: zetascale
Project-URL: Documentation, https://github.com/kyegomez/ShortCircuit
Project-URL: Repository, https://github.com/kyegomez/ShortCircuit
Description-Content-Type: text/markdown

[![Multi-Modality](agorabanner.png)](https://discord.com/servers/agora-999382051935506503)


# ShortCircuit


## Install



## Example

```python
import torch 
from shortcircuit.main import ShortCircuitNet

# Create an instance of the ShortCircuitNet model with the specified parameters
model = ShortCircuitNet(512, 6, 8, 64, 2048, 0.1)

# Generate a random input tensor of shape (1, 512, 512)
input_tensor = torch.randn(1, 512, 512)

# Pass the input tensor through the model to get the output tensor
output_tensor = model(input_tensor)

# Print the output tensor
print(output_tensor)
```



# Missing
Input Sequence:
Node Hidden
Embeddings
Target Sequence:
Target Hidden
Embedding


# License
MIT

