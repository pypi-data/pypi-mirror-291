# coding: utf-8

"""
    DataCore API  - Sport

    For more details, see openapi/init.py

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the file manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional

from pydantic import BaseModel, Field, constr, validator


class ImagesPutBody(BaseModel):
    """
    ImagesPutBody
    """

    rating: Optional[constr(strict=True, max_length=100)] = Field(
        None,
        description="The rating given to the quality of the image.  All images are LOW by default but are set ad MEDIUM if they are large enough and have transparency.  Images are only marked as HIGH if they have been manually reviewed.  You should take your use-case into account when you go to use the image. >- `HIGH` High >- `LOW` Low >- `MEDIUM` Medium ",
    )
    __properties = ["rating"]

    @validator("rating")
    def rating_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ("LOW", "MEDIUM", "HIGH"):
            raise ValueError("must be one of enum values ('LOW', 'MEDIUM', 'HIGH')")
        return value

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ImagesPutBody:
        """Create an instance of ImagesPutBody from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ImagesPutBody:
        """Create an instance of ImagesPutBody from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ImagesPutBody.parse_obj(obj)

        _obj = ImagesPutBody.parse_obj({"rating": obj.get("rating")})
        return _obj
