# coding: utf-8

"""
    DataCore API  - Sport

    For more details, see openapi/init.py

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the file manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional

from pydantic import BaseModel, Field, StrictStr, constr


class SeasonExternalIdsPostBody(BaseModel):
    """
    SeasonExternalIdsPostBody
    """

    season_external_id: Optional[StrictStr] = Field(
        None, alias="seasonExternalId", description="The unique identifier of the external ids"
    )
    season_id: Optional[StrictStr] = Field(None, alias="seasonId", description="The unique identifier of the season")
    source: constr(strict=True, max_length=100) = Field(..., description="The source of the external Id")
    source_type: StrictStr = Field(..., alias="sourceType", description="Source type of external Id")
    source_external_id: constr(strict=True, max_length=100) = Field(
        ..., alias="sourceExternalId", description="Identifier of external source"
    )
    __properties = ["seasonExternalId", "seasonId", "source", "sourceType", "sourceExternalId"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SeasonExternalIdsPostBody:
        """Create an instance of SeasonExternalIdsPostBody from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SeasonExternalIdsPostBody:
        """Create an instance of SeasonExternalIdsPostBody from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SeasonExternalIdsPostBody.parse_obj(obj)

        _obj = SeasonExternalIdsPostBody.parse_obj(
            {
                "season_external_id": obj.get("seasonExternalId"),
                "season_id": obj.get("seasonId"),
                "source": obj.get("source"),
                "source_type": obj.get("sourceType"),
                "source_external_id": obj.get("sourceExternalId"),
            }
        )
        return _obj
