# coding: utf-8

"""
    DataCore API  - Sport

    For more details, see openapi/init.py

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the file manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional

from pydantic import BaseModel, Field, StrictStr, constr, validator

from atriumsports.datacore.openapi.models.uniform_items_post_body_colors import UniformItemsPostBodyColors


class UniformItemsPostBody(BaseModel):
    """
    UniformItemsPostBody
    """

    uniform_item_id: Optional[StrictStr] = Field(
        None, alias="uniformItemId", description="The unique identifier of the Uniform Item"
    )
    uniform_id: StrictStr = Field(..., alias="uniformId", description="The unique identifier of the uniform")
    item_type: constr(strict=True, max_length=100) = Field(
        ...,
        alias="itemType",
        description="The type of Uniform Item >- `BOTTOM` Bottom >- `GOALKEEPER_BOTTOM` Goal Keeper Bottom >- `GOALKEEPER_TOP` Goal Keeper Top >- `HELMET` Helmet >- `SOCKS` Socks >- `TOP` Top >- `WARMUP_BOTTOM` Warmup Bottom >- `WARMUP_TOP` Warmup Top ",
    )
    name_local: Optional[constr(strict=True, max_length=150)] = Field(
        None,
        alias="nameLocal",
        description="The name of the uniform_items in the [local](#section/Introduction/Character-Sets-and-Names) language",
    )
    name_latin: Optional[constr(strict=True, max_length=150)] = Field(
        None,
        alias="nameLatin",
        description="The name of the uniform_items in [latin](#section/Introduction/Character-Sets-and-Names) characters",
    )
    colors: Optional[UniformItemsPostBodyColors] = None
    __properties = ["uniformItemId", "uniformId", "itemType", "nameLocal", "nameLatin", "colors"]

    @validator("item_type")
    def item_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in (
            "TOP",
            "WARMUP_TOP",
            "WARMUP_BOTTOM",
            "BOTTOM",
            "GOALKEEPER_TOP",
            "GOALKEEPER_BOTTOM",
            "HELMET",
            "SOCKS",
        ):
            raise ValueError(
                "must be one of enum values ('TOP', 'WARMUP_TOP', 'WARMUP_BOTTOM', 'BOTTOM', 'GOALKEEPER_TOP', 'GOALKEEPER_BOTTOM', 'HELMET', 'SOCKS')"
            )
        return value

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UniformItemsPostBody:
        """Create an instance of UniformItemsPostBody from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of colors
        if self.colors:
            _dict["colors"] = self.colors.to_dict()
        # set to None if name_latin (nullable) is None
        # and __fields_set__ contains the field
        if self.name_latin is None and "name_latin" in self.__fields_set__:
            _dict["nameLatin"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UniformItemsPostBody:
        """Create an instance of UniformItemsPostBody from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UniformItemsPostBody.parse_obj(obj)

        _obj = UniformItemsPostBody.parse_obj(
            {
                "uniform_item_id": obj.get("uniformItemId"),
                "uniform_id": obj.get("uniformId"),
                "item_type": obj.get("itemType"),
                "name_local": obj.get("nameLocal"),
                "name_latin": obj.get("nameLatin"),
                "colors": UniformItemsPostBodyColors.from_dict(obj.get("colors"))
                if obj.get("colors") is not None
                else None,
            }
        )
        return _obj
