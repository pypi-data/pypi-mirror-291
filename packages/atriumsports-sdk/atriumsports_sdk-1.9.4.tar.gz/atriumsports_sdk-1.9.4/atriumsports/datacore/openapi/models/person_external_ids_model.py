# coding: utf-8

"""
    DataCore API  - Sport

    For more details, see openapi/init.py

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the file manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Optional

from pydantic import BaseModel, Field, StrictStr, constr

from atriumsports.datacore.openapi.models.fixture_persons_model_person import FixturePersonsModelPerson
from atriumsports.datacore.openapi.models.person_external_ids_model_organization import (
    PersonExternalIdsModelOrganization,
)


class PersonExternalIdsModel(BaseModel):
    """
    PersonExternalIdsModel
    """

    person_external_id: Optional[StrictStr] = Field(
        None, alias="personExternalId", description="The unique identifier of the external ids"
    )
    organization_id: Optional[StrictStr] = Field(
        None, alias="organizationId", description="The unique identifier of the organization"
    )
    organization: Optional[PersonExternalIdsModelOrganization] = None
    person_id: Optional[StrictStr] = Field(None, alias="personId", description="The unique identifier of the person")
    person: Optional[FixturePersonsModelPerson] = None
    source: Optional[constr(strict=True, max_length=100)] = Field(None, description="The source of the external Id")
    source_type: Optional[StrictStr] = Field(None, alias="sourceType", description="Source type of external Id")
    source_external_id: Optional[constr(strict=True, max_length=100)] = Field(
        None, alias="sourceExternalId", description="Identifier of external source"
    )
    updated: Optional[datetime] = Field(None, description="Date/time last modified. In UTC")
    added: Optional[datetime] = Field(None, description="Date/time added. In UTC")
    __properties = [
        "personExternalId",
        "organizationId",
        "organization",
        "personId",
        "person",
        "source",
        "sourceType",
        "sourceExternalId",
        "updated",
        "added",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PersonExternalIdsModel:
        """Create an instance of PersonExternalIdsModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(
            by_alias=True,
            exclude={
                "organization_id",
                "updated",
                "added",
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of organization
        if self.organization:
            _dict["organization"] = self.organization.to_dict()
        # override the default output from pydantic by calling `to_dict()` of person
        if self.person:
            _dict["person"] = self.person.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PersonExternalIdsModel:
        """Create an instance of PersonExternalIdsModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PersonExternalIdsModel.parse_obj(obj)

        _obj = PersonExternalIdsModel.parse_obj(
            {
                "person_external_id": obj.get("personExternalId"),
                "organization_id": obj.get("organizationId"),
                "organization": PersonExternalIdsModelOrganization.from_dict(obj.get("organization"))
                if obj.get("organization") is not None
                else None,
                "person_id": obj.get("personId"),
                "person": FixturePersonsModelPerson.from_dict(obj.get("person"))
                if obj.get("person") is not None
                else None,
                "source": obj.get("source"),
                "source_type": obj.get("sourceType"),
                "source_external_id": obj.get("sourceExternalId"),
                "updated": obj.get("updated"),
                "added": obj.get("added"),
            }
        )
        return _obj
