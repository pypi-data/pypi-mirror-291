# coding: utf-8

"""
    DataCore API  - Sport

    For more details, see openapi/init.py

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the file manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import date
from typing import Optional

from pydantic import BaseModel, Field, StrictStr, constr, validator


class UniformsPostBody(BaseModel):
    """
    UniformsPostBody
    """

    uniform_id: Optional[StrictStr] = Field(None, alias="uniformId", description="The unique identifier of the Uniform")
    base_type: constr(strict=True, max_length=100) = Field(
        ...,
        alias="baseType",
        description="The object that this uniform relates to >- `ENTITY` Entity >- `ENTITYGROUP` Entity Group >- `PERSON` Person ",
    )
    base_id: StrictStr = Field(
        ...,
        alias="baseId",
        description="The unique identifier of the object associated with this record. If the `baseType` is `ENTITY` then this would be the value of `entityId`.",
    )
    name_local: constr(strict=True, max_length=150) = Field(
        ...,
        alias="nameLocal",
        description="The name of the uniforms in the [local](#section/Introduction/Character-Sets-and-Names) language",
    )
    name_latin: Optional[constr(strict=True, max_length=150)] = Field(
        None,
        alias="nameLatin",
        description="The name of the uniforms in [latin](#section/Introduction/Character-Sets-and-Names) characters",
    )
    date_from: Optional[date] = Field(None, alias="dateFrom", description="Date the Uniform is valid from")
    date_to: Optional[date] = Field(None, alias="dateTo", description="Date the Uniform is valid until")
    external_id: Optional[constr(strict=True, max_length=150)] = Field(
        None, alias="externalId", description="The Id of the data as set by the provider of the data"
    )
    __properties = ["uniformId", "baseType", "baseId", "nameLocal", "nameLatin", "dateFrom", "dateTo", "externalId"]

    @validator("base_type")
    def base_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ("PERSON", "ENTITY", "ENTITYGROUP"):
            raise ValueError("must be one of enum values ('PERSON', 'ENTITY', 'ENTITYGROUP')")
        return value

    @validator("external_id")
    def external_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[0-9A-Za-z\/_-]+$", value):
            raise ValueError(r"must validate the regular expression /^[0-9A-Za-z\/_-]+$/")
        return value

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UniformsPostBody:
        """Create an instance of UniformsPostBody from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # set to None if name_latin (nullable) is None
        # and __fields_set__ contains the field
        if self.name_latin is None and "name_latin" in self.__fields_set__:
            _dict["nameLatin"] = None

        # set to None if date_from (nullable) is None
        # and __fields_set__ contains the field
        if self.date_from is None and "date_from" in self.__fields_set__:
            _dict["dateFrom"] = None

        # set to None if date_to (nullable) is None
        # and __fields_set__ contains the field
        if self.date_to is None and "date_to" in self.__fields_set__:
            _dict["dateTo"] = None

        # set to None if external_id (nullable) is None
        # and __fields_set__ contains the field
        if self.external_id is None and "external_id" in self.__fields_set__:
            _dict["externalId"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UniformsPostBody:
        """Create an instance of UniformsPostBody from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UniformsPostBody.parse_obj(obj)

        _obj = UniformsPostBody.parse_obj(
            {
                "uniform_id": obj.get("uniformId"),
                "base_type": obj.get("baseType"),
                "base_id": obj.get("baseId"),
                "name_local": obj.get("nameLocal"),
                "name_latin": obj.get("nameLatin"),
                "date_from": obj.get("dateFrom"),
                "date_to": obj.get("dateTo"),
                "external_id": obj.get("externalId"),
            }
        )
        return _obj
