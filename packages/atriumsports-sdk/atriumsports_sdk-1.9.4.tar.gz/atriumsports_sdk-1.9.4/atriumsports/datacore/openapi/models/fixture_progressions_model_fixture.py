# coding: utf-8

"""
    DataCore API  - Sport

    For more details, see openapi/init.py

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the file manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional

from pydantic import BaseModel, Field, StrictStr, validator


class FixtureProgressionsModelFixture(BaseModel):
    """
    The fixture  # noqa: E501
    """

    resource_type: Optional[StrictStr] = Field(None, alias="resourceType")
    id: Optional[StrictStr] = Field(None, description="Unique identifier for this resource")
    __properties = ["resourceType", "id"]

    @validator("resource_type")
    def resource_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ("fixtures"):
            raise ValueError("must be one of enum values ('fixtures')")
        return value

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> FixtureProgressionsModelFixture:
        """Create an instance of FixtureProgressionsModelFixture from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> FixtureProgressionsModelFixture:
        """Create an instance of FixtureProgressionsModelFixture from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return FixtureProgressionsModelFixture.parse_obj(obj)

        _obj = FixtureProgressionsModelFixture.parse_obj(
            {"resource_type": obj.get("resourceType"), "id": obj.get("id")}
        )
        return _obj
