# coding: utf-8

"""
    DataCore API  - Sport

    For more details, see openapi/init.py

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the file manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Any, Dict, Optional, Union

from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr, constr, validator

from atriumsports.datacore.openapi.models.fixture_entities_model_entity import FixtureEntitiesModelEntity
from atriumsports.datacore.openapi.models.fixture_pbp_event_model_organization import FixturePbpEventModelOrganization
from atriumsports.datacore.openapi.models.fixture_persons_model_person import FixturePersonsModelPerson
from atriumsports.datacore.openapi.models.fixture_progressions_model_fixture import FixtureProgressionsModelFixture


class FixturePbpEventModel(BaseModel):
    """
    FixturePbpEventModel
    """

    organization_id: Optional[StrictStr] = Field(
        None, alias="organizationId", description="The unique identifier of the organization"
    )
    organization: Optional[FixturePbpEventModelOrganization] = None
    fixture_id: Optional[StrictStr] = Field(None, alias="fixtureId", description="The unique identifier of the fixture")
    fixture: Optional[FixtureProgressionsModelFixture] = None
    period_id: Optional[StrictInt] = Field(None, alias="periodId", description="The identifier for the period")
    section: Optional[constr(strict=True, max_length=100)] = Field(
        None, description="The section of the period (sub-period)"
    )
    events: Optional[Any] = None
    var_class: Optional[constr(strict=True, max_length=100)] = Field(
        "sport",
        alias="class",
        description="The class of the event >- `clock` Information about the current status of the clock fixture >- `sport` A sporting action that relates to the running of the fixture ",
    )
    event_type: Optional[constr(strict=True, max_length=100)] = Field(
        None,
        alias="eventType",
        description="See [Event Types](http://developer.connect.sportradar.com/datacore/streaming.html#section/Message-Types/event) for more information",
    )
    event_id: Optional[StrictStr] = Field(None, alias="eventId", description="Unique identifier of this event")
    play_id: Optional[StrictStr] = Field(
        None, alias="playId", description="Unique identifier of this play (group of events)"
    )
    entity_id: Optional[StrictStr] = Field(None, alias="entityId", description="The unique identifier of the entity")
    entity: Optional[FixtureEntitiesModelEntity] = None
    person_id: Optional[StrictStr] = Field(None, alias="personId", description="The unique identifier of the person")
    person: Optional[FixturePersonsModelPerson] = None
    sub_type: Optional[constr(strict=True, max_length=100)] = Field(
        None,
        alias="subType",
        description="The Sub Type of event. See <b>Streaming API</b> documenation for more information.",
    )
    options: Optional[Any] = None
    success: Optional[StrictBool] = Field(None, description="Whether the action was successful")
    x: Optional[Union[StrictFloat, StrictInt]] = Field(
        None, description="The x co-ordinate of the event. Represented as percentage from left (0) to right (100)."
    )
    y: Optional[Union[StrictFloat, StrictInt]] = Field(
        None, description="The y co-ordinate of the event. Represented as precentage from top (0) to bottom (100)."
    )
    z: Optional[Union[StrictFloat, StrictInt]] = Field(
        None, description="The z co-ordinate of the event. Represented as precentage from ground (0) to ceiling (100)."
    )
    clock: Optional[StrictStr] = Field(
        None, description="The time on the clock when the event occurred. ISO 8601 format. PTmmMss.ccS"
    )
    shot_clock: Optional[StrictStr] = Field(
        None,
        alias="shotClock",
        description="The time on the shot clock when the event occurred. ISO 8601 format. PTss.ccS",
    )
    event_time: Optional[datetime] = Field(
        None,
        alias="eventTime",
        description="The date/time (UTC) this event occurred. For inserted actions, this should be the time the action would have occurred, not the time of insertion.",
    )
    official_id: Optional[StrictStr] = Field(
        None, alias="officialId", description="The unique ID of the official making this decision"
    )
    zone: Optional[constr(strict=True, max_length=50)] = Field(
        None, description="See [Event Types]() for more information"
    )
    scores: Optional[Dict[str, constr(strict=True, max_length=50)]] = Field(None, description="The current scores")
    timestamp: Optional[datetime] = Field(None, description="The date/time (UTC) this event was sent.")
    client_type: Optional[constr(strict=True, max_length=200)] = Field(
        None, alias="clientType", description="Type of the client that sent the event"
    )
    client_id: Optional[constr(strict=True, max_length=200)] = Field(
        None, alias="clientId", description="ID of the client that sent the event"
    )
    sport: Optional[constr(strict=True, max_length=1)] = Field(None, description="Sport one letter code")
    topic: Optional[constr(strict=True, max_length=200)] = Field(
        None, description="MQTT topic where the event was sent"
    )
    type: Optional[constr(strict=True, max_length=100)] = Field(None, description="Type of the event message")
    sequence: Optional[StrictInt] = Field(None, description="Client event sequence number")
    __properties = [
        "organizationId",
        "organization",
        "fixtureId",
        "fixture",
        "periodId",
        "section",
        "events",
        "class",
        "eventType",
        "eventId",
        "playId",
        "entityId",
        "entity",
        "personId",
        "person",
        "subType",
        "options",
        "success",
        "x",
        "y",
        "z",
        "clock",
        "shotClock",
        "eventTime",
        "officialId",
        "zone",
        "scores",
        "timestamp",
        "clientType",
        "clientId",
        "sport",
        "topic",
        "type",
        "sequence",
    ]

    @validator("var_class")
    def var_class_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ("sport", "clock"):
            raise ValueError("must be one of enum values ('sport', 'clock')")
        return value

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> FixturePbpEventModel:
        """Create an instance of FixturePbpEventModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(
            by_alias=True,
            exclude={
                "organization_id",
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of organization
        if self.organization:
            _dict["organization"] = self.organization.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fixture
        if self.fixture:
            _dict["fixture"] = self.fixture.to_dict()
        # override the default output from pydantic by calling `to_dict()` of entity
        if self.entity:
            _dict["entity"] = self.entity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of person
        if self.person:
            _dict["person"] = self.person.to_dict()
        # set to None if events (nullable) is None
        # and __fields_set__ contains the field
        if self.events is None and "events" in self.__fields_set__:
            _dict["events"] = None

        # set to None if options (nullable) is None
        # and __fields_set__ contains the field
        if self.options is None and "options" in self.__fields_set__:
            _dict["options"] = None

        # set to None if scores (nullable) is None
        # and __fields_set__ contains the field
        if self.scores is None and "scores" in self.__fields_set__:
            _dict["scores"] = None

        # set to None if sequence (nullable) is None
        # and __fields_set__ contains the field
        if self.sequence is None and "sequence" in self.__fields_set__:
            _dict["sequence"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> FixturePbpEventModel:
        """Create an instance of FixturePbpEventModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return FixturePbpEventModel.parse_obj(obj)

        _obj = FixturePbpEventModel.parse_obj(
            {
                "organization_id": obj.get("organizationId"),
                "organization": FixturePbpEventModelOrganization.from_dict(obj.get("organization"))
                if obj.get("organization") is not None
                else None,
                "fixture_id": obj.get("fixtureId"),
                "fixture": FixtureProgressionsModelFixture.from_dict(obj.get("fixture"))
                if obj.get("fixture") is not None
                else None,
                "period_id": obj.get("periodId"),
                "section": obj.get("section"),
                "events": obj.get("events"),
                "var_class": obj.get("class") if obj.get("class") is not None else "sport",
                "event_type": obj.get("eventType"),
                "event_id": obj.get("eventId"),
                "play_id": obj.get("playId"),
                "entity_id": obj.get("entityId"),
                "entity": FixtureEntitiesModelEntity.from_dict(obj.get("entity"))
                if obj.get("entity") is not None
                else None,
                "person_id": obj.get("personId"),
                "person": FixturePersonsModelPerson.from_dict(obj.get("person"))
                if obj.get("person") is not None
                else None,
                "sub_type": obj.get("subType"),
                "options": obj.get("options"),
                "success": obj.get("success"),
                "x": obj.get("x"),
                "y": obj.get("y"),
                "z": obj.get("z"),
                "clock": obj.get("clock"),
                "shot_clock": obj.get("shotClock"),
                "event_time": obj.get("eventTime"),
                "official_id": obj.get("officialId"),
                "zone": obj.get("zone"),
                "scores": obj.get("scores"),
                "timestamp": obj.get("timestamp"),
                "client_type": obj.get("clientType"),
                "client_id": obj.get("clientId"),
                "sport": obj.get("sport"),
                "topic": obj.get("topic"),
                "type": obj.get("type"),
                "sequence": obj.get("sequence"),
            }
        )
        return _obj
