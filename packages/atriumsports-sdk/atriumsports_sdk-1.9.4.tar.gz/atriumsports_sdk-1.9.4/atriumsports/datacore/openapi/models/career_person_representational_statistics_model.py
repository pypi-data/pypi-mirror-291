# coding: utf-8

"""
    DataCore API  - Sport

    For more details, see openapi/init.py

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the file manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, Dict, Optional

from pydantic import BaseModel, Field, StrictStr, constr, validator

from atriumsports.datacore.openapi.models.career_person_representational_statistics_model_organization import (
    CareerPersonRepresentationalStatisticsModelOrganization,
)
from atriumsports.datacore.openapi.models.fixture_persons_model_person import FixturePersonsModelPerson


class CareerPersonRepresentationalStatisticsModel(BaseModel):
    """
    CareerPersonRepresentationalStatisticsModel
    """

    person_id: Optional[StrictStr] = Field(None, alias="personId", description="The unique identifier of the person")
    person: Optional[FixturePersonsModelPerson] = None
    organization_id: Optional[StrictStr] = Field(
        None, alias="organizationId", description="The unique identifier of the organization"
    )
    organization: Optional[CareerPersonRepresentationalStatisticsModelOrganization] = None
    age_group: Optional[constr(strict=True, max_length=50)] = Field(
        None,
        alias="ageGroup",
        description="The age group of the season >- `JUNIOR` Junior >- `MASTERS` Masters >- `SENIOR` Senior >- `UNDER_15` Under 15 >- `UNDER_16` Under 16 >- `UNDER_17` Under 17 >- `UNDER_18` Under 18 >- `UNDER_19` Under 19 >- `UNDER_20` Under 20 >- `UNDER_21` Under 21 >- `UNDER_22` Under 22 >- `UNDER_23` Under 23 >- `YOUTH` Youth ",
    )
    discipline: Optional[StrictStr] = Field(
        None, description="fixture discipline >- None None >- `INDOOR` Indoor >- `OUTDOOR` Outdoor "
    )
    representing: Optional[constr(strict=True, max_length=100)] = Field(
        None, description="Who the person or entity was representing"
    )
    statistics: Optional[Dict[str, Any]] = None
    __properties = [
        "personId",
        "person",
        "organizationId",
        "organization",
        "ageGroup",
        "discipline",
        "representing",
        "statistics",
    ]

    @validator("age_group")
    def age_group_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in (
            "JUNIOR",
            "YOUTH",
            "UNDER_15",
            "UNDER_16",
            "UNDER_17",
            "UNDER_18",
            "UNDER_19",
            "UNDER_20",
            "UNDER_21",
            "UNDER_22",
            "UNDER_23",
            "SENIOR",
            "MASTERS",
        ):
            raise ValueError(
                "must be one of enum values ('JUNIOR', 'YOUTH', 'UNDER_15', 'UNDER_16', 'UNDER_17', 'UNDER_18', 'UNDER_19', 'UNDER_20', 'UNDER_21', 'UNDER_22', 'UNDER_23', 'SENIOR', 'MASTERS')"
            )
        return value

    @validator("discipline")
    def discipline_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ("INDOOR", "OUTDOOR", "null"):
            raise ValueError("must be one of enum values ('INDOOR', 'OUTDOOR', 'null')")
        return value

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CareerPersonRepresentationalStatisticsModel:
        """Create an instance of CareerPersonRepresentationalStatisticsModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(
            by_alias=True,
            exclude={
                "organization_id",
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of person
        if self.person:
            _dict["person"] = self.person.to_dict()
        # override the default output from pydantic by calling `to_dict()` of organization
        if self.organization:
            _dict["organization"] = self.organization.to_dict()
        # set to None if discipline (nullable) is None
        # and __fields_set__ contains the field
        if self.discipline is None and "discipline" in self.__fields_set__:
            _dict["discipline"] = None

        # set to None if representing (nullable) is None
        # and __fields_set__ contains the field
        if self.representing is None and "representing" in self.__fields_set__:
            _dict["representing"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CareerPersonRepresentationalStatisticsModel:
        """Create an instance of CareerPersonRepresentationalStatisticsModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CareerPersonRepresentationalStatisticsModel.parse_obj(obj)

        _obj = CareerPersonRepresentationalStatisticsModel.parse_obj(
            {
                "person_id": obj.get("personId"),
                "person": FixturePersonsModelPerson.from_dict(obj.get("person"))
                if obj.get("person") is not None
                else None,
                "organization_id": obj.get("organizationId"),
                "organization": CareerPersonRepresentationalStatisticsModelOrganization.from_dict(
                    obj.get("organization")
                )
                if obj.get("organization") is not None
                else None,
                "age_group": obj.get("ageGroup"),
                "discipline": obj.get("discipline"),
                "representing": obj.get("representing"),
                "statistics": obj.get("statistics"),
            }
        )
        return _obj
