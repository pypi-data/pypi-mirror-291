# coding: utf-8

"""
    DataCore API  - Sport

    For more details, see openapi/init.py

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the file manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import List, Optional

from pydantic import BaseModel, Field, StrictStr, conlist, constr, validator

from atriumsports.datacore.openapi.models.fixture_entities_model_uniform import FixtureEntitiesModelUniform
from atriumsports.datacore.openapi.models.images_model import ImagesModel
from atriumsports.datacore.openapi.models.uniform_items_model_organization import UniformItemsModelOrganization
from atriumsports.datacore.openapi.models.uniform_items_post_body_colors import UniformItemsPostBodyColors


class UniformItemsModel(BaseModel):
    """
    UniformItemsModel
    """

    uniform_item_id: Optional[StrictStr] = Field(
        None, alias="uniformItemId", description="The unique identifier of the Uniform Item"
    )
    uniform_id: Optional[StrictStr] = Field(None, alias="uniformId", description="The unique identifier of the uniform")
    uniform: Optional[FixtureEntitiesModelUniform] = None
    organization_id: Optional[StrictStr] = Field(
        None, alias="organizationId", description="The unique identifier of the organization"
    )
    organization: Optional[UniformItemsModelOrganization] = None
    item_type: Optional[constr(strict=True, max_length=100)] = Field(
        None,
        alias="itemType",
        description="The type of Uniform Item >- `BOTTOM` Bottom >- `GOALKEEPER_BOTTOM` Goal Keeper Bottom >- `GOALKEEPER_TOP` Goal Keeper Top >- `HELMET` Helmet >- `SOCKS` Socks >- `TOP` Top >- `WARMUP_BOTTOM` Warmup Bottom >- `WARMUP_TOP` Warmup Top ",
    )
    name_local: Optional[constr(strict=True, max_length=150)] = Field(
        None,
        alias="nameLocal",
        description="The name of the uniform_items in the [local](#section/Introduction/Character-Sets-and-Names) language",
    )
    name_latin: Optional[constr(strict=True, max_length=150)] = Field(
        None,
        alias="nameLatin",
        description="The name of the uniform_items in [latin](#section/Introduction/Character-Sets-and-Names) characters",
    )
    colors: Optional[UniformItemsPostBodyColors] = None
    updated: Optional[datetime] = Field(None, description="Date/time last modified. In UTC")
    added: Optional[datetime] = Field(None, description="Date/time added. In UTC")
    images: Optional[conlist(ImagesModel)] = None
    __properties = [
        "uniformItemId",
        "uniformId",
        "uniform",
        "organizationId",
        "organization",
        "itemType",
        "nameLocal",
        "nameLatin",
        "colors",
        "updated",
        "added",
        "images",
    ]

    @validator("item_type")
    def item_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in (
            "TOP",
            "WARMUP_TOP",
            "WARMUP_BOTTOM",
            "BOTTOM",
            "GOALKEEPER_TOP",
            "GOALKEEPER_BOTTOM",
            "HELMET",
            "SOCKS",
        ):
            raise ValueError(
                "must be one of enum values ('TOP', 'WARMUP_TOP', 'WARMUP_BOTTOM', 'BOTTOM', 'GOALKEEPER_TOP', 'GOALKEEPER_BOTTOM', 'HELMET', 'SOCKS')"
            )
        return value

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UniformItemsModel:
        """Create an instance of UniformItemsModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(
            by_alias=True,
            exclude={
                "organization_id",
                "updated",
                "added",
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of uniform
        if self.uniform:
            _dict["uniform"] = self.uniform.to_dict()
        # override the default output from pydantic by calling `to_dict()` of organization
        if self.organization:
            _dict["organization"] = self.organization.to_dict()
        # override the default output from pydantic by calling `to_dict()` of colors
        if self.colors:
            _dict["colors"] = self.colors.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in images (list)
        _items = []
        if self.images:
            for _item in self.images:
                if _item:
                    _items.append(_item.to_dict())
            _dict["images"] = _items
        # set to None if name_latin (nullable) is None
        # and __fields_set__ contains the field
        if self.name_latin is None and "name_latin" in self.__fields_set__:
            _dict["nameLatin"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UniformItemsModel:
        """Create an instance of UniformItemsModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UniformItemsModel.parse_obj(obj)

        _obj = UniformItemsModel.parse_obj(
            {
                "uniform_item_id": obj.get("uniformItemId"),
                "uniform_id": obj.get("uniformId"),
                "uniform": FixtureEntitiesModelUniform.from_dict(obj.get("uniform"))
                if obj.get("uniform") is not None
                else None,
                "organization_id": obj.get("organizationId"),
                "organization": UniformItemsModelOrganization.from_dict(obj.get("organization"))
                if obj.get("organization") is not None
                else None,
                "item_type": obj.get("itemType"),
                "name_local": obj.get("nameLocal"),
                "name_latin": obj.get("nameLatin"),
                "colors": UniformItemsPostBodyColors.from_dict(obj.get("colors"))
                if obj.get("colors") is not None
                else None,
                "updated": obj.get("updated"),
                "added": obj.get("added"),
                "images": [ImagesModel.from_dict(_item) for _item in obj.get("images")]
                if obj.get("images") is not None
                else None,
            }
        )
        return _obj
