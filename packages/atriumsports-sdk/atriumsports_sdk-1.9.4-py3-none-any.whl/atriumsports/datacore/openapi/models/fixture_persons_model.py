# coding: utf-8

"""
    DataCore API  - Sport

    For more details, see openapi/init.py

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the file manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Optional

from pydantic import BaseModel, Field, StrictBool, StrictStr, conint, constr, validator

from atriumsports.datacore.openapi.models.entities_model_entity_group import EntitiesModelEntityGroup
from atriumsports.datacore.openapi.models.fixture_entities_model_uniform import FixtureEntitiesModelUniform
from atriumsports.datacore.openapi.models.fixture_persons_model_organization import FixturePersonsModelOrganization
from atriumsports.datacore.openapi.models.fixture_persons_model_person import FixturePersonsModelPerson
from atriumsports.datacore.openapi.models.fixture_progressions_model_fixture import FixtureProgressionsModelFixture


class FixturePersonsModel(BaseModel):
    """
    FixturePersonsModel
    """

    fixture_id: Optional[StrictStr] = Field(None, alias="fixtureId", description="The unique identifier of the fixture")
    fixture: Optional[FixtureProgressionsModelFixture] = None
    person_id: Optional[StrictStr] = Field(None, alias="personId", description="The unique identifier of the person")
    person: Optional[FixturePersonsModelPerson] = None
    organization_id: Optional[StrictStr] = Field(
        None, alias="organizationId", description="The unique identifier of the organization"
    )
    organization: Optional[FixturePersonsModelOrganization] = None
    entity_group_id: Optional[StrictStr] = Field(
        None, alias="entityGroupId", description="The entity group that this entity belongs to"
    )
    entity_group: Optional[EntitiesModelEntityGroup] = Field(None, alias="entityGroup")
    is_home: Optional[StrictBool] = Field(None, alias="isHome", description="Is competitor the home person ?")
    draw: Optional[StrictBool] = Field(None, description="Result for this competitor was a draw ?")
    result_status: Optional[constr(strict=True, max_length=100)] = Field(
        None,
        alias="resultStatus",
        description="Result status >- `CONFIRMED` Confirmed >- `DID_NOT_FINISH` Did Not Finish >- `DID_NOT_START` Did Not Start >- `DISQUALIFIED` Disqualified >- `FORFEITED` Forfeited >- `IN_PROGRESS` In Progress >- `SCHEDULED` Scheduled >- `WITHDRAWN` Withdrawn >- `WON_BY_FORFEIT` Won By Forfeit ",
    )
    result_place: Optional[conint(strict=True)] = Field(
        None, alias="resultPlace", description="Result placing (1=Won, 2=Lost)"
    )
    result_secondary_score_place: Optional[conint(strict=True)] = Field(
        None, alias="resultSecondaryScorePlace", description="Result placing (1=Won, 2=Lost) of the Shoot Out"
    )
    starting_number: Optional[conint(strict=True)] = Field(None, alias="startingNumber", description="Starting number")
    score: Optional[constr(strict=True, max_length=100)] = Field(None, description="Score for competitor in fixture")
    secondary_score: Optional[constr(strict=True, max_length=100)] = Field(
        None, alias="secondaryScore", description="Secondary score"
    )
    is_neutral_venue: Optional[StrictBool] = Field(
        None, alias="isNeutralVenue", description="Competitor is playing at a neutral venue ?"
    )
    include_in_representation: Optional[StrictBool] = Field(
        True, alias="includeInRepresentation", description="Include this fixture in represented statistics?"
    )
    uniform_id: Optional[StrictStr] = Field(None, alias="uniformId", description="The unique identifier of the uniform")
    uniform: Optional[FixtureEntitiesModelUniform] = None
    external_id: Optional[constr(strict=True, max_length=150)] = Field(
        None, alias="externalId", description="The Id of the data as set by the provider of the data"
    )
    updated: Optional[datetime] = Field(None, description="Date/time last modified. In UTC")
    added: Optional[datetime] = Field(None, description="Date/time added. In UTC")
    __properties = [
        "fixtureId",
        "fixture",
        "personId",
        "person",
        "organizationId",
        "organization",
        "entityGroupId",
        "entityGroup",
        "isHome",
        "draw",
        "resultStatus",
        "resultPlace",
        "resultSecondaryScorePlace",
        "startingNumber",
        "score",
        "secondaryScore",
        "isNeutralVenue",
        "includeInRepresentation",
        "uniformId",
        "uniform",
        "externalId",
        "updated",
        "added",
    ]

    @validator("result_status")
    def result_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in (
            "SCHEDULED",
            "IN_PROGRESS",
            "CONFIRMED",
            "DISQUALIFIED",
            "FORFEITED",
            "WON_BY_FORFEIT",
            "DID_NOT_FINISH",
            "WITHDRAWN",
            "DID_NOT_START",
        ):
            raise ValueError(
                "must be one of enum values ('SCHEDULED', 'IN_PROGRESS', 'CONFIRMED', 'DISQUALIFIED', 'FORFEITED', 'WON_BY_FORFEIT', 'DID_NOT_FINISH', 'WITHDRAWN', 'DID_NOT_START')"
            )
        return value

    @validator("external_id")
    def external_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[0-9A-Za-z\/_-]+$", value):
            raise ValueError(r"must validate the regular expression /^[0-9A-Za-z\/_-]+$/")
        return value

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> FixturePersonsModel:
        """Create an instance of FixturePersonsModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(
            by_alias=True,
            exclude={
                "organization_id",
                "updated",
                "added",
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of fixture
        if self.fixture:
            _dict["fixture"] = self.fixture.to_dict()
        # override the default output from pydantic by calling `to_dict()` of person
        if self.person:
            _dict["person"] = self.person.to_dict()
        # override the default output from pydantic by calling `to_dict()` of organization
        if self.organization:
            _dict["organization"] = self.organization.to_dict()
        # override the default output from pydantic by calling `to_dict()` of entity_group
        if self.entity_group:
            _dict["entityGroup"] = self.entity_group.to_dict()
        # override the default output from pydantic by calling `to_dict()` of uniform
        if self.uniform:
            _dict["uniform"] = self.uniform.to_dict()
        # set to None if entity_group_id (nullable) is None
        # and __fields_set__ contains the field
        if self.entity_group_id is None and "entity_group_id" in self.__fields_set__:
            _dict["entityGroupId"] = None

        # set to None if result_place (nullable) is None
        # and __fields_set__ contains the field
        if self.result_place is None and "result_place" in self.__fields_set__:
            _dict["resultPlace"] = None

        # set to None if result_secondary_score_place (nullable) is None
        # and __fields_set__ contains the field
        if self.result_secondary_score_place is None and "result_secondary_score_place" in self.__fields_set__:
            _dict["resultSecondaryScorePlace"] = None

        # set to None if starting_number (nullable) is None
        # and __fields_set__ contains the field
        if self.starting_number is None and "starting_number" in self.__fields_set__:
            _dict["startingNumber"] = None

        # set to None if score (nullable) is None
        # and __fields_set__ contains the field
        if self.score is None and "score" in self.__fields_set__:
            _dict["score"] = None

        # set to None if secondary_score (nullable) is None
        # and __fields_set__ contains the field
        if self.secondary_score is None and "secondary_score" in self.__fields_set__:
            _dict["secondaryScore"] = None

        # set to None if uniform_id (nullable) is None
        # and __fields_set__ contains the field
        if self.uniform_id is None and "uniform_id" in self.__fields_set__:
            _dict["uniformId"] = None

        # set to None if external_id (nullable) is None
        # and __fields_set__ contains the field
        if self.external_id is None and "external_id" in self.__fields_set__:
            _dict["externalId"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> FixturePersonsModel:
        """Create an instance of FixturePersonsModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return FixturePersonsModel.parse_obj(obj)

        _obj = FixturePersonsModel.parse_obj(
            {
                "fixture_id": obj.get("fixtureId"),
                "fixture": FixtureProgressionsModelFixture.from_dict(obj.get("fixture"))
                if obj.get("fixture") is not None
                else None,
                "person_id": obj.get("personId"),
                "person": FixturePersonsModelPerson.from_dict(obj.get("person"))
                if obj.get("person") is not None
                else None,
                "organization_id": obj.get("organizationId"),
                "organization": FixturePersonsModelOrganization.from_dict(obj.get("organization"))
                if obj.get("organization") is not None
                else None,
                "entity_group_id": obj.get("entityGroupId"),
                "entity_group": EntitiesModelEntityGroup.from_dict(obj.get("entityGroup"))
                if obj.get("entityGroup") is not None
                else None,
                "is_home": obj.get("isHome"),
                "draw": obj.get("draw"),
                "result_status": obj.get("resultStatus"),
                "result_place": obj.get("resultPlace"),
                "result_secondary_score_place": obj.get("resultSecondaryScorePlace"),
                "starting_number": obj.get("startingNumber"),
                "score": obj.get("score"),
                "secondary_score": obj.get("secondaryScore"),
                "is_neutral_venue": obj.get("isNeutralVenue"),
                "include_in_representation": obj.get("includeInRepresentation")
                if obj.get("includeInRepresentation") is not None
                else True,
                "uniform_id": obj.get("uniformId"),
                "uniform": FixtureEntitiesModelUniform.from_dict(obj.get("uniform"))
                if obj.get("uniform") is not None
                else None,
                "external_id": obj.get("externalId"),
                "updated": obj.get("updated"),
                "added": obj.get("added"),
            }
        )
        return _obj
