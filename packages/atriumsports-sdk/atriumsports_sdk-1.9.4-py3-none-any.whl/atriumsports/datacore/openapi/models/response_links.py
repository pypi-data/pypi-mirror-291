# coding: utf-8

"""
    DataCore API  - Sport

    For more details, see openapi/init.py

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the file manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional

from pydantic import BaseModel, Field, StrictStr


class ResponseLinks(BaseModel):
    """
    ResponseLinks
    """

    var_self: Optional[StrictStr] = Field(None, alias="self", description="The URI referencing this request.")
    next: Optional[StrictStr] = Field(
        None, description="The URI referencing the 'next' page, if more data is available."
    )
    previous: Optional[StrictStr] = Field(
        None, description="The URI referencing the 'previous' page, if the request is not on the first page."
    )
    __properties = ["self", "next", "previous"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ResponseLinks:
        """Create an instance of ResponseLinks from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ResponseLinks:
        """Create an instance of ResponseLinks from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ResponseLinks.parse_obj(obj)

        _obj = ResponseLinks.parse_obj(
            {"var_self": obj.get("self"), "next": obj.get("next"), "previous": obj.get("previous")}
        )
        return _obj
