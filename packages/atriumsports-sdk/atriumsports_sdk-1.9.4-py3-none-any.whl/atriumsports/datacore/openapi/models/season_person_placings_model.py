# coding: utf-8

"""
    DataCore API  - Sport

    For more details, see openapi/init.py

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the file manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Optional

from pydantic import BaseModel, Field, StrictInt, StrictStr

from atriumsports.datacore.openapi.models.fixture_persons_model_person import FixturePersonsModelPerson
from atriumsports.datacore.openapi.models.fixture_progressions_model_season import FixtureProgressionsModelSeason
from atriumsports.datacore.openapi.models.season_person_placings_model_organization import (
    SeasonPersonPlacingsModelOrganization,
)


class SeasonPersonPlacingsModel(BaseModel):
    """
    SeasonPersonPlacingsModel
    """

    placing_id: Optional[StrictStr] = Field(
        None, alias="placingId", description="The unique identifier of the SEASON PERSON placing"
    )
    organization_id: Optional[StrictStr] = Field(
        None, alias="organizationId", description="The unique identifier of the organization"
    )
    organization: Optional[SeasonPersonPlacingsModelOrganization] = None
    season_id: Optional[StrictStr] = Field(None, alias="seasonId", description="The unique identifier of the season")
    season: Optional[FixtureProgressionsModelSeason] = None
    person_id: Optional[StrictStr] = Field(None, alias="personId", description="The unique identifier of the person")
    person: Optional[FixturePersonsModelPerson] = None
    result_place: Optional[StrictInt] = Field(None, alias="resultPlace", description="Result place")
    points: Optional[StrictInt] = Field(None, description="Points awarded")
    prize_money: Optional[StrictInt] = Field(None, alias="prizeMoney", description="Prize money awarded")
    updated: Optional[datetime] = Field(None, description="Date/time last modified. In UTC")
    added: Optional[datetime] = Field(None, description="Date/time added. In UTC")
    __properties = [
        "placingId",
        "organizationId",
        "organization",
        "seasonId",
        "season",
        "personId",
        "person",
        "resultPlace",
        "points",
        "prizeMoney",
        "updated",
        "added",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SeasonPersonPlacingsModel:
        """Create an instance of SeasonPersonPlacingsModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(
            by_alias=True,
            exclude={
                "organization_id",
                "updated",
                "added",
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of organization
        if self.organization:
            _dict["organization"] = self.organization.to_dict()
        # override the default output from pydantic by calling `to_dict()` of season
        if self.season:
            _dict["season"] = self.season.to_dict()
        # override the default output from pydantic by calling `to_dict()` of person
        if self.person:
            _dict["person"] = self.person.to_dict()
        # set to None if points (nullable) is None
        # and __fields_set__ contains the field
        if self.points is None and "points" in self.__fields_set__:
            _dict["points"] = None

        # set to None if prize_money (nullable) is None
        # and __fields_set__ contains the field
        if self.prize_money is None and "prize_money" in self.__fields_set__:
            _dict["prizeMoney"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SeasonPersonPlacingsModel:
        """Create an instance of SeasonPersonPlacingsModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SeasonPersonPlacingsModel.parse_obj(obj)

        _obj = SeasonPersonPlacingsModel.parse_obj(
            {
                "placing_id": obj.get("placingId"),
                "organization_id": obj.get("organizationId"),
                "organization": SeasonPersonPlacingsModelOrganization.from_dict(obj.get("organization"))
                if obj.get("organization") is not None
                else None,
                "season_id": obj.get("seasonId"),
                "season": FixtureProgressionsModelSeason.from_dict(obj.get("season"))
                if obj.get("season") is not None
                else None,
                "person_id": obj.get("personId"),
                "person": FixturePersonsModelPerson.from_dict(obj.get("person"))
                if obj.get("person") is not None
                else None,
                "result_place": obj.get("resultPlace"),
                "points": obj.get("points"),
                "prize_money": obj.get("prizeMoney"),
                "updated": obj.get("updated"),
                "added": obj.get("added"),
            }
        )
        return _obj
