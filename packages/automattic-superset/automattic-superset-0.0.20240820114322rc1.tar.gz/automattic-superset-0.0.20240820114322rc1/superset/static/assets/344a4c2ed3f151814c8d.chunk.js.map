{"version":3,"file":"344a4c2ed3f151814c8d.chunk.js","mappings":"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","sources":["webpack://superset/./src/components/Badge/index.tsx","webpack://superset/./src/components/DatabaseSelector/index.tsx","webpack://superset/./src/components/RefreshLabel/index.tsx","webpack://superset/./src/components/TableSelector/index.tsx","webpack://superset/./src/hooks/apiResources/charts.ts","webpack://superset/./src/hooks/apiResources/dashboards.ts","webpack://superset/./src/hooks/apiResources/queryValidations.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { styled } from '@superset-ui/core';\nimport { Badge as AntdBadge } from 'antd';\nimport { BadgeProps as AntdBadgeProps } from 'antd/lib/badge';\n\nexport interface BadgeProps extends AntdBadgeProps {\n  textColor?: string;\n}\n\nconst Badge = styled(\n  (\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    { textColor, color, text, ...props }: BadgeProps,\n  ) => <AntdBadge text={text} color={text ? color : undefined} {...props} />,\n)`\n  & > sup {\n    padding: 0 ${({ theme }) => theme.gridUnit * 2}px;\n    background: ${({ theme, color }) => color || theme.colors.primary.base};\n    color: ${({ theme, textColor }) =>\n      textColor || theme.colors.grayscale.light5};\n  }\n`;\n\nexport default Badge;\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, {\n  ReactNode,\n  useState,\n  useMemo,\n  useEffect,\n  useRef,\n  useCallback,\n} from 'react';\nimport { styled, SupersetClient, t } from '@superset-ui/core';\nimport type { LabeledValue as AntdLabeledValue } from 'antd/lib/select';\nimport rison from 'rison';\nimport { AsyncSelect, Select } from 'src/components';\nimport Label from 'src/components/Label';\nimport { FormLabel } from 'src/components/Form';\nimport RefreshLabel from 'src/components/RefreshLabel';\nimport { useToasts } from 'src/components/MessageToasts/withToasts';\nimport { useSchemas, SchemaOption } from 'src/hooks/apiResources';\n\nconst DatabaseSelectorWrapper = styled.div`\n  ${({ theme }) => `\n    .refresh {\n      display: flex;\n      align-items: center;\n      width: 30px;\n      margin-left: ${theme.gridUnit}px;\n      margin-top: ${theme.gridUnit * 5}px;\n    }\n\n    .section {\n      display: flex;\n      flex-direction: row;\n      align-items: center;\n    }\n\n    .select {\n      width: calc(100% - 30px - ${theme.gridUnit}px);\n      flex: 1;\n    }\n\n    & > div {\n      margin-bottom: ${theme.gridUnit * 4}px;\n    }\n  `}\n`;\n\nconst LabelStyle = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  margin-left: ${({ theme }) => theme.gridUnit - 2}px;\n\n  .backend {\n    overflow: visible;\n  }\n\n  .name {\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n`;\n\ntype DatabaseValue = {\n  label: React.ReactNode;\n  value: number;\n  id: number;\n  database_name: string;\n  backend?: string;\n};\n\nexport type DatabaseObject = {\n  id: number;\n  database_name: string;\n  backend?: string;\n};\n\nexport interface DatabaseSelectorProps {\n  db?: DatabaseObject | null;\n  emptyState?: ReactNode;\n  formMode?: boolean;\n  getDbList?: (arg0: any) => void;\n  handleError: (msg: string) => void;\n  isDatabaseSelectEnabled?: boolean;\n  onDbChange?: (db: DatabaseObject) => void;\n  onEmptyResults?: (searchText?: string) => void;\n  onSchemaChange?: (schema?: string) => void;\n  readOnly?: boolean;\n  schema?: string;\n  sqlLabMode?: boolean;\n}\n\nconst SelectLabel = ({\n  backend,\n  databaseName,\n}: {\n  backend?: string;\n  databaseName: string;\n}) => (\n  <LabelStyle>\n    <Label className=\"backend\">{backend || ''}</Label>\n    <span className=\"name\" title={databaseName}>\n      {databaseName}\n    </span>\n  </LabelStyle>\n);\n\nconst EMPTY_SCHEMA_OPTIONS: SchemaOption[] = [];\n\ninterface AntdLabeledValueWithOrder extends AntdLabeledValue {\n  order: number;\n}\n\nexport default function DatabaseSelector({\n  db,\n  formMode = false,\n  emptyState,\n  getDbList,\n  handleError,\n  isDatabaseSelectEnabled = true,\n  onDbChange,\n  onEmptyResults,\n  onSchemaChange,\n  readOnly = false,\n  schema,\n  sqlLabMode = false,\n}: DatabaseSelectorProps) {\n  const [currentDb, setCurrentDb] = useState<DatabaseValue | undefined>();\n  const [currentSchema, setCurrentSchema] = useState<SchemaOption | undefined>(\n    schema ? { label: schema, value: schema, title: schema } : undefined,\n  );\n  const schemaRef = useRef(schema);\n  schemaRef.current = schema;\n  const { addSuccessToast } = useToasts();\n  const sortComparator = useCallback(\n    (itemA: AntdLabeledValueWithOrder, itemB: AntdLabeledValueWithOrder) =>\n      itemA.order - itemB.order,\n    [],\n  );\n\n  const loadDatabases = useMemo(\n    () =>\n      async (\n        search: string,\n        page: number,\n        pageSize: number,\n      ): Promise<{\n        data: DatabaseValue[];\n        totalCount: number;\n      }> => {\n        const queryParams = rison.encode({\n          order_column: 'database_name',\n          order_direction: 'asc',\n          page,\n          page_size: pageSize,\n          ...(formMode || !sqlLabMode\n            ? { filters: [{ col: 'database_name', opr: 'ct', value: search }] }\n            : {\n                filters: [\n                  { col: 'database_name', opr: 'ct', value: search },\n                  {\n                    col: 'expose_in_sqllab',\n                    opr: 'eq',\n                    value: true,\n                  },\n                ],\n              }),\n        });\n        const endpoint = `/api/v1/database/?q=${queryParams}`;\n        return SupersetClient.get({ endpoint }).then(({ json }) => {\n          const { result, count } = json;\n          if (getDbList) {\n            getDbList(result);\n          }\n          if (result.length === 0) {\n            if (onEmptyResults) onEmptyResults(search);\n          }\n\n          const options = result.map((row: DatabaseObject, order: number) => ({\n            label: (\n              <SelectLabel\n                backend={row.backend}\n                databaseName={row.database_name}\n              />\n            ),\n            value: row.id,\n            id: row.id,\n            database_name: row.database_name,\n            backend: row.backend,\n            order,\n          }));\n\n          return {\n            data: options,\n            totalCount: count ?? options.length,\n          };\n        });\n      },\n    [formMode, getDbList, sqlLabMode],\n  );\n\n  useEffect(() => {\n    setCurrentDb(current =>\n      current?.id !== db?.id\n        ? db\n          ? {\n              label: (\n                <SelectLabel\n                  backend={db.backend}\n                  databaseName={db.database_name}\n                />\n              ),\n              value: db.id,\n              ...db,\n            }\n          : undefined\n        : current,\n    );\n  }, [db]);\n\n  function changeSchema(schema: SchemaOption | undefined) {\n    setCurrentSchema(schema);\n    if (onSchemaChange && schema?.value !== schemaRef.current) {\n      onSchemaChange(schema?.value);\n    }\n  }\n\n  const {\n    data,\n    isFetching: loadingSchemas,\n    refetch,\n  } = useSchemas({\n    dbId: currentDb?.value,\n    onSuccess: (schemas, isFetched) => {\n      if (schemas.length === 1) {\n        changeSchema(schemas[0]);\n      } else if (\n        !schemas.find(schemaOption => schemaRef.current === schemaOption.value)\n      ) {\n        changeSchema(undefined);\n      }\n\n      if (isFetched) {\n        addSuccessToast('List refreshed');\n      }\n    },\n    onError: () => handleError(t('There was an error loading the schemas')),\n  });\n\n  const schemaOptions = data || EMPTY_SCHEMA_OPTIONS;\n\n  function changeDataBase(\n    value: { label: string; value: number },\n    database: DatabaseValue,\n  ) {\n    setCurrentDb(database);\n    setCurrentSchema(undefined);\n    if (onDbChange) {\n      onDbChange(database);\n    }\n    if (onSchemaChange) {\n      onSchemaChange(undefined);\n    }\n  }\n\n  function renderSelectRow(select: ReactNode, refreshBtn: ReactNode) {\n    return (\n      <div className=\"section\">\n        <span className=\"select\">{select}</span>\n        <span className=\"refresh\">{refreshBtn}</span>\n      </div>\n    );\n  }\n\n  function renderDatabaseSelect() {\n    return renderSelectRow(\n      <AsyncSelect\n        ariaLabel={t('Select database or type to search databases')}\n        optionFilterProps={['database_name', 'value']}\n        data-test=\"select-database\"\n        header={<FormLabel>{t('Database')}</FormLabel>}\n        lazyLoading={false}\n        notFoundContent={emptyState}\n        onChange={changeDataBase}\n        value={currentDb}\n        placeholder={t('Select database or type to search databases')}\n        disabled={!isDatabaseSelectEnabled || readOnly}\n        options={loadDatabases}\n        sortComparator={sortComparator}\n      />,\n      null,\n    );\n  }\n\n  function renderSchemaSelect() {\n    const refreshIcon = !readOnly && (\n      <RefreshLabel\n        onClick={() => refetch()}\n        tooltipContent={t('Force refresh schema list')}\n      />\n    );\n    return renderSelectRow(\n      <Select\n        ariaLabel={t('Select schema or type to search schemas')}\n        disabled={!currentDb || readOnly}\n        header={<FormLabel>{t('Schema')}</FormLabel>}\n        labelInValue\n        loading={loadingSchemas}\n        name=\"select-schema\"\n        notFoundContent={t('No compatible schema found')}\n        placeholder={t('Select schema or type to search schemas')}\n        onChange={item => changeSchema(item as SchemaOption)}\n        options={schemaOptions}\n        showSearch\n        value={currentSchema}\n      />,\n      refreshIcon,\n    );\n  }\n\n  return (\n    <DatabaseSelectorWrapper data-test=\"DatabaseSelector\">\n      {renderDatabaseSelect()}\n      {renderSchemaSelect()}\n    </DatabaseSelectorWrapper>\n  );\n}\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { MouseEventHandler, forwardRef } from 'react';\nimport { SupersetTheme } from '@superset-ui/core';\nimport { Tooltip } from 'src/components/Tooltip';\nimport Icons, { IconType } from 'src/components/Icons';\n\nexport interface RefreshLabelProps {\n  onClick: MouseEventHandler<HTMLSpanElement>;\n  tooltipContent: string;\n}\n\nconst RefreshLabel = ({ onClick, tooltipContent }: RefreshLabelProps) => {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const IconWithoutRef = forwardRef((props: IconType, ref: any) => (\n    <Icons.Refresh {...props} />\n  ));\n\n  return (\n    <Tooltip title={tooltipContent}>\n      <IconWithoutRef\n        role=\"button\"\n        onClick={onClick}\n        css={(theme: SupersetTheme) => ({\n          cursor: 'pointer',\n          color: theme.colors.grayscale.base,\n          '&:hover': { color: theme.colors.primary.base },\n        })}\n      />\n    </Tooltip>\n  );\n};\n\nexport default RefreshLabel;\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, {\n  FunctionComponent,\n  useState,\n  ReactNode,\n  useMemo,\n  useEffect,\n} from 'react';\nimport { SelectValue } from 'antd/lib/select';\n\nimport { styled, t } from '@superset-ui/core';\nimport { Select } from 'src/components';\nimport { FormLabel } from 'src/components/Form';\nimport Icons from 'src/components/Icons';\nimport DatabaseSelector, {\n  DatabaseObject,\n} from 'src/components/DatabaseSelector';\nimport RefreshLabel from 'src/components/RefreshLabel';\nimport CertifiedBadge from 'src/components/CertifiedBadge';\nimport WarningIconWithTooltip from 'src/components/WarningIconWithTooltip';\nimport { useToasts } from 'src/components/MessageToasts/withToasts';\nimport { useTables, Table } from 'src/hooks/apiResources';\nimport {\n  getClientErrorMessage,\n  getClientErrorObject,\n} from 'src/utils/getClientErrorObject';\n\nconst REFRESH_WIDTH = 30;\n\nconst TableSelectorWrapper = styled.div`\n  ${({ theme }) => `\n    .refresh {\n      display: flex;\n      align-items: center;\n      width: ${REFRESH_WIDTH}px;\n      margin-left: ${theme.gridUnit}px;\n      margin-top: ${theme.gridUnit * 5}px;\n    }\n\n    .section {\n      display: flex;\n      flex-direction: row;\n      align-items: center;\n    }\n\n    .divider {\n      border-bottom: 1px solid ${theme.colors.secondary.light5};\n      margin: 15px 0;\n    }\n\n    .table-length {\n      color: ${theme.colors.grayscale.light1};\n    }\n\n    .select {\n      flex: 1;\n      max-width: calc(100% - ${theme.gridUnit + REFRESH_WIDTH}px)\n    }\n  `}\n`;\n\nconst TableLabel = styled.span`\n  align-items: center;\n  display: flex;\n  white-space: nowrap;\n\n  svg,\n  small {\n    margin-right: ${({ theme }) => theme.gridUnit}px;\n  }\n`;\n\ninterface TableSelectorProps {\n  clearable?: boolean;\n  database?: DatabaseObject | null;\n  emptyState?: ReactNode;\n  formMode?: boolean;\n  getDbList?: (arg0: any) => void;\n  handleError: (msg: string) => void;\n  isDatabaseSelectEnabled?: boolean;\n  onDbChange?: (db: DatabaseObject) => void;\n  onSchemaChange?: (schema?: string) => void;\n  readOnly?: boolean;\n  schema?: string;\n  onEmptyResults?: (searchText?: string) => void;\n  sqlLabMode?: boolean;\n  tableValue?: string | string[];\n  onTableSelectChange?: (value?: string | string[], schema?: string) => void;\n  tableSelectMode?: 'single' | 'multiple';\n  customTableOptionLabelRenderer?: (table: Table) => JSX.Element;\n}\n\nexport interface TableOption {\n  label: JSX.Element;\n  text: string;\n  value: string;\n}\n\nexport const TableOption = ({ table }: { table: Table }) => {\n  const { value, type, extra } = table;\n  return (\n    <TableLabel title={value}>\n      {type === 'view' ? (\n        <Icons.Eye iconSize=\"m\" />\n      ) : (\n        <Icons.Table iconSize=\"m\" />\n      )}\n      {extra?.certification && (\n        <CertifiedBadge\n          certifiedBy={extra.certification.certified_by}\n          details={extra.certification.details}\n          size=\"l\"\n        />\n      )}\n      {extra?.warning_markdown && (\n        <WarningIconWithTooltip\n          warningMarkdown={extra.warning_markdown}\n          size=\"l\"\n          marginRight={4}\n        />\n      )}\n      {value}\n    </TableLabel>\n  );\n};\n\nfunction renderSelectRow(select: ReactNode, refreshBtn: ReactNode) {\n  return (\n    <div className=\"section\">\n      <span className=\"select\">{select}</span>\n      <span className=\"refresh\">{refreshBtn}</span>\n    </div>\n  );\n}\n\nconst TableSelector: FunctionComponent<TableSelectorProps> = ({\n  database,\n  emptyState,\n  formMode = false,\n  getDbList,\n  handleError,\n  isDatabaseSelectEnabled = true,\n  onDbChange,\n  onSchemaChange,\n  readOnly = false,\n  onEmptyResults,\n  schema,\n  sqlLabMode = true,\n  tableSelectMode = 'single',\n  tableValue = undefined,\n  onTableSelectChange,\n  customTableOptionLabelRenderer,\n}) => {\n  const { addSuccessToast } = useToasts();\n  const [currentSchema, setCurrentSchema] = useState<string | undefined>(\n    schema,\n  );\n  const [tableSelectValue, setTableSelectValue] = useState<\n    SelectValue | undefined\n  >(undefined);\n  const {\n    data,\n    isFetching: loadingTables,\n    refetch,\n  } = useTables({\n    dbId: database?.id,\n    schema: currentSchema,\n    onSuccess: (data, isFetched) => {\n      if (isFetched) {\n        addSuccessToast(t('List updated'));\n      }\n    },\n    onError: err => {\n      getClientErrorObject(err).then(clientError => {\n        handleError(\n          getClientErrorMessage(\n            t('There was an error loading the tables'),\n            clientError,\n          ),\n        );\n      });\n    },\n  });\n\n  const tableOptions = useMemo<TableOption[]>(\n    () =>\n      data\n        ? data.options.map(table => ({\n            value: table.value,\n            label: <TableOption table={table} />,\n            text: table.value,\n            ...(customTableOptionLabelRenderer && {\n              customLabel: customTableOptionLabelRenderer(table),\n            }),\n          }))\n        : [],\n    [data, customTableOptionLabelRenderer],\n  );\n\n  useEffect(() => {\n    // reset selections\n    if (database === undefined) {\n      setCurrentSchema(undefined);\n      setTableSelectValue(undefined);\n    }\n  }, [database, tableSelectMode]);\n\n  useEffect(() => {\n    if (tableSelectMode === 'single') {\n      setTableSelectValue(\n        tableOptions.find(option => option.value === tableValue),\n      );\n    } else {\n      setTableSelectValue(\n        tableOptions?.filter(\n          option => option && tableValue?.includes(option.value),\n        ) || [],\n      );\n    }\n  }, [tableOptions, tableValue, tableSelectMode]);\n\n  const internalTableChange = (\n    selectedOptions: TableOption | TableOption[] | undefined,\n  ) => {\n    if (currentSchema) {\n      onTableSelectChange?.(\n        Array.isArray(selectedOptions)\n          ? selectedOptions.map(option => option?.value)\n          : selectedOptions?.value,\n        currentSchema,\n      );\n    } else {\n      setTableSelectValue(selectedOptions);\n    }\n  };\n\n  const internalDbChange = (db: DatabaseObject) => {\n    if (onDbChange) {\n      onDbChange(db);\n    }\n  };\n\n  const internalSchemaChange = (schema?: string) => {\n    setCurrentSchema(schema);\n    if (onSchemaChange) {\n      onSchemaChange(schema);\n    }\n\n    const value = tableSelectMode === 'single' ? undefined : [];\n    internalTableChange(value);\n  };\n\n  const handleFilterOption = useMemo(\n    () => (search: string, option: TableOption) => {\n      const searchValue = search.trim().toLowerCase();\n      const { value } = option;\n      return value.toLowerCase().includes(searchValue);\n    },\n    [],\n  );\n\n  function renderTableSelect() {\n    const disabled = (currentSchema && !formMode && readOnly) || !currentSchema;\n\n    const header = sqlLabMode ? (\n      <FormLabel>{t('See table schema')}</FormLabel>\n    ) : (\n      <FormLabel>{t('Table')}</FormLabel>\n    );\n\n    const select = (\n      <Select\n        ariaLabel={t('Select table or type to search tables')}\n        disabled={disabled}\n        filterOption={handleFilterOption}\n        header={header}\n        labelInValue\n        loading={loadingTables}\n        name=\"select-table\"\n        onChange={(options: TableOption | TableOption[]) =>\n          internalTableChange(options)\n        }\n        options={tableOptions}\n        placeholder={t('Select table or type to search tables')}\n        showSearch\n        mode={tableSelectMode}\n        value={tableSelectValue}\n        allowClear={tableSelectMode === 'multiple'}\n        allowSelectAll={false}\n      />\n    );\n\n    const refreshLabel = !readOnly && (\n      <RefreshLabel\n        onClick={() => refetch()}\n        tooltipContent={t('Force refresh table list')}\n      />\n    );\n\n    return renderSelectRow(select, refreshLabel);\n  }\n\n  return (\n    <TableSelectorWrapper>\n      <DatabaseSelector\n        db={database}\n        emptyState={emptyState}\n        formMode={formMode}\n        getDbList={getDbList}\n        handleError={handleError}\n        onDbChange={readOnly ? undefined : internalDbChange}\n        onEmptyResults={onEmptyResults}\n        onSchemaChange={readOnly ? undefined : internalSchemaChange}\n        schema={currentSchema}\n        sqlLabMode={sqlLabMode}\n        isDatabaseSelectEnabled={isDatabaseSelectEnabled && !readOnly}\n        readOnly={readOnly}\n      />\n      {sqlLabMode && !formMode && <div className=\"divider\" />}\n      {renderTableSelect()}\n    </TableSelectorWrapper>\n  );\n};\n\nexport const TableSelectorMultiple: FunctionComponent<\n  TableSelectorProps\n> = props => <TableSelector tableSelectMode=\"multiple\" {...props} />;\n\nexport default TableSelector;\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport rison from 'rison';\nimport Chart from 'src/types/Chart';\nimport { useApiV1Resource, useTransformedResource } from './apiResources';\n\nfunction extractOwnerNames({ owners }: Chart) {\n  if (!owners) return null;\n  return owners.map(owner => `${owner.first_name} ${owner.last_name}`);\n}\n\nconst ownerNamesQuery = rison.encode({\n  columns: ['owners.first_name', 'owners.last_name'],\n  keys: ['none'],\n});\n\nexport function useChartOwnerNames(chartId: string) {\n  return useTransformedResource(\n    useApiV1Resource<Chart>(`/api/v1/chart/${chartId}?q=${ownerNamesQuery}`),\n    extractOwnerNames,\n  );\n}\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { Dashboard, Datasource, EmbeddedDashboard } from 'src/dashboard/types';\nimport { Chart } from 'src/types/Chart';\nimport { useApiV1Resource, useTransformedResource } from './apiResources';\n\nexport const useDashboard = (idOrSlug: string | number) =>\n  useTransformedResource(\n    useApiV1Resource<Dashboard>(`/api/v1/dashboard/${idOrSlug}`),\n    dashboard => ({\n      ...dashboard,\n      // TODO: load these at the API level\n      metadata:\n        (dashboard.json_metadata && JSON.parse(dashboard.json_metadata)) || {},\n      position_data:\n        dashboard.position_json && JSON.parse(dashboard.position_json),\n      owners: dashboard.owners || [],\n    }),\n  );\n\n// gets the chart definitions for a dashboard\nexport const useDashboardCharts = (idOrSlug: string | number) =>\n  useApiV1Resource<Chart[]>(`/api/v1/dashboard/${idOrSlug}/charts`);\n\n// gets the datasets for a dashboard\n// important: this endpoint only returns the fields in the dataset\n// that are necessary for rendering the given dashboard\nexport const useDashboardDatasets = (idOrSlug: string | number) =>\n  useApiV1Resource<Datasource[]>(`/api/v1/dashboard/${idOrSlug}/datasets`);\n\nexport const useEmbeddedDashboard = (idOrSlug: string | number) =>\n  useApiV1Resource<EmbeddedDashboard>(`/api/v1/dashboard/${idOrSlug}/embedded`);\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { api, JsonResponse } from './queryApi';\n\nexport type FetchValidationQueryParams = {\n  dbId?: string | number;\n  schema?: string;\n  sql: string;\n  templateParams?: string;\n};\n\ntype ValidationResult = {\n  end_column: number | null;\n  line_number: number | null;\n  message: string | null;\n  start_column: number | null;\n};\n\nconst queryValidationApi = api.injectEndpoints({\n  endpoints: builder => ({\n    queryValidations: builder.query<\n      ValidationResult[],\n      FetchValidationQueryParams\n    >({\n      providesTags: ['QueryValidations'],\n      query: ({ dbId, schema, sql, templateParams }) => {\n        let template_params = templateParams;\n        try {\n          template_params = JSON.parse(templateParams || '');\n        } catch (e) {\n          template_params = undefined;\n        }\n        const postPayload = {\n          schema,\n          sql,\n          ...(template_params && { template_params }),\n        };\n        return {\n          method: 'post',\n          endpoint: `/api/v1/database/${dbId}/validate_sql/`,\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify(postPayload),\n          transformResponse: ({ json }: JsonResponse) => json.result,\n        };\n      },\n    }),\n  }),\n});\n\nexport const { useQueryValidationsQuery } = queryValidationApi;\n"],"names":["styled","textColor","color","text","props","___EmotionJSX","AntdBadge","_extends","undefined","theme","gridUnit","colors","primary","base","grayscale","light5","DatabaseSelectorWrapper","div","LabelStyle","SelectLabel","backend","databaseName","Label","className","title","EMPTY_SCHEMA_OPTIONS","DatabaseSelector","db","formMode","emptyState","getDbList","handleError","isDatabaseSelectEnabled","onDbChange","onEmptyResults","onSchemaChange","readOnly","schema","sqlLabMode","currentDb","setCurrentDb","useState","currentSchema","setCurrentSchema","label","value","schemaRef","useRef","current","addSuccessToast","useToasts","sortComparator","useCallback","itemA","itemB","order","loadDatabases","useMemo","async","search","page","pageSize","endpoint","rison","order_column","order_direction","page_size","filters","col","opr","SupersetClient","get","then","json","result","count","length","options","map","row","database_name","id","data","totalCount","changeSchema","useEffect","isFetching","loadingSchemas","refetch","useSchemas","dbId","onSuccess","schemas","isFetched","find","schemaOption","onError","t","schemaOptions","renderSelectRow","select","refreshBtn","AsyncSelect","ariaLabel","optionFilterProps","header","FormLabel","lazyLoading","notFoundContent","onChange","database","placeholder","disabled","refreshIcon","RefreshLabel","onClick","tooltipContent","Select","labelInValue","loading","name","item","showSearch","renderSchemaSelect","IconWithoutRef","forwardRef","ref","Icons","Refresh","Tooltip","role","css","cursor","TableSelectorWrapper","secondary","light1","TableLabel","span","TableOption","table","type","extra","Eye","iconSize","Table","certification","CertifiedBadge","certifiedBy","certified_by","details","size","warning_markdown","WarningIconWithTooltip","warningMarkdown","marginRight","TableSelector","tableSelectMode","tableValue","onTableSelectChange","customTableOptionLabelRenderer","tableSelectValue","setTableSelectValue","loadingTables","useTables","err","getClientErrorObject","clientError","getClientErrorMessage","tableOptions","customLabel","option","filter","includes","internalTableChange","selectedOptions","Array","isArray","handleFilterOption","searchValue","trim","toLowerCase","filterOption","mode","allowClear","allowSelectAll","renderTableSelect","TableSelectorMultiple","extractOwnerNames","owners","owner","first_name","last_name","ownerNamesQuery","columns","keys","useChartOwnerNames","chartId","useTransformedResource","useApiV1Resource","useDashboard","idOrSlug","dashboard","metadata","json_metadata","JSON","parse","position_data","position_json","useDashboardCharts","useDashboardDatasets","queryValidationApi","api","injectEndpoints","endpoints","builder","queryValidations","query","providesTags","sql","templateParams","template_params","e","postPayload","method","headers","body","stringify","transformResponse","useQueryValidationsQuery"],"sourceRoot":""}