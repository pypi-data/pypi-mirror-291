{"version":3,"file":"ba4c7204b1ee9dfa10b3.chunk.js","mappings":"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","sources":["webpack://superset/./plugins/plugin-chart-period-over-period-kpi/src/PopKPI.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { createRef, useMemo } from 'react';\nimport { css, styled, t, useTheme } from '@superset-ui/core';\nimport { Tooltip } from '@superset-ui/chart-controls';\nimport {\n  PopKPIComparisonSymbolStyleProps,\n  PopKPIComparisonValueStyleProps,\n  PopKPIProps,\n} from './types';\n\nconst ComparisonValue = styled.div<PopKPIComparisonValueStyleProps>`\n  ${({ theme, subheaderFontSize }) => `\n    font-weight: ${theme.typography.weights.light};\n    width: 33%;\n    display: table-cell;\n    font-size: ${subheaderFontSize || 20}px;\n    text-align: center;\n  `}\n`;\n\nconst SymbolWrapper = styled.div<PopKPIComparisonSymbolStyleProps>`\n  ${({ theme, backgroundColor, textColor }) => `\n    background-color: ${backgroundColor};\n    color: ${textColor};\n    padding: ${theme.gridUnit}px ${theme.gridUnit * 2}px;\n    border-radius: ${theme.gridUnit * 2}px;\n    display: inline-block;\n    margin-right: ${theme.gridUnit}px;\n  `}\n`;\n\nexport default function PopKPI(props: PopKPIProps) {\n  const {\n    height,\n    width,\n    bigNumber,\n    prevNumber,\n    valueDifference,\n    percentDifferenceFormattedString,\n    headerFontSize,\n    subheaderFontSize,\n    comparisonColorEnabled,\n    percentDifferenceNumber,\n    comparatorText,\n  } = props;\n\n  const rootElem = createRef<HTMLDivElement>();\n  const theme = useTheme();\n\n  const wrapperDivStyles = css`\n    font-family: ${theme.typography.families.sansSerif};\n    position: relative;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    padding: ${theme.gridUnit * 4}px;\n    border-radius: ${theme.gridUnit * 2}px;\n    height: ${height}px;\n    width: ${width}px;\n  `;\n\n  const bigValueContainerStyles = css`\n    font-size: ${headerFontSize || 60}px;\n    font-weight: ${theme.typography.weights.normal};\n    text-align: center;\n  `;\n\n  const getArrowIndicatorColor = () => {\n    if (!comparisonColorEnabled) return theme.colors.grayscale.base;\n    return percentDifferenceNumber > 0\n      ? theme.colors.success.base\n      : theme.colors.error.base;\n  };\n\n  const arrowIndicatorStyle = css`\n    color: ${getArrowIndicatorColor()};\n    margin-left: ${theme.gridUnit}px;\n  `;\n\n  const defaultBackgroundColor = theme.colors.grayscale.light4;\n  const defaultTextColor = theme.colors.grayscale.base;\n  const { backgroundColor, textColor } = useMemo(() => {\n    let bgColor = defaultBackgroundColor;\n    let txtColor = defaultTextColor;\n    if (percentDifferenceNumber > 0) {\n      if (comparisonColorEnabled) {\n        bgColor = theme.colors.success.light2;\n        txtColor = theme.colors.success.base;\n      }\n    } else if (percentDifferenceNumber < 0) {\n      if (comparisonColorEnabled) {\n        bgColor = theme.colors.error.light2;\n        txtColor = theme.colors.error.base;\n      }\n    }\n\n    return {\n      backgroundColor: bgColor,\n      textColor: txtColor,\n    };\n  }, [theme, comparisonColorEnabled, percentDifferenceNumber]);\n\n  const SYMBOLS_WITH_VALUES = useMemo(\n    () => [\n      {\n        symbol: '#',\n        value: prevNumber,\n        tooltipText: t('Data for %s', comparatorText),\n      },\n      {\n        symbol: '△',\n        value: valueDifference,\n        tooltipText: t('Value difference between the time periods'),\n      },\n      {\n        symbol: '%',\n        value: percentDifferenceFormattedString,\n        tooltipText: t('Percentage difference between the time periods'),\n      },\n    ],\n    [prevNumber, valueDifference, percentDifferenceFormattedString],\n  );\n\n  return (\n    <div ref={rootElem} css={wrapperDivStyles}>\n      <div css={bigValueContainerStyles}>\n        {bigNumber}\n        {percentDifferenceNumber !== 0 && (\n          <span css={arrowIndicatorStyle}>\n            {percentDifferenceNumber > 0 ? '↑' : '↓'}\n          </span>\n        )}\n      </div>\n      <div\n        css={css`\n          width: 100%;\n          display: table;\n        `}\n      >\n        <div\n          css={css`\n            display: table-row;\n          `}\n        >\n          {SYMBOLS_WITH_VALUES.map((symbol_with_value, index) => (\n            <ComparisonValue\n              key={`comparison-symbol-${symbol_with_value.symbol}`}\n              subheaderFontSize={subheaderFontSize}\n            >\n              <Tooltip\n                id=\"tooltip\"\n                placement=\"top\"\n                title={symbol_with_value.tooltipText}\n              >\n                <SymbolWrapper\n                  backgroundColor={\n                    index > 0 ? backgroundColor : defaultBackgroundColor\n                  }\n                  textColor={index > 0 ? textColor : defaultTextColor}\n                >\n                  {symbol_with_value.symbol}\n                </SymbolWrapper>\n                {symbol_with_value.value}\n              </Tooltip>\n            </ComparisonValue>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"names":["ComparisonValue","styled","div","theme","subheaderFontSize","typography","weights","light","SymbolWrapper","backgroundColor","textColor","gridUnit","PopKPI","props","height","width","bigNumber","prevNumber","valueDifference","percentDifferenceFormattedString","headerFontSize","comparisonColorEnabled","percentDifferenceNumber","comparatorText","rootElem","createRef","useTheme","wrapperDivStyles","css","families","sansSerif","bigValueContainerStyles","normal","arrowIndicatorStyle","colors","success","base","error","grayscale","defaultBackgroundColor","light4","defaultTextColor","useMemo","bgColor","txtColor","light2","SYMBOLS_WITH_VALUES","symbol","value","tooltipText","t","___EmotionJSX","ref","map","symbol_with_value","index","key","Tooltip","id","placement","title"],"sourceRoot":""}