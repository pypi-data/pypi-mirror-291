# generated by scripts/generate.py

import re
from typing import TYPE_CHECKING, Dict, Literal

from .client import Client

if TYPE_CHECKING:
    from ..models import connector_delete_response_v1, connector_info_v1, connector_link_parameters_v1, connector_listing_v1

import uritemplate


class Connector:

    def __init__(self, client: Client):
        self._client: Client = client

    def delete(self, *, cloud_id: Literal["msft", "teams", "gdrive", "box", "dropbox"], connector_id: str) -> "connector_delete_response_v1.Model":
        from ..models import connector_delete_response_v1

        url = uritemplate.partial(
            uri="https://dc-api-v2.adobe.io/{expiry}/{cloud_id}/connector/{connector_id}",
            var_dict={
                "cloud_id": cloud_id,
                "connector_id": connector_id,
            },
        ).uri
        headers: Dict[str, str] = {}
        headers["Accept"] = 'application/vnd.adobe.dc+json; profile="https://dc-api.adobe.io/schemas/connector_delete_response_v1.json"'

        resp = self._client.request(
            "DELETE",
            url,
            headers=headers,
        )
        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/connector_delete_response_v1\.json", content_type):
            return connector_delete_response_v1.Model.model_validate(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def link(self, *, _data: "connector_link_parameters_v1.Model", cloud_id: Literal["msft", "teams", "gdrive", "box", "dropbox"]) -> "connector_info_v1.Model":
        from ..models import connector_info_v1

        url = uritemplate.partial(
            uri="https://dc-api-v2.adobe.io/{expiry}/{cloud_id}/connector/link",
            var_dict={
                "cloud_id": cloud_id,
            },
        ).uri
        headers: Dict[str, str] = {}
        headers["Accept"] = 'application/vnd.adobe.dc+json; profile="https://dc-api.adobe.io/schemas/connector_info_v1.json"'

        resp = self._client.request(
            "POST",
            url,
            headers=headers,
            json=_data.model_dump(),
        )
        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/connector_info_v1\.json", content_type):
            return connector_info_v1.Model.model_validate(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def list(self, *, cloud_id: Literal["msft", "teams", "gdrive", "box", "dropbox"]) -> "connector_listing_v1.Model":
        from ..models import connector_listing_v1

        url = uritemplate.partial(
            uri="https://dc-api-v2.adobe.io/{expiry}/{cloud_id}/connector/list",
            var_dict={
                "cloud_id": cloud_id,
            },
        ).uri
        headers: Dict[str, str] = {}
        headers["Accept"] = 'application/vnd.adobe.dc+json; profile="https://dc-api.adobe.io/schemas/connector_listing_v1.json"'

        resp = self._client.request(
            "GET",
            url,
            headers=headers,
        )
        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/connector_listing_v1\.json", content_type):
            return connector_listing_v1.Model.model_validate(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")
