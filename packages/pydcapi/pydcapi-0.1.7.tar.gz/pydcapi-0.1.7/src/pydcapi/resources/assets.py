# generated by scripts/generate.py

import re
from typing import IO, TYPE_CHECKING, Any, Dict, Literal, Union

from .client import Client

if TYPE_CHECKING:
    from ..models import (
        asset_block_upload_extend_parameters_v1,
        asset_block_upload_extend_v1,
        asset_block_upload_finalize_parameters_v1,
        asset_block_upload_finalize_v1,
        asset_block_upload_initialize_parameters_v1,
        asset_block_upload_initialize_v1,
        asset_document_rendition_status_v1,
        asset_export_v1,
        asset_import_v1,
        asset_metadata_basic_v1,
        asset_metadata_field_patch_v1,
        asset_metadata_field_v1,
        asset_tag_sensei_v1,
        asset_uri_download_v1,
        asset_uri_rendition_v1,
        asset_v1,
        authorize_client_verb_v1,
        createpdf_from_html_parameters_v1,
        createpdf_parameters_v1,
        exportpdf_parameters_v1,
        new_asset_job_v1,
        pdf_actions_parameters_v1,
        splitpdf_parameters_v1,
        upload_status_v1,
        zip_download_params_v1,
        zip_download_uri_v1,
    )

import uritemplate


class Assets:

    def __init__(self, client: Client):
        self._client: Client = client

    def authorize_client_verb(self, *, _data: "authorize_client_verb_v1.Model") -> Any:
        url = "https://dc-api-v2.adobe.io/{expiry}/assets/authorize/client/verb"
        headers: Dict[str, str] = {}
        headers["Accept"] = "application/json"

        resp = self._client.request(
            "PUT",
            url,
            headers=headers,
            json=_data.model_dump(),
        )
        content_type = resp.headers["Content-Type"]

        if re.search(r"application/json", content_type):
            return resp.json()
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def block_upload_extend(self, *, _data: "asset_block_upload_extend_parameters_v1.Model", asset_block_upload_extend_uri: str) -> "asset_block_upload_extend_v1.Model":
        from ..models import asset_block_upload_extend_v1

        url = uritemplate.partial(
            uri="{+asset_block_upload_extend_uri}",
            var_dict={
                "asset_block_upload_extend_uri": asset_block_upload_extend_uri,
            },
        ).uri
        headers: Dict[str, str] = {}
        headers["Accept"] = 'application/vnd.adobe.dc+json; profile="https://dc-api.adobe.io/schemas/asset_block_upload_extend_v1.json"'

        resp = self._client.request(
            "PUT",
            url,
            headers=headers,
            json=_data.model_dump(),
        )
        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/asset_block_upload_extend_v1\.json", content_type):
            return asset_block_upload_extend_v1.Model.model_validate(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def block_upload_finalize(self, *, _data: "asset_block_upload_finalize_parameters_v1.Model", asset_block_upload_finalize_uri: str) -> "asset_block_upload_finalize_v1.Model":
        from ..models import asset_block_upload_finalize_v1

        url = uritemplate.partial(
            uri="{+asset_block_upload_finalize_uri}",
            var_dict={
                "asset_block_upload_finalize_uri": asset_block_upload_finalize_uri,
            },
        ).uri
        headers: Dict[str, str] = {}
        headers["Accept"] = 'application/vnd.adobe.dc+json; profile="https://dc-api.adobe.io/schemas/asset_block_upload_finalize_v1.json"'

        resp = self._client.request(
            "PUT",
            url,
            headers=headers,
            json=_data.model_dump(),
        )
        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/asset_block_upload_finalize_v1\.json", content_type):
            return asset_block_upload_finalize_v1.Model.model_validate(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def block_upload_initialize(self, *, _data: "asset_block_upload_initialize_parameters_v1.Model") -> "asset_block_upload_initialize_v1.Model":
        from ..models import asset_block_upload_initialize_v1

        url = "https://dc-api-v2.adobe.io/{expiry}/assets/block_upload/initialize"
        headers: Dict[str, str] = {}
        headers["Accept"] = 'application/vnd.adobe.dc+json; profile="https://dc-api.adobe.io/schemas/asset_block_upload_initialize_v1.json"'

        resp = self._client.request(
            "POST",
            url,
            headers=headers,
            json=_data.model_dump(),
        )
        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/asset_block_upload_initialize_v1\.json", content_type):
            return asset_block_upload_initialize_v1.Model.model_validate(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def createpdf(self, *, _data: "createpdf_parameters_v1.Model") -> "new_asset_job_v1.Model":
        from ..models import new_asset_job_v1

        url = "https://dc-api-v2.adobe.io/{expiry}/assets?operation=createpdf"
        headers: Dict[str, str] = {}
        headers["Accept"] = 'application/vnd.adobe.dc+json; profile="https://dc-api.adobe.io/schemas/new_asset_job_v1.json"'

        resp = self._client.request(
            "POST",
            url,
            headers=headers,
            json=_data.model_dump(),
        )
        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/new_asset_job_v1\.json", content_type):
            return new_asset_job_v1.Model.model_validate(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def createpdf_from_html(self, *, _data: "createpdf_from_html_parameters_v1.Model") -> "new_asset_job_v1.Model":
        from ..models import new_asset_job_v1

        url = "https://dc-api-v2.adobe.io/{expiry}/assets?operation=createpdf_from_html"
        headers: Dict[str, str] = {}
        headers["Accept"] = 'application/vnd.adobe.dc+json; profile="https://dc-api.adobe.io/schemas/new_asset_job_v1.json"'

        resp = self._client.request(
            "POST",
            url,
            headers=headers,
            json=_data.model_dump(),
        )
        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/new_asset_job_v1\.json", content_type):
            return new_asset_job_v1.Model.model_validate(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def delete(self, *, asset_uri: str) -> None:
        url = uritemplate.partial(
            uri="{+asset_uri}",
            var_dict={
                "asset_uri": asset_uri,
            },
        ).uri
        headers: Dict[str, str] = {}

        self._client.request(
            "DELETE",
            url,
            headers=headers,
        )

    def delete_metadata_field(self, *, fields: Literal["last_access"], asset_uri: str) -> None:
        url = uritemplate.partial(
            uri="{+asset_uri}/metadata{/fields}",
            var_dict={
                "fields": fields,
                "asset_uri": asset_uri,
            },
        ).uri
        headers: Dict[str, str] = {}

        self._client.request(
            "DELETE",
            url,
            headers=headers,
        )

    def document_rendition(self, *, format_: Literal["ftpdf", "jcos", "owp"], asset_rendition_uri: str, fallback: Literal["original", "none"] = "original") -> Union[Any, bytes, str]:
        url = uritemplate.partial(
            uri="{+asset_rendition_uri}{&format,fallback}",
            var_dict={
                "format": format_,
                "asset_rendition_uri": asset_rendition_uri,
                "fallback": fallback,
            },
        ).uri
        headers: Dict[str, str] = {}
        headers["Accept"] = "application/cbor; application/json; application/octet-stream; application/pdf; text/html; */*"

        resp = self._client.request(
            "GET",
            url,
            headers=headers,
        )
        content_type = resp.headers["Content-Type"]

        if re.search(r"application/cbor", content_type):
            return resp.content
        if re.search(r"application/json", content_type):
            return resp.json()
        if re.search(r"application/octet-stream", content_type):
            return resp.content
        if re.search(r"application/pdf", content_type):
            return resp.content
        if re.search(r"text/html", content_type):
            return resp.text
        if re.search(r".*", content_type):
            return resp.content
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def document_rendition_status(self, *, asset_uri: str) -> "asset_document_rendition_status_v1.Model":
        from ..models import asset_document_rendition_status_v1

        url = uritemplate.partial(
            uri="{+asset_uri}/document/rendition/status",
            var_dict={
                "asset_uri": asset_uri,
            },
        ).uri
        headers: Dict[str, str] = {}
        headers["Accept"] = 'application/vnd.adobe.dc+json; profile="https://dc-api.adobe.io/schemas/asset_document_rendition_status_v1.json"'

        resp = self._client.request(
            "GET",
            url,
            headers=headers,
        )
        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/asset_document_rendition_status_v1\.json", content_type):
            return asset_document_rendition_status_v1.Model.model_validate(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def download(self, *, asset_download_uri: str) -> bytes:
        url = uritemplate.partial(
            uri="{+asset_download_uri}",
            var_dict={
                "asset_download_uri": asset_download_uri,
            },
        ).uri
        headers: Dict[str, str] = {}
        headers["Accept"] = "*/*"

        resp = self._client.request(
            "GET",
            url,
            headers=headers,
        )
        content_type = resp.headers["Content-Type"]

        if re.search(r".*", content_type):
            return resp.content
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def download_uri(self, *, make_ticket: bool, asset_uri: str, make_direct_storage_uri: bool) -> "asset_uri_download_v1.Model":
        from ..models import asset_uri_download_v1

        url = uritemplate.partial(
            uri="{+asset_uri}/uri/download{?make_ticket,make_direct_storage_uri}",
            var_dict={
                "make_ticket": make_ticket,
                "asset_uri": asset_uri,
                "make_direct_storage_uri": make_direct_storage_uri,
            },
        ).uri
        headers: Dict[str, str] = {}
        headers["Accept"] = 'application/vnd.adobe.dc+json; profile="https://dc-api.adobe.io/schemas/asset_uri_download_v1.json"'

        resp = self._client.request(
            "GET",
            url,
            headers=headers,
        )
        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/asset_uri_download_v1\.json", content_type):
            return asset_uri_download_v1.Model.model_validate(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def export(self, *, _data: "asset_export_v1.Model", export_uri: str) -> "new_asset_job_v1.Model":
        from ..models import new_asset_job_v1

        url = uritemplate.partial(
            uri="{+export_uri}",
            var_dict={
                "export_uri": export_uri,
            },
        ).uri
        headers: Dict[str, str] = {}
        headers["Accept"] = 'application/vnd.adobe.dc+json; profile="https://dc-api.adobe.io/schemas/new_asset_job_v1.json"'

        resp = self._client.request(
            "POST",
            url,
            headers=headers,
            json=_data.model_dump(),
        )
        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/new_asset_job_v1\.json", content_type):
            return new_asset_job_v1.Model.model_validate(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def exportpdf(self, *, _data: "exportpdf_parameters_v1.Model") -> "new_asset_job_v1.Model":
        from ..models import new_asset_job_v1

        url = "https://dc-api-v2.adobe.io/{expiry}/assets?operation=exportpdf"
        headers: Dict[str, str] = {}
        headers["Accept"] = 'application/vnd.adobe.dc+json; profile="https://dc-api.adobe.io/schemas/new_asset_job_v1.json"'

        resp = self._client.request(
            "POST",
            url,
            headers=headers,
            json=_data.model_dump(),
        )
        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/new_asset_job_v1\.json", content_type):
            return new_asset_job_v1.Model.model_validate(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def get_metadata(self, *, asset_uri: str) -> "asset_metadata_basic_v1.Model":
        from ..models import asset_metadata_basic_v1

        url = uritemplate.partial(
            uri="{+asset_uri}/metadata",
            var_dict={
                "asset_uri": asset_uri,
            },
        ).uri
        headers: Dict[str, str] = {}
        headers["Accept"] = 'application/vnd.adobe.dc+json; profile="https://dc-api.adobe.io/schemas/asset_metadata_basic_v1.json"'

        resp = self._client.request(
            "GET",
            url,
            headers=headers,
        )
        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/asset_metadata_basic_v1\.json", content_type):
            return asset_metadata_basic_v1.Model.model_validate(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def get_metadata_field(self, *, fields: Literal["uri", "name", "asset_id", "parent_uri", "parent_id", "size", "type", "md5_digest", "page_count", "created", "modified", "last_access", "last_pagenum", "source", "created_by_client", "favorite", "starred", "tags", "custom_tags", "sign (only for Adobe Cloud Platform (ACP) storage user)"], asset_uri: str) -> "asset_metadata_field_v1.Model":
        from ..models import asset_metadata_field_v1

        url = uritemplate.partial(
            uri="{+asset_uri}/metadata{/fields}",
            var_dict={
                "fields": fields,
                "asset_uri": asset_uri,
            },
        ).uri
        headers: Dict[str, str] = {}
        headers["Accept"] = 'application/vnd.adobe.dc+json; profile="https://dc-api.adobe.io/schemas/asset_metadata_field_v1.json"'

        resp = self._client.request(
            "GET",
            url,
            headers=headers,
        )
        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/asset_metadata_field_v1\.json", content_type):
            return asset_metadata_field_v1.Model.model_validate(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def import_(self, *, _data: "asset_import_v1.Model") -> "new_asset_job_v1.Model":
        from ..models import new_asset_job_v1

        url = "https://dc-api-v2.adobe.io/{expiry}/assets?operation=import"
        headers: Dict[str, str] = {}
        headers["Accept"] = 'application/vnd.adobe.dc+json; profile="https://dc-api.adobe.io/schemas/new_asset_job_v1.json"'

        resp = self._client.request(
            "POST",
            url,
            headers=headers,
            json=_data.model_dump(),
        )
        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/new_asset_job_v1\.json", content_type):
            return new_asset_job_v1.Model.model_validate(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def patch_metadata_field(self, *, _data: "asset_metadata_field_patch_v1.Model", fields: Literal["tags", "custom_tags"], asset_uri: str) -> "asset_metadata_field_v1.Model":
        from ..models import asset_metadata_field_v1

        url = uritemplate.partial(
            uri="{+asset_uri}/metadata{/fields}",
            var_dict={
                "fields": fields,
                "asset_uri": asset_uri,
            },
        ).uri
        headers: Dict[str, str] = {}
        headers["Accept"] = 'application/vnd.adobe.dc+json; profile="https://dc-api.adobe.io/schemas/asset_metadata_field_v1.json"'

        resp = self._client.request(
            "PATCH",
            url,
            headers=headers,
            json=_data.model_dump(),
        )
        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/asset_metadata_field_v1\.json", content_type):
            return asset_metadata_field_v1.Model.model_validate(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def pdf_actions(self, *, _data: "pdf_actions_parameters_v1.Model") -> "new_asset_job_v1.Model":
        from ..models import new_asset_job_v1

        url = "https://dc-api-v2.adobe.io/{expiry}/assets?operation=pdf_actions"
        headers: Dict[str, str] = {}
        headers["Accept"] = 'application/vnd.adobe.dc+json; profile="https://dc-api.adobe.io/schemas/new_asset_job_v1.json"'

        resp = self._client.request(
            "POST",
            url,
            headers=headers,
            json=_data.model_dump(),
        )
        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/new_asset_job_v1\.json", content_type):
            return new_asset_job_v1.Model.model_validate(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def put_metadata_field(self, *, _data: "asset_metadata_field_v1.Model", fields: Literal["last_access", "last_pagenum", "favorite", "starred", "sign (only for Adobe Cloud Platform (ACP) storage user)"], asset_uri: str) -> None:
        url = uritemplate.partial(
            uri="{+asset_uri}/metadata{/fields}",
            var_dict={
                "fields": fields,
                "asset_uri": asset_uri,
            },
        ).uri
        headers: Dict[str, str] = {}

        self._client.request(
            "PUT",
            url,
            headers=headers,
            json=_data.model_dump(),
        )

    def rendition(self, *, download: bool, format_: Literal["png", "jpg"], page: int, rendition_class: str, size: str, asset_rendition_uri: str, markup: bool = True, processing_hint: Literal["speed_over_quality", "quality_over_speed"] = "speed_over_quality", wait: int = 10) -> bytes:
        url = uritemplate.partial(
            uri="{+asset_rendition_uri}{&format,size,wait,page,markup,processing_hint,download,rendition_class}",
            var_dict={
                "download": download,
                "format": format_,
                "page": page,
                "rendition_class": rendition_class,
                "size": size,
                "asset_rendition_uri": asset_rendition_uri,
                "markup": markup,
                "processing_hint": processing_hint,
                "wait": wait,
            },
        ).uri
        headers: Dict[str, str] = {}
        headers["Accept"] = "image/jpeg; image/png; image/*; */*"

        resp = self._client.request(
            "GET",
            url,
            headers=headers,
        )
        content_type = resp.headers["Content-Type"]

        if re.search(r"image/jpeg", content_type):
            return resp.content
        if re.search(r"image/png", content_type):
            return resp.content
        if re.search(r"image/.+", content_type):
            return resp.content
        if re.search(r".*", content_type):
            return resp.content
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def rendition_direct(self, *, asset_id: str, download: bool, format_: Literal["png", "jpg"], page: int, rendition_class: str, size: str, markup: bool = True, processing_hint: Literal["speed_over_quality", "quality_over_speed"] = "speed_over_quality", wait: int = 10) -> bytes:
        url = uritemplate.partial(
            uri="https://dc-api-v2.adobecontent.io/{expiry}/assets/download/{+asset_id}/rendition{?format,size,wait,page,markup,processing_hint,download,rendition_class}",
            var_dict={
                "asset_id": asset_id,
                "download": download,
                "format": format_,
                "page": page,
                "rendition_class": rendition_class,
                "size": size,
                "markup": markup,
                "processing_hint": processing_hint,
                "wait": wait,
            },
        ).uri
        headers: Dict[str, str] = {}
        headers["Accept"] = "image/jpeg; image/png; image/*; */*"

        resp = self._client.request(
            "GET",
            url,
            headers=headers,
        )
        content_type = resp.headers["Content-Type"]

        if re.search(r"image/jpeg", content_type):
            return resp.content
        if re.search(r"image/png", content_type):
            return resp.content
        if re.search(r"image/.+", content_type):
            return resp.content
        if re.search(r".*", content_type):
            return resp.content
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def rendition_uri(self, *, make_ticket: bool, asset_uri: str, type_: Literal["paged", "document"] = "paged") -> "asset_uri_rendition_v1.Model":
        from ..models import asset_uri_rendition_v1

        url = uritemplate.partial(
            uri="{+asset_uri}/uri/rendition{?make_ticket,type}",
            var_dict={
                "make_ticket": make_ticket,
                "asset_uri": asset_uri,
                "type": type_,
            },
        ).uri
        headers: Dict[str, str] = {}
        headers["Accept"] = 'application/vnd.adobe.dc+json; profile="https://dc-api.adobe.io/schemas/asset_uri_rendition_v1.json"'

        resp = self._client.request(
            "GET",
            url,
            headers=headers,
        )
        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/asset_uri_rendition_v1\.json", content_type):
            return asset_uri_rendition_v1.Model.model_validate(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def splitpdf(self, *, _data: "splitpdf_parameters_v1.Model") -> "new_asset_job_v1.Model":
        from ..models import new_asset_job_v1

        url = "https://dc-api-v2.adobe.io/{expiry}/assets?operation=splitpdf"
        headers: Dict[str, str] = {}
        headers["Accept"] = 'application/vnd.adobe.dc+json; profile="https://dc-api.adobe.io/schemas/new_asset_job_v1.json"'

        resp = self._client.request(
            "POST",
            url,
            headers=headers,
            json=_data.model_dump(),
        )
        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/new_asset_job_v1\.json", content_type):
            return new_asset_job_v1.Model.model_validate(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def tag(self, *, _pdf: bytes, async_: bool, client_version: str, qualify: bool, format_: Literal["instance_data", "fully_tagged_pdf"] = "instance_data") -> bytes:
        url = uritemplate.partial(
            uri="https://taggedpdf.adobe.io/{expiry}/assets?operation=tag{&format,async,qualify,client_version}",
            var_dict={
                "async": async_,
                "client_version": client_version,
                "qualify": qualify,
                "format": format_,
            },
        ).uri
        headers: Dict[str, str] = {}
        headers["Accept"] = "application/pdf; application/zip"

        resp = self._client.request(
            "POST",
            url,
            headers=headers,
            content=_pdf,
        )
        content_type = resp.headers["Content-Type"]

        if re.search(r"application/pdf", content_type):
            return resp.content
        if re.search(r"application/zip", content_type):
            return resp.content
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def tag_sensei(self, *, _file: Union[IO[bytes], bytes, str]) -> "asset_tag_sensei_v1.Model":
        from ..models import asset_tag_sensei_v1

        url = "https://sensei.adobe.io/services/v1/predict"
        headers: Dict[str, str] = {}
        headers["Accept"] = 'application/vnd.adobe.dc+json; profile="https://dc-api.adobe.io/schemas/asset_tag_sensei_v1.json"'

        resp = self._client.request(
            "POST",
            url,
            headers=headers,
            files={"file": _file},
        )
        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/asset_tag_sensei_v1\.json", content_type):
            return asset_tag_sensei_v1.Model.model_validate(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def update(self, *, _file: Union[IO[bytes], bytes, str], asset_uri: str) -> None:
        url = uritemplate.partial(
            uri="https://dc-api-v2.adobe.io/{expiry}/assets{?asset_uri}",
            var_dict={
                "asset_uri": asset_uri,
            },
        ).uri
        headers: Dict[str, str] = {}

        self._client.request(
            "PUT",
            url,
            headers=headers,
            files={"file": _file},
        )

    def upload(self, *, _file: Union[IO[bytes], bytes, str]) -> "asset_v1.Model":
        from ..models import asset_v1

        url = "https://dc-api-v2.adobe.io/{expiry}/assets"
        headers: Dict[str, str] = {}
        headers["Accept"] = 'application/vnd.adobe.dc+json; profile="https://dc-api.adobe.io/schemas/asset_v1.json"'

        resp = self._client.request(
            "POST",
            url,
            headers=headers,
            files={"file": _file},
        )
        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/asset_v1\.json", content_type):
            return asset_v1.Model.model_validate(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def upload_status(self, *, asset_upload_status_monitor_uri: str) -> "upload_status_v1.Model":
        from ..models import upload_status_v1

        url = uritemplate.partial(
            uri="{+asset_upload_status_monitor_uri}",
            var_dict={
                "asset_upload_status_monitor_uri": asset_upload_status_monitor_uri,
            },
        ).uri
        headers: Dict[str, str] = {}
        headers["Accept"] = 'application/vnd.adobe.dc+json; profile="https://dc-api.adobe.io/schemas/upload_status_v1.json"'

        resp = self._client.request(
            "GET",
            url,
            headers=headers,
        )
        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/upload_status_v1\.json", content_type):
            return upload_status_v1.Model.model_validate(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def zip_download(self, *, zip_download_uri: str) -> bytes:
        url = uritemplate.partial(
            uri="{+zip_download_uri}",
            var_dict={
                "zip_download_uri": zip_download_uri,
            },
        ).uri
        headers: Dict[str, str] = {}
        headers["Accept"] = "application/zip"

        resp = self._client.request(
            "GET",
            url,
            headers=headers,
        )
        content_type = resp.headers["Content-Type"]

        if re.search(r"application/zip", content_type):
            return resp.content
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def zip_download_uri(self, *, _data: "zip_download_params_v1.Model") -> "zip_download_uri_v1.Model":
        from ..models import zip_download_uri_v1

        url = "https://dc-api-v2.adobe.io/{expiry}/assets/zip/uri/download"
        headers: Dict[str, str] = {}
        headers["Accept"] = 'application/vnd.adobe.dc+json; profile="https://dc-api.adobe.io/schemas/zip_download_uri_v1.json"'

        resp = self._client.request(
            "POST",
            url,
            headers=headers,
            json=_data.model_dump(),
        )
        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/zip_download_uri_v1\.json", content_type):
            return zip_download_uri_v1.Model.model_validate(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")
