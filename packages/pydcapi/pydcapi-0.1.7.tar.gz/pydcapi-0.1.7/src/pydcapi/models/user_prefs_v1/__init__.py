# generated by datamodel-codegen:
#   filename:  user_prefs_v1.json

from __future__ import annotations

from typing import Any, Dict, Literal, Optional

from pydantic import BaseModel, ConfigDict, Field, constr


class Acroprefs(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    prefsync_enabled: Optional[bool] = None


class DcConsent(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    latest_version: Optional[str] = Field(None, alias='latest version')
    """
    version of the latest consent needed
    """
    status: Optional[bool] = None
    """
    indicates the current status of user consent
    """
    version: Optional[str] = None
    """
    version of the consent data
    """


class Genai(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    dc_consent: Optional[DcConsent] = None
    """
    provides essential information about user consent
    """


class Common(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    acroprefs: Optional[Acroprefs] = None
    """
    user preference to sync his acrobat  preferences
    """
    genai: Optional[Genai] = None
    """
    user preference related to genAI feature
    """
    lastToolUsed: Optional[str] = None
    """
    last tool used by user
    """
    sync_favorite_files: Optional[bool] = None
    """
    users pin to cloud preferences
    """


class Fte(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    launch_count: Optional[float] = 0
    welcome_dialog_dismissed: Optional[bool] = False


class Dcweb(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    fte: Optional[Fte] = None
    """
    First Time Experience Tracking
    """


class Fillsign(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    ac_s: Optional[Literal[0, 1]] = 1
    """
    user  preference for auto complete suggestions
    """
    disableFlattenOnSaveDialog: Optional[bool] = False
    """
    user preference for showing warning for flatten on save
    """


class RecentAssets(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    since: Optional[
        constr(
            pattern=r'([0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}Z?|\${systemtime_rfc3339})'
        )
    ] = None
    """
    The last time the users recent assets list was cleared, represented in UTC formatted to RFC3339. Clients can also pass a special value `${systemtime_rfc3339}` which will use the current time. If recents have not been cleared `since` may be missing.
    """


class Model(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    acrobat: Optional[Dict[str, Any]] = None
    """
    DC Acrobat Preferences shared across different machines
    """
    common: Optional[Common] = None
    """
    DC Common Preferences across clients
    """
    dcweb: Optional[Dcweb] = None
    """
    DC Web common preferences
    """
    fillsign: Optional[Fillsign] = None
    """
    DC Fillsign Preferences across clients
    """
    recent_assets: Optional[RecentAssets] = None
    """
    Last time recent assets was cleared
    """
    recent_assets_timestamp: Optional[
        constr(
            pattern=r'([0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}Z?|^$|\${systemtime_rfc3339})'
        )
    ] = ''
    """
    The last time the users recent assets list was cleared, represented in UTC formatted to RFC3339. If the value is an empty string recent assets may not have been set yet. Clients can pass a special value `${systemtime_rfc3339}` which will use the current time or an empty string to clear the recent assets. Example: 2018-01-01T12:00:00Z
    """
