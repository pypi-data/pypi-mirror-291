# generated by datamodel-codegen:
#   filename:  authorize_client_verb_v1.json

from __future__ import annotations

from typing import Literal, Optional

from pydantic import BaseModel, ConfigDict, constr


class Model(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    domain: Optional[
        constr(
            pattern=r'(?:[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?\\.)+[a-z0-9][a-z0-9-]{0,61}[a-z0-9]'
        )
    ] = None
    """
    Domain of the client. Incase origin header is not present, domain from request body is picked. If domain is not available then error is thrown.
    """
    intent: Literal[
        'crop-pages',
        'number-pages',
        'organize-pdf',
        'delete-pages',
        'extract-pages',
        'insert-pdf',
        'reorder-pages',
        'rotate-pages',
        'combine-pdf',
    ]
    """
    The client side verb for which the limits need to be checked and consumed limits if user is entitled to perform the operation.
    """
    nonce: str
    """
    128 bit random value
    """
