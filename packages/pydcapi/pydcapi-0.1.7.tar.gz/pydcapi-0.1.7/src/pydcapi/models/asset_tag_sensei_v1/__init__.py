# generated by datamodel-codegen:
#   filename:  asset_tag_sensei_v1.json

from __future__ import annotations

from typing import Any, Dict, List, Optional

from pydantic import BaseModel, ConfigDict, Field


class ClassificationEntry(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    field_comment: Optional[str] = Field(None, alias='_comment')
    class_label: Optional[str] = None
    score: Optional[float] = None


class ClassificationItem(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    classification_entries: Optional[List[ClassificationEntry]] = None


class CoordListItem(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    x: Optional[float] = None
    y: Optional[float] = None


class Polygon(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    coordList: Optional[List[CoordListItem]] = None


class Location(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    polygon: Optional[Polygon] = None


class MetaInfo(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    page_number: Optional[float] = None
    type: Optional[str] = None


class ResponseItem(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    field_comment: Optional[str] = Field(None, alias='_comment')
    classification: Optional[List[ClassificationItem]] = None
    location: Optional[Location] = None
    meta_info: Optional[MetaInfo] = None


class Result(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    response: Optional[List[ResponseItem]] = None
    response_type: Optional[str] = None
    """
    ANNOTATION
    """


class CasResponse(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    analyzer_id: Optional[str] = None
    """
    Unique service ID, also known as Analyzer ID
    """
    result: Optional[Result] = None
    status: Optional[int] = None
    """
    Status code for the response
    """


class Model(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    cas_responses: Optional[List[CasResponse]] = None
    content_id: Optional[str] = None
    """
    A string that identifies the request; if the request included the content_id field, the response will have that value as well.  Otherwise, it will be the URL or file name of the input image
    """
    error: Optional[List[Dict[str, Any]]] = None
    status: Optional[int] = None
    """
    HTTP response status code
    """
