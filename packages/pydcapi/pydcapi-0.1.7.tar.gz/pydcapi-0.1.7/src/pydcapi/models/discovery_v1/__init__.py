# generated by datamodel-codegen:
#   filename:  discovery_v1.json

from __future__ import annotations

from typing import Any, Dict, List, Literal, Optional

from pydantic import BaseModel, ConfigDict


class FormDataParameter(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    content_type: Optional[Dict[str, str]] = None
    """
    Map of different versions of the content type response
    """
    description: Optional[str] = None
    """
    Parameter description
    """
    name: str
    """
    Parameter name
    """
    type: Literal['string', 'number', 'boolean', 'integer', 'array', 'file', 'object']


class ResourceParameter(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    default: Optional[str] = None
    """
    The default value of the parameter
    """
    description: Optional[str] = None
    """
    URI pointing to a resource
    """
    name: str
    """
    Substitution name in the URI template
    """
    required: Optional[bool] = False
    type: Literal['string']


class UriParameter(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    default: Optional[Any] = None
    """
    The default value of the parameter
    """
    description: Optional[str] = None
    """
    Parameter description
    """
    enum: Optional[List[str]] = None
    name: str
    """
    Parameter name
    """
    type: Literal['string', 'number', 'boolean', 'integer', 'array', 'file', 'object']


class Resources(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    accept: Optional[Dict[str, str]] = None
    """
    Map of different versions of the accept content
    """
    authentication: List[Literal['auth_header_primary', 'ticket', 'unauthenticated', 'auth_service_token']]
    content_type: Optional[Dict[str, str]] = None
    """
    Map of different versions of the content type response
    """
    form_data_parameters: Optional[List[FormDataParameter]] = None
    """
    List of the various allowable form data parameters
    """
    http_method: Literal['GET', 'PUT', 'POST', 'PATCH', 'DELETE', 'HEAD']
    """
    The HTTP method used for this call
    """
    resource_parameter: Optional[ResourceParameter] = None
    """
    If this is method is on an individual resources, the resource_parameter identifies the URI template parameter to substitute
    """
    uri: str
    """
    [URI template](https://tools.ietf.org/html/rfc6570) for this call.  Aplications must use a template library to expand any path or query parameters.
    """
    uri_parameters: Optional[List[UriParameter]] = None
    """
    If there are parameters in the URI path or in the query string, this identifies all the required variables.
    """


class Templates(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    ans_uri: Optional[str] = None
    asset_uri: Optional[str] = None
    commenting_uri: Optional[str] = None
    folder_uri: Optional[str] = None
    review_uri: Optional[str] = None
    search_uri: Optional[str] = None
    search_uri_primary: Optional[str] = None
    search_uri_secondary: Optional[str] = None
    search_uri_v2: Optional[str] = None


class Model(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    expiry: int
    """
    Unix timestamp (UTC) which indicates the expiration date of the current URLs. Users of DCAPI are expected to refresh their URLs before this expiration. Once expired, URLS will return 404 errors.
    """
    resources: Dict[str, Dict[str, Resources]]
    """
    All the resource objects in this API
    """
    templates: Optional[Templates] = None
    """
    URI templates to convert ids to uris in client code.
    """
    user_uri: Optional[str] = None
    """
    The base URI to use for queries to retrieve user account information for the current authenticated user.
    """
