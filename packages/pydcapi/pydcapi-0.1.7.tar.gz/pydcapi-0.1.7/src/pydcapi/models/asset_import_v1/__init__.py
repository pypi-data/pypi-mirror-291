# generated by datamodel-codegen:
#   filename:  asset_import_v1.json

from __future__ import annotations

from typing import Literal, Optional

from pydantic import AnyUrl, BaseModel, ConfigDict, constr


class AssetData(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    name: Optional[constr(min_length=1)] = None
    """
    The name for the asset. The preferred way of specifying the filename, because the encoding can be specified as utf-8 for the options part to ensure that names that aren't strict ascii are properly handled. If not present the name is taken from the filename in the Content-Disposition header of the file part.
    """
    parent_uri: Optional[AnyUrl] = None
    """
    The uri of folder to put the asset in.  This parameter is relevant only for permanent assets.
    """
    persistence: Optional[Literal['transient', 'permanent']] = 'transient'
    """
    Asset storage aspect as short-term transient vs. long-term permanent.
    """


class ExternalAssetData(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    access_token: constr(min_length=1)
    """
    External token for 3rd party.
    """
    asset: constr(min_length=1)
    """
    External asset identifier.
    """
    cloud_type: Literal['DROPBOX', 'ONEDRIVE', 'GDRIVE', 'BOX']
    """
    External cloud type identifier for 3rd party.
    """
    path_type: Literal['ID', 'FILE_PATH', 'URI']
    """
    External asset identifier type.
    """


class Model(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    asset_data: Optional[AssetData] = None
    """
    Set of properties that are applicable for asset data.
    """
    external_asset_data: ExternalAssetData
    """
    Set of properties that are applicable for external asset data.
    """
