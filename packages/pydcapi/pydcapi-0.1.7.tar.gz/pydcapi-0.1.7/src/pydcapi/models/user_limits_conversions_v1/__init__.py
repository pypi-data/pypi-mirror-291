# generated by datamodel-codegen:
#   filename:  user_limits_conversions_v1.json

from __future__ import annotations

from pydantic import BaseModel, ConfigDict


class CombinePdfConversions(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    remaining: int


class CombinePdfDocuments(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    limit: int


class CombinePdfMaxFileSize(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    limit: int


class CreatePdfConversions(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    remaining: int


class CreatePdfMaxFileSize(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    limit: int


class EditPdfMaxFileSize(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    limit: int


class EditPdfOps(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    remaining: int


class ExportPdfConversions(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    remaining: int


class ExportPdfMaxFileSize(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    limit: int


class OcrPdfConversions(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    remaining: int


class OcrPdfMaxFileSize(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    limit: int


class OptimizePdfMaxFileSize(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    limit: int


class OptimizePdfOps(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    remaining: int


class OrganizePdfConversions(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    remaining: int


class OrganizePdfDocuments(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    limit: int


class OrganizePdfMaxFileSize(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    limit: int


class PasswordEncryptMaxFileSize(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    limit: int


class PasswordEncryptOps(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    remaining: int


class SplitPdfConversions(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    remaining: int


class SplitPdfMaxFileSize(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    limit: int


class SplitPdfMaxSplitPoints(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    limit: int


class Model(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    combine_pdf_conversions: CombinePdfConversions
    """
    Number of combine operations that user is allowed to do
    """
    combine_pdf_documents: CombinePdfDocuments
    """
    Maximum number of files that may be combined in one CombinePDF operation
    """
    combine_pdf_max_file_size: CombinePdfMaxFileSize
    """
    Maximum size (in kilobytes) of a file that can be accepted by CombinePDF
    """
    create_pdf_conversions: CreatePdfConversions
    """
    Number of documents that can be converted to PDF
    """
    create_pdf_max_file_size: CreatePdfMaxFileSize
    """
    Maximum size (in kilobytes) of a file that can be converted by CreatePDF
    """
    edit_pdf_max_file_size: EditPdfMaxFileSize
    """
    Maximum size (in kilobytes) of a PDF that can be edited
    """
    edit_pdf_ops: EditPdfOps
    """
    Number of PDF documents that can be edited
    """
    export_pdf_conversions: ExportPdfConversions
    """
    Number of documents that can be exported from PDF
    """
    export_pdf_max_file_size: ExportPdfMaxFileSize
    """
    Maximum size (in kilobytes) of a file that can be exported by ExportPDF
    """
    ocr_pdf_conversions: OcrPdfConversions
    """
    Number of PDF documents that can have an OCR operation applied
    """
    ocr_pdf_max_file_size: OcrPdfMaxFileSize
    """
    Maximum size (in kilobytes) of a PDF that can be accepted for OCR
    """
    optimize_pdf_max_file_size: OptimizePdfMaxFileSize
    """
    Maximum size (in kilobytes) of a PDF that can be accepted for optimization
    """
    optimize_pdf_ops: OptimizePdfOps
    """
    Number of PDF documents that can be optimized
    """
    organize_pdf_conversions: OrganizePdfConversions
    """
    Number of organize operations that user is allowed to do
    """
    organize_pdf_documents: OrganizePdfDocuments
    """
    Maximum number of files that may be combined in one organize operation
    """
    organize_pdf_max_file_size: OrganizePdfMaxFileSize
    """
    Maximum size (in kilobytes) of a file that can be accepted by organize
    """
    password_encrypt_max_file_size: PasswordEncryptMaxFileSize
    """
    Maximum size (in kilobytes) of a PDF that can be accepted for password encryption
    """
    password_encrypt_ops: PasswordEncryptOps
    """
    Number of PDF documents that can be password encrypted
    """
    split_pdf_conversions: SplitPdfConversions
    """
    Number of PDF documents that can be splitted
    """
    split_pdf_max_file_size: SplitPdfMaxFileSize
    """
    Maximum size (in kilobytes) of a PDF that can be splitted
    """
    split_pdf_max_split_points: SplitPdfMaxSplitPoints
    """
    Maximum number of split points in input PDF file that will be allowed in one SplitPDF operation
    """
