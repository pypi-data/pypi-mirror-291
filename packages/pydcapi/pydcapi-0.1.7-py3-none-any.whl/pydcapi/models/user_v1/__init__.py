# generated by datamodel-codegen:
#   filename:  user_v1.json

from __future__ import annotations

from typing import Any, Dict, List, Literal, Optional

from pydantic import BaseModel, ConfigDict, Field


class Identity(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    analytics_plan_code: Optional[str] = None
    """
    An account description to include with analytics events.
    """
    category: Literal['adobeid', 'enterprise', 'federated', 'business']
    """
    An enum indicating the type of account. One of: "adobeid" (type 1), "enterprise" (type 2) or "federated" (type 3) or "business" (type 2e).
    """
    country_code: str
    """
    The country associated with this user.
    """
    display_name: str
    """
    The user's full name.
    """
    email: str
    """
    Email address registered with this user.
    """
    first_name: str
    """
    A first name associated with this user.
    """
    first_time: Dict[str, Any]
    """
    A map of first-time indicators. e.g. dex_web_app. In the case of dex_web_app, this value will be true if they have never visited cloud.acrobat.com.
    """
    language: str
    """
    The language chosen for communication with this user.
    """
    last_name: str
    """
    A last name / family name associated with this user.
    """
    mrkt_perm_email: bool
    """
    If true, the user has chosen to accept marketing material vie e-mail.
    """
    user_id: str
    """
    The id for this user.
    """
    user_uri: str
    """
    The URI used to access this user.
    """


class LimitsAcrobat(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    acrobat_pro: bool
    """
    Indicates whether the user is entitled to download/install Acrobat Pro.
    """
    acrobat_std: bool
    """
    Indicates whether the user is entitled to download/install Acrobat Standard.
    """


class CombinePdfConversions(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    remaining: int


class CombinePdfDocuments(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    limit: int


class CombinePdfMaxFileSize(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    limit: int


class CreatePdfConversions(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    remaining: int


class CreatePdfMaxFileSize(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    limit: int


class EditPdfMaxFileSize(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    limit: int


class EditPdfOps(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    remaining: int


class ExportPdfConversions(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    remaining: int


class ExportPdfMaxFileSize(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    limit: int


class OcrPdfConversions(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    remaining: int


class OcrPdfMaxFileSize(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    limit: int


class OptimizePdfMaxFileSize(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    limit: int


class OptimizePdfOps(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    remaining: int


class OrganizePdfConversions(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    remaining: int


class OrganizePdfDocuments(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    limit: int


class OrganizePdfMaxFileSize(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    limit: int


class PasswordEncryptMaxFileSize(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    limit: int


class PasswordEncryptOps(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    remaining: int


class SplitPdfConversions(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    remaining: int


class SplitPdfMaxFileSize(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    limit: int


class SplitPdfMaxSplitPoints(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    limit: int


class LimitsConversions(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    combine_pdf_conversions: CombinePdfConversions
    """
    Number of combine operations that user is allowed to do
    """
    combine_pdf_documents: CombinePdfDocuments
    """
    Maximum number of files that may be combined in one CombinePDF operation
    """
    combine_pdf_max_file_size: CombinePdfMaxFileSize
    """
    Maximum size (in kilobytes) of a file that can be accepted by CombinePDF
    """
    create_pdf_conversions: CreatePdfConversions
    """
    Number of documents that can be converted to PDF
    """
    create_pdf_max_file_size: CreatePdfMaxFileSize
    """
    Maximum size (in kilobytes) of a file that can be converted by CreatePDF
    """
    edit_pdf_max_file_size: EditPdfMaxFileSize
    """
    Maximum size (in kilobytes) of a PDF that can be edited
    """
    edit_pdf_ops: EditPdfOps
    """
    Number of PDF documents that can be edited
    """
    export_pdf_conversions: ExportPdfConversions
    """
    Number of documents that can be exported from PDF
    """
    export_pdf_max_file_size: ExportPdfMaxFileSize
    """
    Maximum size (in kilobytes) of a file that can be exported by ExportPDF
    """
    ocr_pdf_conversions: OcrPdfConversions
    """
    Number of PDF documents that can have an OCR operation applied
    """
    ocr_pdf_max_file_size: OcrPdfMaxFileSize
    """
    Maximum size (in kilobytes) of a PDF that can be accepted for OCR
    """
    optimize_pdf_max_file_size: OptimizePdfMaxFileSize
    """
    Maximum size (in kilobytes) of a PDF that can be accepted for optimization
    """
    optimize_pdf_ops: OptimizePdfOps
    """
    Number of PDF documents that can be optimized
    """
    organize_pdf_conversions: OrganizePdfConversions
    """
    Number of organize operations that user is allowed to do
    """
    organize_pdf_documents: OrganizePdfDocuments
    """
    Maximum number of files that may be combined in one organize operation
    """
    organize_pdf_max_file_size: OrganizePdfMaxFileSize
    """
    Maximum size (in kilobytes) of a file that can be accepted by organize
    """
    password_encrypt_max_file_size: PasswordEncryptMaxFileSize
    """
    Maximum size (in kilobytes) of a PDF that can be accepted for password encryption
    """
    password_encrypt_ops: PasswordEncryptOps
    """
    Number of PDF documents that can be password encrypted
    """
    split_pdf_conversions: SplitPdfConversions
    """
    Number of PDF documents that can be splitted
    """
    split_pdf_max_file_size: SplitPdfMaxFileSize
    """
    Maximum size (in kilobytes) of a PDF that can be splitted
    """
    split_pdf_max_split_points: SplitPdfMaxSplitPoints
    """
    Maximum number of split points in input PDF file that will be allowed in one SplitPDF operation
    """


class LimitsEsign(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    esign_access: Literal[
        'no_access', 'read_only', 'pro', 'team', 'enterprise', 'global'
    ]
    """
     * `no_access` - User does not have access to Echosign. This represents a new user to Echosign.
    * `read_only` - User can read his contracts but cannot use any paid functionality like sending contracts. This represents a user who had Echosign at some point but has cancelled his subscription or allowed it to expire.
    * `pro` - User has individual offering with no team management features.
    * `team` - (tentative, pending review) User is part of a team where an admin can do basic customizations like branding.
    * `enterprise` - User has extended team offering that enables creation of groups and allows the admin to configure an extensive list of settings per group.
    * `global` - User has the most advanced team offering and provides access to advanced services like customized workflows.
    """
    legal_templates_access: bool
    """
     *  `true` - The user can create customisable legal agreements.
    *  `false` - The user does not have access to create customisable legal agreements.
    """


class FileFormats(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    analytic_type: str
    mime_type: str


class LimitsFillsign(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    file_formats: List[Dict[str, FileFormats]] = Field(..., min_length=1)
    """
    List of supported file types that can be used to create a form
    """
    max_file_size: int
    """
    Maximum allowed file size in bytes that can be used to create a form
    """
    max_num_of_fields: int
    """
    Maximum allowed number of fields per page
    """
    max_num_of_pages: int
    """
    Maximum allowed number of pages in PDF that can be used to create a form
    """


class LimitsPdfServices(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    access: bool
    """
    If false, then the user does not have access to any PDF services. If true, then the user has access to some set of PDF services. Use other limits APIs to confirm which specific services.  e.g. /limits/conversions
    """


class ReviewCount(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    remaining: int


class LimitsReview(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    review_count: ReviewCount
    """
    A value of -1 Indicates that the user has unlimited access. A value of 0 Indicates that the user has no access.
    """


class LimitsSend(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    can_custom_brand: bool
    """
    Users who have purchased a subscription to the service can add custom branding to the shared files recipients page.
    """
    can_send_av: bool
    """
    Users who have purchased a subscription to the service can send audio or video files to recipients.<br/>If this limit is false, a parcel created that includes audio or video files will fail with an error from the API request.
    """
    can_send_to_individuals: bool
    """
    Users who have purchased a subscription to the service can have custom e-mails sent to recipients. Free users can generate only a single public url that they can paste into an e-mail or post on discussion boards.<br/>If this limit is `false`, a parcel created that includes recipients other than the constant `PARCEL_PUBLIC_SHARING` will result in an error from the API request.
    """
    max_daily_send: float
    """
    The maximum number of emails the user can send in a day through the Send & Track service. This is based on the user's subscription and will initially be set to 50 for free users and 2500 for paid users. This setting is intended to replace the can_send_to_individuals setting, which will eventually be removed.
    """
    max_send_recipients: float
    """
    The maximum number of recipients that can be added to an individual parcel. This is based on the user's subscription and will initially be set to 10 for free users and 250 for paid users.
    """


class LimitsStorageDocumentCloud(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    storage_quota: float
    """
    The user storage quota in GB.
    """
    storage_remaining: float
    """
    Space remaining in the user quota in GB (storage_quota - storage_used).
    """
    storage_slop: float
    """
    The user storage slop in GB.
    """
    storage_used: float
    """
    Storage charged against the user quota in GB.
    """


class Configuration(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    max_file_size: Optional[int] = None
    """
    Maximum file size supported by the operation, if applicable
    """
    max_number_files: Optional[int] = None
    """
    Maximum number of files supported by the operation, if applicable
    """


class QuotaDetails(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    frequency: Optional[int] = None
    """
    the frequency at which quota refreshes. Value will be -1 when frequency is not applicable, like when user has unlimited transactions.
    """
    next_available: Optional[int] = None
    """
    tells in seconds when next transactions will become available. Value will be -1 if transactions are still remaining for the the user.
    """


class Limits(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    quota_details: Optional[QuotaDetails] = None
    """
    Adjacent to remaining, represents quota details including next available and applicable frequency per verb, operation level or uber level.
    """
    remaining: Optional[int] = None
    """
    tells how many transactions are remaining for the verb. 0 means none remaining, positive integer tells the count that are remaining, -1 means unlimited transactions remaining.
    """


class CombinePdf(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    configuration: Optional[Configuration] = None
    """
    various configurations applicable to relevant tile for the user. For example, the max_file_size field which signifies the maximum file size that is support for this tile/pdf operation. More fields wrt operation configuration can be added here as and when needed.
    """
    limits: Optional[Limits] = None
    """
    specifies the applicable transactions details for the user.
    """


class Configuration1(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    max_file_size: Optional[int] = None
    """
    Maximum file size supported by the operation, if applicable
    """


class Limits1(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    quota_details: Optional[QuotaDetails] = None
    """
    Adjacent to remaining, represents quota details including next available and applicable frequency per verb, operation level or uber level.
    """
    remaining: Optional[int] = None
    """
    tells how many transactions are remaining for the verb. 0 means none remaining, positive integer tells the count that are remaining, -1 means unlimited transactions remaining.
    """


class CompressPdf(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    configuration: Optional[Configuration1] = None
    """
    various configurations applicable to relevant tile for the user. For example, the max_file_size field which signifies the maximum file size that is support for this tile/pdf operation. More fields wrt operation configuration can be added here as and when needed.
    """
    limits: Optional[Limits1] = None
    """
    specifies the applicable transactions details for the user.
    """


class Limits2(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    quota_details: Optional[QuotaDetails] = None
    """
    Adjacent to remaining, represents quota details including next available and applicable frequency per verb, operation level or uber level.
    """
    remaining: Optional[int] = None
    """
    tells how many transactions are remaining for the verb. 0 means none remaining, positive integer tells the count that are remaining, -1 means unlimited transactions remaining.
    """


class Createpdf(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    configuration: Optional[Configuration1] = None
    """
    various configurations applicable to relevant tile for the user. For example, the max_file_size field which signifies the maximum file size that is support for this tile/pdf operation. More fields wrt operation configuration can be added here as and when needed.
    """
    limits: Optional[Limits2] = None
    """
    specifies the applicable transactions details for the user.
    """


class Limits3(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    quota_details: Optional[QuotaDetails] = None
    """
    Adjacent to remaining, represents quota details including next available and applicable frequency per verb, operation level or uber level.
    """
    remaining: Optional[int] = None
    """
    tells how many transactions are remaining for the verb. 0 means none remaining, positive integer tells the count that are remaining, -1 means unlimited transactions remaining.
    """


class CropPages(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    configuration: Optional[Configuration1] = None
    """
    various configurations applicable to relevant tile for the user. For example, the max_file_size field which signifies the maximum file size that is support for this tile/pdf operation. More fields wrt operation configuration can be added here as and when needed.
    """
    limits: Optional[Limits3] = None
    """
    specifies the applicable transactions details for the user.
    """


class Configuration4(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    max_file_size: Optional[int] = None
    """
    Maximum file size supported by the operation, if applicable
    """
    max_number_files: Optional[int] = None
    """
    Maximum number of files supported by the operation, if applicable
    """


class Limits4(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    quota_details: Optional[QuotaDetails] = None
    """
    Adjacent to remaining, represents quota details including next available and applicable frequency per verb, operation level or uber level.
    """
    remaining: Optional[int] = None
    """
    tells how many transactions are remaining for the verb. 0 means none remaining, positive integer tells the count that are remaining, -1 means unlimited transactions remaining.
    """


class DeletePages(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    configuration: Optional[Configuration4] = None
    """
    various configurations applicable to relevant tile for the user. For example, the max_file_size field which signifies the maximum file size that is support for this tile/pdf operation. More fields wrt operation configuration can be added here as and when needed.
    """
    limits: Optional[Limits4] = None
    """
    specifies the applicable transactions details for the user.
    """


class Configuration5(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    max_file_size: Optional[int] = None
    """
    Maximum file size supported by the operation, if applicable
    """


class Limits5(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    quota_details: Optional[QuotaDetails] = None
    """
    Adjacent to remaining, represents quota details including next available and applicable frequency per verb, operation level or uber level.
    """
    remaining: Optional[int] = None
    """
    tells how many transactions are remaining for the verb. 0 means none remaining, positive integer tells the count that are remaining, -1 means unlimited transactions remaining.
    """


class EditPdf(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    configuration: Optional[Configuration5] = None
    """
    various configurations applicable to relevant tile for the user. For example, the max_file_size field which signifies the maximum file size that is support for this tile/pdf operation. More fields wrt operation configuration can be added here as and when needed.
    """
    limits: Optional[Limits5] = None
    """
    specifies the applicable transactions details for the user.
    """


class Limits6(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    quota_details: Optional[QuotaDetails] = None
    """
    Adjacent to remaining, represents quota details including next available and applicable frequency per verb, operation level or uber level.
    """
    remaining: Optional[int] = None
    """
    tells how many transactions are remaining for the verb. 0 means none remaining, positive integer tells the count that are remaining, -1 means unlimited transactions remaining.
    """


class ExcelToPdf(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    configuration: Optional[Configuration5] = None
    """
    various configurations applicable to relevant tile for the user. For example, the max_file_size field which signifies the maximum file size that is support for this tile/pdf operation. More fields wrt operation configuration can be added here as and when needed.
    """
    limits: Optional[Limits6] = None
    """
    specifies the applicable transactions details for the user.
    """


class Limits7(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    quota_details: Optional[QuotaDetails] = None
    """
    Adjacent to remaining, represents quota details including next available and applicable frequency per verb, operation level or uber level.
    """
    remaining: Optional[int] = None
    """
    tells how many transactions are remaining for the verb. 0 means none remaining, positive integer tells the count that are remaining, -1 means unlimited transactions remaining.
    """


class ExportPdf(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    configuration: Optional[Configuration5] = None
    """
    various configurations applicable to relevant tile for the user. For example, the max_file_size field which signifies the maximum file size that is support for this tile/pdf operation. More fields wrt operation configuration can be added here as and when needed.
    """
    limits: Optional[Limits7] = None
    """
    specifies the applicable transactions details for the user.
    """


class Configuration8(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    max_file_size: Optional[int] = None
    """
    Maximum file size supported by the operation, if applicable
    """
    max_number_files: Optional[int] = None
    """
    Maximum number of files supported by the operation, if applicable
    """


class Limits8(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    quota_details: Optional[QuotaDetails] = None
    """
    Adjacent to remaining, represents quota details including next available and applicable frequency per verb, operation level or uber level.
    """
    remaining: Optional[int] = None
    """
    tells how many transactions are remaining for the verb. 0 means none remaining, positive integer tells the count that are remaining, -1 means unlimited transactions remaining.
    """


class ExtractPages(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    configuration: Optional[Configuration8] = None
    """
    various configurations applicable to relevant tile for the user. For example, the max_file_size field which signifies the maximum file size that is support for this tile/pdf operation. More fields wrt operation configuration can be added here as and when needed.
    """
    limits: Optional[Limits8] = None
    """
    specifies the applicable transactions details for the user.
    """


class Configuration9(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    max_file_size: Optional[int] = None
    """
    Maximum file size supported by the operation, if applicable
    """


class Limits9(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    quota_details: Optional[QuotaDetails] = None
    """
    Adjacent to remaining, represents quota details including next available and applicable frequency per verb, operation level or uber level.
    """
    remaining: Optional[int] = None
    """
    tells how many transactions are remaining for the verb. 0 means none remaining, positive integer tells the count that are remaining, -1 means unlimited transactions remaining.
    """


class HtmlToPdf(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    configuration: Optional[Configuration9] = None
    """
    various configurations applicable to relevant tile for the user. For example, the max_file_size field which signifies the maximum file size that is support for this tile/pdf operation. More fields wrt operation configuration can be added here as and when needed.
    """
    limits: Optional[Limits9] = None
    """
    specifies the applicable transactions details for the user.
    """


class Configuration10(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    max_file_size: Optional[int] = None
    """
    Maximum file size supported by the operation, if applicable
    """
    max_number_files: Optional[int] = None
    """
    Maximum number of files supported by the operation, if applicable
    """


class Limits10(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    quota_details: Optional[QuotaDetails] = None
    """
    Adjacent to remaining, represents quota details including next available and applicable frequency per verb, operation level or uber level.
    """
    remaining: Optional[int] = None
    """
    tells how many transactions are remaining for the verb. 0 means none remaining, positive integer tells the count that are remaining, -1 means unlimited transactions remaining.
    """


class InsertPdf(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    configuration: Optional[Configuration10] = None
    """
    various configurations applicable to relevant tile for the user. For example, the max_file_size field which signifies the maximum file size that is support for this tile/pdf operation. More fields wrt operation configuration can be added here as and when needed.
    """
    limits: Optional[Limits10] = None
    """
    specifies the applicable transactions details for the user.
    """


class Configuration11(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    max_file_size: Optional[int] = None
    """
    Maximum file size supported by the operation, if applicable
    """


class Limits11(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    quota_details: Optional[QuotaDetails] = None
    """
    Adjacent to remaining, represents quota details including next available and applicable frequency per verb, operation level or uber level.
    """
    remaining: Optional[int] = None
    """
    tells how many transactions are remaining for the verb. 0 means none remaining, positive integer tells the count that are remaining, -1 means unlimited transactions remaining.
    """


class JpgToPdf(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    configuration: Optional[Configuration11] = None
    """
    various configurations applicable to relevant tile for the user. For example, the max_file_size field which signifies the maximum file size that is support for this tile/pdf operation. More fields wrt operation configuration can be added here as and when needed.
    """
    limits: Optional[Limits11] = None
    """
    specifies the applicable transactions details for the user.
    """


class Limits12(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    quota_details: Optional[QuotaDetails] = None
    """
    Adjacent to remaining, represents quota details including next available and applicable frequency per verb, operation level or uber level.
    """
    remaining: Optional[int] = None
    """
    tells how many transactions are remaining for the verb. 0 means none remaining, positive integer tells the count that are remaining, -1 means unlimited transactions remaining.
    """


class NumberPages(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    configuration: Optional[Configuration11] = None
    """
    various configurations applicable to relevant tile for the user. For example, the max_file_size field which signifies the maximum file size that is support for this tile/pdf operation. More fields wrt operation configuration can be added here as and when needed.
    """
    limits: Optional[Limits12] = None
    """
    specifies the applicable transactions details for the user.
    """


class Limits13(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    quota_details: Optional[QuotaDetails] = None
    """
    Adjacent to remaining, represents quota details including next available and applicable frequency per verb, operation level or uber level.
    """
    remaining: Optional[int] = None
    """
    tells how many transactions are remaining for the verb. 0 means none remaining, positive integer tells the count that are remaining, -1 means unlimited transactions remaining.
    """


class OcrPdf(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    configuration: Optional[Configuration11] = None
    """
    various configurations applicable to relevant tile for the user. For example, the max_file_size field which signifies the maximum file size that is support for this tile/pdf operation. More fields wrt operation configuration can be added here as and when needed.
    """
    limits: Optional[Limits13] = None
    """
    specifies the applicable transactions details for the user.
    """


class Configuration14(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    max_file_size: Optional[int] = None
    """
    Maximum file size supported by the operation, if applicable
    """
    max_number_files: Optional[int] = None
    """
    Maximum number of files supported by the operation, if applicable
    """


class Limits14(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    quota_details: Optional[QuotaDetails] = None
    """
    Adjacent to remaining, represents quota details including next available and applicable frequency per verb, operation level or uber level.
    """
    remaining: Optional[int] = None
    """
    tells how many transactions are remaining for the verb. 0 means none remaining, positive integer tells the count that are remaining, -1 means unlimited transactions remaining.
    """


class CombinePdf1(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    configuration: Optional[Configuration14] = None
    """
    various configurations applicable to relevant tile for the user. For example, the max_file_size field which signifies the maximum file size that is support for this tile/pdf operation. More fields wrt operation configuration can be added here as and when needed.
    """
    limits: Optional[Limits14] = None
    """
    specifies the applicable transactions details for the user.
    """


class Configuration15(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    max_file_size: Optional[int] = None
    """
    Maximum file size supported by the operation, if applicable
    """


class Limits15(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    quota_details: Optional[QuotaDetails] = None
    """
    Adjacent to remaining, represents quota details including next available and applicable frequency per verb, operation level or uber level.
    """
    remaining: Optional[int] = None
    """
    tells how many transactions are remaining for the verb. 0 means none remaining, positive integer tells the count that are remaining, -1 means unlimited transactions remaining.
    """


class CompressPdf1(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    configuration: Optional[Configuration15] = None
    """
    various configurations applicable to relevant tile for the user. For example, the max_file_size field which signifies the maximum file size that is support for this tile/pdf operation. More fields wrt operation configuration can be added here as and when needed.
    """
    limits: Optional[Limits15] = None
    """
    specifies the applicable transactions details for the user.
    """


class Limits16(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    quota_details: Optional[QuotaDetails] = None
    """
    Adjacent to remaining, represents quota details including next available and applicable frequency per verb, operation level or uber level.
    """
    remaining: Optional[int] = None
    """
    tells how many transactions are remaining for the verb. 0 means none remaining, positive integer tells the count that are remaining, -1 means unlimited transactions remaining.
    """


class Createpdf1(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    configuration: Optional[Configuration15] = None
    """
    various configurations applicable to relevant tile for the user. For example, the max_file_size field which signifies the maximum file size that is support for this tile/pdf operation. More fields wrt operation configuration can be added here as and when needed.
    """
    limits: Optional[Limits16] = None
    """
    specifies the applicable transactions details for the user.
    """


class Limits17(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    quota_details: Optional[QuotaDetails] = None
    """
    Adjacent to remaining, represents quota details including next available and applicable frequency per verb, operation level or uber level.
    """
    remaining: Optional[int] = None
    """
    tells how many transactions are remaining for the verb. 0 means none remaining, positive integer tells the count that are remaining, -1 means unlimited transactions remaining.
    """


class EditPdf1(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    configuration: Optional[Configuration15] = None
    """
    various configurations applicable to relevant tile for the user. For example, the max_file_size field which signifies the maximum file size that is support for this tile/pdf operation. More fields wrt operation configuration can be added here as and when needed.
    """
    limits: Optional[Limits17] = None
    """
    specifies the applicable transactions details for the user.
    """


class Limits18(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    quota_details: Optional[QuotaDetails] = None
    """
    Adjacent to remaining, represents quota details including next available and applicable frequency per verb, operation level or uber level.
    """
    remaining: Optional[int] = None
    """
    tells how many transactions are remaining for the verb. 0 means none remaining, positive integer tells the count that are remaining, -1 means unlimited transactions remaining.
    """


class ExportPdf1(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    configuration: Optional[Configuration15] = None
    """
    various configurations applicable to relevant tile for the user. For example, the max_file_size field which signifies the maximum file size that is support for this tile/pdf operation. More fields wrt operation configuration can be added here as and when needed.
    """
    limits: Optional[Limits18] = None
    """
    specifies the applicable transactions details for the user.
    """


class Limits19(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    quota_details: Optional[QuotaDetails] = None
    """
    Adjacent to remaining, represents quota details including next available and applicable frequency per verb, operation level or uber level.
    """
    remaining: Optional[int] = None
    """
    tells how many transactions are remaining for the verb. 0 means none remaining, positive integer tells the count that are remaining, -1 means unlimited transactions remaining.
    """


class OcrPdf1(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    configuration: Optional[Configuration15] = None
    """
    various configurations applicable to relevant tile for the user. For example, the max_file_size field which signifies the maximum file size that is support for this tile/pdf operation. More fields wrt operation configuration can be added here as and when needed.
    """
    limits: Optional[Limits19] = None
    """
    specifies the applicable transactions details for the user.
    """


class Configuration20(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    max_file_size: Optional[int] = None
    """
    Maximum file size supported by the operation, if applicable
    """
    max_number_files: Optional[int] = None
    """
    Maximum number of files supported by the operation, if applicable
    """


class Limits20(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    quota_details: Optional[QuotaDetails] = None
    """
    Adjacent to remaining, represents quota details including next available and applicable frequency per verb, operation level or uber level.
    """
    remaining: Optional[int] = None
    """
    tells how many transactions are remaining for the verb. 0 means none remaining, positive integer tells the count that are remaining, -1 means unlimited transactions remaining.
    """


class OrganizePdf(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    configuration: Optional[Configuration20] = None
    """
    various configurations applicable to relevant tile for the user. For example, the max_file_size field which signifies the maximum file size that is support for this tile/pdf operation. More fields wrt operation configuration can be added here as and when needed.
    """
    limits: Optional[Limits20] = None
    """
    specifies the applicable transactions details for the user.
    """


class Configuration21(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    max_file_size: Optional[int] = None
    """
    Maximum file size supported by the operation, if applicable
    """


class Limits21(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    quota_details: Optional[QuotaDetails] = None
    """
    Adjacent to remaining, represents quota details including next available and applicable frequency per verb, operation level or uber level.
    """
    remaining: Optional[int] = None
    """
    tells how many transactions are remaining for the verb. 0 means none remaining, positive integer tells the count that are remaining, -1 means unlimited transactions remaining.
    """


class ProtectPdf(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    configuration: Optional[Configuration21] = None
    """
    various configurations applicable to relevant tile for the user. For example, the max_file_size field which signifies the maximum file size that is support for this tile/pdf operation. More fields wrt operation configuration can be added here as and when needed.
    """
    limits: Optional[Limits21] = None
    """
    specifies the applicable transactions details for the user.
    """


class Operations(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    combine_pdf: Optional[CombinePdf1] = Field(None, alias='combine-pdf')
    """
    Limits in uber response represents the actual limits provided for user at uber level. Client can refer remaining transactions, next_available and frequency fields. Interpretation of remaining, next_available and frequency is similar to verb response.
    """
    compress_pdf: Optional[CompressPdf1] = Field(None, alias='compress-pdf')
    """
    Limits in uber response represents the actual limits provided for user at uber level. Client can refer remaining transactions, next_available and frequency fields. Interpretation of remaining, next_available and frequency is similar to verb response.
    """
    createpdf: Optional[Createpdf1] = None
    """
    Limits in uber response represents the actual limits provided for user at uber level. Client can refer remaining transactions, next_available and frequency fields. Interpretation of remaining, next_available and frequency is similar to verb response.
    """
    edit_pdf: Optional[EditPdf1] = Field(None, alias='edit-pdf')
    """
    Limits in uber response represents the actual limits provided for user at uber level. Client can refer remaining transactions, next_available and frequency fields. Interpretation of remaining, next_available and frequency is similar to verb response.
    """
    export_pdf: Optional[ExportPdf1] = Field(None, alias='export-pdf')
    """
    Limits in uber response represents the actual limits provided for user at uber level. Client can refer remaining transactions, next_available and frequency fields. Interpretation of remaining, next_available and frequency is similar to verb response.
    """
    ocr_pdf: Optional[OcrPdf1] = Field(None, alias='ocr-pdf')
    """
    Limits in uber response represents the actual limits provided for user at uber level. Client can refer remaining transactions, next_available and frequency fields. Interpretation of remaining, next_available and frequency is similar to verb response.
    """
    organize_pdf: Optional[OrganizePdf] = Field(None, alias='organize-pdf')
    """
    Limits in uber response represents the actual limits provided for user at uber level. Client can refer remaining transactions, next_available and frequency fields. Interpretation of remaining, next_available and frequency is similar to verb response.
    """
    protect_pdf: Optional[ProtectPdf] = Field(None, alias='protect-pdf')
    """
    Limits in uber response represents the actual limits provided for user at uber level. Client can refer remaining transactions, next_available and frequency fields. Interpretation of remaining, next_available and frequency is similar to verb response.
    """


class Configuration22(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    max_file_size: Optional[int] = None
    """
    Maximum file size supported by the operation, if applicable
    """
    max_number_files: Optional[int] = None
    """
    Maximum number of files supported by the operation, if applicable
    """


class Limits22(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    quota_details: Optional[QuotaDetails] = None
    """
    Adjacent to remaining, represents quota details including next available and applicable frequency per verb, operation level or uber level.
    """
    remaining: Optional[int] = None
    """
    tells how many transactions are remaining for the verb. 0 means none remaining, positive integer tells the count that are remaining, -1 means unlimited transactions remaining.
    """


class OrganizePdf1(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    configuration: Optional[Configuration22] = None
    """
    various configurations applicable to relevant tile for the user. For example, the max_file_size field which signifies the maximum file size that is support for this tile/pdf operation. More fields wrt operation configuration can be added here as and when needed.
    """
    limits: Optional[Limits22] = None
    """
    specifies the applicable transactions details for the user.
    """


class Configuration23(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    max_file_size: Optional[int] = None
    """
    Maximum file size supported by the operation, if applicable
    """


class Limits23(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    quota_details: Optional[QuotaDetails] = None
    """
    Adjacent to remaining, represents quota details including next available and applicable frequency per verb, operation level or uber level.
    """
    remaining: Optional[int] = None
    """
    tells how many transactions are remaining for the verb. 0 means none remaining, positive integer tells the count that are remaining, -1 means unlimited transactions remaining.
    """


class PdfToExcel(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    configuration: Optional[Configuration23] = None
    """
    various configurations applicable to relevant tile for the user. For example, the max_file_size field which signifies the maximum file size that is support for this tile/pdf operation. More fields wrt operation configuration can be added here as and when needed.
    """
    limits: Optional[Limits23] = None
    """
    specifies the applicable transactions details for the user.
    """


class Limits24(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    quota_details: Optional[QuotaDetails] = None
    """
    Adjacent to remaining, represents quota details including next available and applicable frequency per verb, operation level or uber level.
    """
    remaining: Optional[int] = None
    """
    tells how many transactions are remaining for the verb. 0 means none remaining, positive integer tells the count that are remaining, -1 means unlimited transactions remaining.
    """


class PdfToImage(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    configuration: Optional[Configuration23] = None
    """
    various configurations applicable to relevant tile for the user. For example, the max_file_size field which signifies the maximum file size that is support for this tile/pdf operation. More fields wrt operation configuration can be added here as and when needed.
    """
    limits: Optional[Limits24] = None
    """
    specifies the applicable transactions details for the user.
    """


class Limits25(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    quota_details: Optional[QuotaDetails] = None
    """
    Adjacent to remaining, represents quota details including next available and applicable frequency per verb, operation level or uber level.
    """
    remaining: Optional[int] = None
    """
    tells how many transactions are remaining for the verb. 0 means none remaining, positive integer tells the count that are remaining, -1 means unlimited transactions remaining.
    """


class PdfToPpt(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    configuration: Optional[Configuration23] = None
    """
    various configurations applicable to relevant tile for the user. For example, the max_file_size field which signifies the maximum file size that is support for this tile/pdf operation. More fields wrt operation configuration can be added here as and when needed.
    """
    limits: Optional[Limits25] = None
    """
    specifies the applicable transactions details for the user.
    """


class Limits26(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    quota_details: Optional[QuotaDetails] = None
    """
    Adjacent to remaining, represents quota details including next available and applicable frequency per verb, operation level or uber level.
    """
    remaining: Optional[int] = None
    """
    tells how many transactions are remaining for the verb. 0 means none remaining, positive integer tells the count that are remaining, -1 means unlimited transactions remaining.
    """


class PdfToWord(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    configuration: Optional[Configuration23] = None
    """
    various configurations applicable to relevant tile for the user. For example, the max_file_size field which signifies the maximum file size that is support for this tile/pdf operation. More fields wrt operation configuration can be added here as and when needed.
    """
    limits: Optional[Limits26] = None
    """
    specifies the applicable transactions details for the user.
    """


class Limits27(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    quota_details: Optional[QuotaDetails] = None
    """
    Adjacent to remaining, represents quota details including next available and applicable frequency per verb, operation level or uber level.
    """
    remaining: Optional[int] = None
    """
    tells how many transactions are remaining for the verb. 0 means none remaining, positive integer tells the count that are remaining, -1 means unlimited transactions remaining.
    """


class PptToPdf(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    configuration: Optional[Configuration23] = None
    """
    various configurations applicable to relevant tile for the user. For example, the max_file_size field which signifies the maximum file size that is support for this tile/pdf operation. More fields wrt operation configuration can be added here as and when needed.
    """
    limits: Optional[Limits27] = None
    """
    specifies the applicable transactions details for the user.
    """


class Limits28(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    quota_details: Optional[QuotaDetails] = None
    """
    Adjacent to remaining, represents quota details including next available and applicable frequency per verb, operation level or uber level.
    """
    remaining: Optional[int] = None
    """
    tells how many transactions are remaining for the verb. 0 means none remaining, positive integer tells the count that are remaining, -1 means unlimited transactions remaining.
    """


class ProtectPdf1(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    configuration: Optional[Configuration23] = None
    """
    various configurations applicable to relevant tile for the user. For example, the max_file_size field which signifies the maximum file size that is support for this tile/pdf operation. More fields wrt operation configuration can be added here as and when needed.
    """
    limits: Optional[Limits28] = None
    """
    specifies the applicable transactions details for the user.
    """


class Configuration29(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    max_file_size: Optional[int] = None
    """
    Maximum file size supported by the operation, if applicable
    """
    max_number_files: Optional[int] = None
    """
    Maximum number of files supported by the operation, if applicable
    """


class Limits29(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    quota_details: Optional[QuotaDetails] = None
    """
    Adjacent to remaining, represents quota details including next available and applicable frequency per verb, operation level or uber level.
    """
    remaining: Optional[int] = None
    """
    tells how many transactions are remaining for the verb. 0 means none remaining, positive integer tells the count that are remaining, -1 means unlimited transactions remaining.
    """


class ReorderPages(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    configuration: Optional[Configuration29] = None
    """
    various configurations applicable to relevant tile for the user. For example, the max_file_size field which signifies the maximum file size that is support for this tile/pdf operation. More fields wrt operation configuration can be added here as and when needed.
    """
    limits: Optional[Limits29] = None
    """
    specifies the applicable transactions details for the user.
    """


class Limits30(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    quota_details: Optional[QuotaDetails] = None
    """
    Adjacent to remaining, represents quota details including next available and applicable frequency per verb, operation level or uber level.
    """
    remaining: Optional[int] = None
    """
    tells how many transactions are remaining for the verb. 0 means none remaining, positive integer tells the count that are remaining, -1 means unlimited transactions remaining.
    """


class RotatePages(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    configuration: Optional[Configuration29] = None
    """
    various configurations applicable to relevant tile for the user. For example, the max_file_size field which signifies the maximum file size that is support for this tile/pdf operation. More fields wrt operation configuration can be added here as and when needed.
    """
    limits: Optional[Limits30] = None
    """
    specifies the applicable transactions details for the user.
    """


class Configuration31(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    max_file_size: Optional[int] = None
    """
    Maximum file size supported by the operation, if applicable
    """
    max_split_points: Optional[int] = None
    """
    Maximum number of split points supported by the operation, if applicable
    """


class Limits31(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    quota_details: Optional[QuotaDetails] = None
    """
    Adjacent to remaining, represents quota details including next available and applicable frequency per verb, operation level or uber level.
    """
    remaining: Optional[int] = None
    """
    tells how many transactions are remaining for the verb. 0 means none remaining, positive integer tells the count that are remaining, -1 means unlimited transactions remaining.
    """


class SplitPdf(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    configuration: Optional[Configuration31] = None
    """
    various configurations applicable to relevant tile for the user. For example, the max_file_size field which signifies the maximum file size that is support for this tile/pdf operation. More fields wrt operation configuration can be added here as and when needed.
    """
    limits: Optional[Limits31] = None
    """
    specifies the applicable transactions details for the user.
    """


class Limits32(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    quota_details: Optional[QuotaDetails] = None
    """
    Adjacent to remaining, represents quota details including next available and applicable frequency per verb, operation level or uber level.
    """
    remaining: Optional[int] = None
    """
    tells how many transactions are remaining for the verb. 0 means none remaining, positive integer tells the count that are remaining, -1 means unlimited transactions remaining.
    """


class Uber(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    limits: Optional[Limits32] = None
    """
    specifies the applicable transactions details for the user.
    """


class Configuration32(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    max_file_size: Optional[int] = None
    """
    Maximum file size supported by the operation, if applicable
    """


class Limits33(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    quota_details: Optional[QuotaDetails] = None
    """
    Adjacent to remaining, represents quota details including next available and applicable frequency per verb, operation level or uber level.
    """
    remaining: Optional[int] = None
    """
    tells how many transactions are remaining for the verb. 0 means none remaining, positive integer tells the count that are remaining, -1 means unlimited transactions remaining.
    """


class WordToPdf(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    configuration: Optional[Configuration32] = None
    """
    various configurations applicable to relevant tile for the user. For example, the max_file_size field which signifies the maximum file size that is support for this tile/pdf operation. More fields wrt operation configuration can be added here as and when needed.
    """
    limits: Optional[Limits33] = None
    """
    specifies the applicable transactions details for the user.
    """


class LimitsVerbs(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    combine_pdf: CombinePdf = Field(..., alias='combine-pdf')
    """
    Limits in uber response represents the actual limits provided for user at uber level. Client can refer remaining transactions, next_available and frequency fields. Interpretation of remaining, next_available and frequency is similar to verb response.
    """
    compress_pdf: CompressPdf = Field(..., alias='compress-pdf')
    """
    Limits in uber response represents the actual limits provided for user at uber level. Client can refer remaining transactions, next_available and frequency fields. Interpretation of remaining, next_available and frequency is similar to verb response.
    """
    createpdf: Createpdf
    """
    Limits in uber response represents the actual limits provided for user at uber level. Client can refer remaining transactions, next_available and frequency fields. Interpretation of remaining, next_available and frequency is similar to verb response.
    """
    crop_pages: CropPages = Field(..., alias='crop-pages')
    """
    Limits in uber response represents the actual limits provided for user at uber level. Client can refer remaining transactions, next_available and frequency fields. Interpretation of remaining, next_available and frequency is similar to verb response.
    """
    delete_pages: DeletePages = Field(..., alias='delete-pages')
    """
    Limits in uber response represents the actual limits provided for user at uber level. Client can refer remaining transactions, next_available and frequency fields. Interpretation of remaining, next_available and frequency is similar to verb response.
    """
    edit_pdf: EditPdf = Field(..., alias='edit-pdf')
    """
    Limits in uber response represents the actual limits provided for user at uber level. Client can refer remaining transactions, next_available and frequency fields. Interpretation of remaining, next_available and frequency is similar to verb response.
    """
    excel_to_pdf: ExcelToPdf = Field(..., alias='excel-to-pdf')
    """
    Limits in uber response represents the actual limits provided for user at uber level. Client can refer remaining transactions, next_available and frequency fields. Interpretation of remaining, next_available and frequency is similar to verb response.
    """
    export_pdf: ExportPdf = Field(..., alias='export-pdf')
    """
    Limits in uber response represents the actual limits provided for user at uber level. Client can refer remaining transactions, next_available and frequency fields. Interpretation of remaining, next_available and frequency is similar to verb response.
    """
    extract_pages: ExtractPages = Field(..., alias='extract-pages')
    """
    Limits in uber response represents the actual limits provided for user at uber level. Client can refer remaining transactions, next_available and frequency fields. Interpretation of remaining, next_available and frequency is similar to verb response.
    """
    html_to_pdf: HtmlToPdf = Field(..., alias='html-to-pdf')
    """
    Limits in uber response represents the actual limits provided for user at uber level. Client can refer remaining transactions, next_available and frequency fields. Interpretation of remaining, next_available and frequency is similar to verb response.
    """
    insert_pdf: InsertPdf = Field(..., alias='insert-pdf')
    """
    Limits in uber response represents the actual limits provided for user at uber level. Client can refer remaining transactions, next_available and frequency fields. Interpretation of remaining, next_available and frequency is similar to verb response.
    """
    jpg_to_pdf: JpgToPdf = Field(..., alias='jpg-to-pdf')
    """
    Limits in uber response represents the actual limits provided for user at uber level. Client can refer remaining transactions, next_available and frequency fields. Interpretation of remaining, next_available and frequency is similar to verb response.
    """
    number_pages: NumberPages = Field(..., alias='number-pages')
    """
    Limits in uber response represents the actual limits provided for user at uber level. Client can refer remaining transactions, next_available and frequency fields. Interpretation of remaining, next_available and frequency is similar to verb response.
    """
    ocr_pdf: OcrPdf = Field(..., alias='ocr-pdf')
    """
    Limits in uber response represents the actual limits provided for user at uber level. Client can refer remaining transactions, next_available and frequency fields. Interpretation of remaining, next_available and frequency is similar to verb response.
    """
    operations: Operations
    """
    Operation level response for user, if applicable
    """
    organize_pdf: OrganizePdf1 = Field(..., alias='organize-pdf')
    """
    Limits in uber response represents the actual limits provided for user at uber level. Client can refer remaining transactions, next_available and frequency fields. Interpretation of remaining, next_available and frequency is similar to verb response.
    """
    pdf_to_excel: PdfToExcel = Field(..., alias='pdf-to-excel')
    """
    Limits in uber response represents the actual limits provided for user at uber level. Client can refer remaining transactions, next_available and frequency fields. Interpretation of remaining, next_available and frequency is similar to verb response.
    """
    pdf_to_image: PdfToImage = Field(..., alias='pdf-to-image')
    """
    Limits in uber response represents the actual limits provided for user at uber level. Client can refer remaining transactions, next_available and frequency fields. Interpretation of remaining, next_available and frequency is similar to verb response.
    """
    pdf_to_ppt: PdfToPpt = Field(..., alias='pdf-to-ppt')
    """
    Limits in uber response represents the actual limits provided for user at uber level. Client can refer remaining transactions, next_available and frequency fields. Interpretation of remaining, next_available and frequency is similar to verb response.
    """
    pdf_to_word: PdfToWord = Field(..., alias='pdf-to-word')
    """
    Limits in uber response represents the actual limits provided for user at uber level. Client can refer remaining transactions, next_available and frequency fields. Interpretation of remaining, next_available and frequency is similar to verb response.
    """
    ppt_to_pdf: PptToPdf = Field(..., alias='ppt-to-pdf')
    """
    Limits in uber response represents the actual limits provided for user at uber level. Client can refer remaining transactions, next_available and frequency fields. Interpretation of remaining, next_available and frequency is similar to verb response.
    """
    protect_pdf: ProtectPdf1 = Field(..., alias='protect-pdf')
    """
    Limits in uber response represents the actual limits provided for user at uber level. Client can refer remaining transactions, next_available and frequency fields. Interpretation of remaining, next_available and frequency is similar to verb response.
    """
    reorder_pages: ReorderPages = Field(..., alias='reorder-pages')
    """
    Limits in uber response represents the actual limits provided for user at uber level. Client can refer remaining transactions, next_available and frequency fields. Interpretation of remaining, next_available and frequency is similar to verb response.
    """
    rotate_pages: RotatePages = Field(..., alias='rotate-pages')
    """
    Limits in uber response represents the actual limits provided for user at uber level. Client can refer remaining transactions, next_available and frequency fields. Interpretation of remaining, next_available and frequency is similar to verb response.
    """
    split_pdf: SplitPdf = Field(..., alias='split-pdf')
    """
    Limits in uber response represents the actual limits provided for user at uber level. Client can refer remaining transactions, next_available and frequency fields. Interpretation of remaining, next_available and frequency is similar to verb response.
    """
    uber: Uber
    """
    Limits in uber response represents the actual limits provided for user at uber level. Client can refer remaining transactions, next_available and frequency fields. Interpretation of remaining, next_available and frequency is similar to verb response.
    """
    word_to_pdf: WordToPdf = Field(..., alias='word-to-pdf')
    """
    Limits in uber response represents the actual limits provided for user at uber level. Client can refer remaining transactions, next_available and frequency fields. Interpretation of remaining, next_available and frequency is similar to verb response.
    """


class Acroprefs(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    prefsync_enabled: Optional[bool] = None


class DcConsent(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    latest_version: Optional[str] = Field(None, alias='latest version')
    """
    version of the latest consent needed
    """
    status: Optional[bool] = None
    """
    indicates the current status of user consent
    """
    version: Optional[str] = None
    """
    version of the consent data
    """


class Genai(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    dc_consent: Optional[DcConsent] = None
    """
    provides essential information about user consent
    """


class PrefsCommon(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    acroprefs: Optional[Acroprefs] = None
    """
    user preference to sync his acrobat  preferences
    """
    genai: Optional[Genai] = None
    """
    user preference related to genAI feature
    """
    lastToolUsed: Optional[str] = None
    """
    last tool used by user
    """
    sync_favorite_files: Optional[bool] = None
    """
    users pin to cloud preferences
    """


class Fte(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    launch_count: Optional[float] = 0
    welcome_dialog_dismissed: Optional[bool] = False


class PrefsDcweb(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    fte: Optional[Fte] = None
    """
    First Time Experience Tracking
    """


class AuthorizationRule(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    app_name: str
    """
    Name of the app
    """
    rule_id: str
    """
    Rule id to initiate request access workflow
    """


class RequestAccess(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    application_url: str
    """
    A link to a user experience that invokes the rule.
    """
    authorization_rules: List[AuthorizationRule] = Field(..., min_length=0)
    """
    Auth rules for making the access requests for various apps.
    """
    licenses_available: bool
    """
    If user posses licenses in context of app onboarded on access platform.
    """
    request_access_enabled: bool
    """
    If the org-admin has enabled request access workflow for the users.
    """


class StorageDocumentCloud(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    encryption_key_status: Optional[Literal['enabled', 'disabled']] = None
    """
    An enum indicating shared cloud encryption key status. The value could be either `enabled` or `disabled`.
    """
    region: Optional[Literal['US', 'EU', 'AP']] = None
    """
    an enum indicating region for document cloud data storage. Currently, its value could be one of `US`, `EU`, or `AP`.
    """


class Subscription(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    billing_term: Optional[
        Literal['Monthly', 'AnnualBilledMonthly', 'AnnualBilledAnnually']
    ] = None
    """
    This value will not be available for document cloud offerings sold to team (CCT) and enterprise (CCE) subscriptions.
    """
    biz_source: Optional[str] = None
    """
    The business source associated with this product purchase.
    """
    level: Literal['Free', 'Basic', 'Plus', 'VIP']
    """
    The service level.  All paid products have only a 'Basic' service level.
    """
    name: Literal[
        'CreatePDF',
        'PDFPack',
        'ExportPDF',
        'Files',
        'DCGlobal',
        'DCEnterprise',
        'AcrobatPlus',
        'AcrobatStd',
        'SendNow',
        'FillAndSign',
        'ESign',
    ]
    """
    The subscription name.
    """
    status: Literal['Active', 'Suspended', 'Suspended30', 'Closed', 'Stopped']
    """
    Account status.  Any status other than `Active` indicates that services are not available to this account.
    """
    sub_ref: Optional[str] = None
    """
    A UUID value that allows this product to be correlated to the Adobe store API values. This will be NULL for document cloud offerings sold to team (CCT) and enterprise (CCE) subscriptions as these users are entitled by an admin and do not have subscription record associated with them.
    """
    subscription_params: Optional[Dict[str, Any]] = None
    """
    Map of additional params present for this subscription, if any.
    """


class Subscriptions(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    subscriptions: List[Subscription] = Field(..., min_length=1)


class UpsellItem(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    billing_term: Literal['Monthly', 'AnnualBilledMonthly', 'AnnualBilledAnnually']
    entitlement_name: Literal[
        'can_send_to_individuals',
        'can_send_av',
        'create_pdf_conversions',
        'combine_pdf_conversions',
        'export_pdf_conversions',
        'export_pdf2ppt_conversions',
        'export_pdf2img_conversions',
        'acrobat_pro',
    ]
    """
    Will match `entitlement` parameter if specified.
    """
    mandatory: bool
    """
    'true' if showing the upsell is mandatory and 'false' otherwise. For purchases, there are locations where showing multiple purchase options are mandatory. This flag will be true for those geos.
    """
    purchase_sku: str
    """
    The purchase sku number using which a user could get to the given entitlement. his field is available for both purchase and upgrade as there were use cases where upgrade was invoked with a purchase sku and clients need to translate from a purchase sku to an upgrade sku..
    """
    sitecatalyst_plan_code: str
    """
    This is the string that will be sent to sitecatalyst with the purchase/upgrade event.<br/> -> Refer to the "In-app upgrades" section of the SiteCatalyst Instrumentation - Plan Info wiki to get the analytics name for upgrades<br/> -> Refer to the "<New Plan>" row in the "Anyware cart instrumentation" section of SiteCatalyst Instrumentation - Page Name and Custom Variables to get the analytics name for purchases.
    """
    subscription_name: Literal[
        'CreatePDF',
        'PDFPack',
        'ExportPDF',
        'Files',
        'DCGlobal',
        'DCEnterprise',
        'AcrobatPlus',
        'AcrobatStd',
        'SendNow',
        'FillAndSign',
        'ESign',
    ]
    """
    Additional subscriptions may be added in the future.
    """
    upgrade_sku: str
    """
    The upgrade sku number for this user for the given entitlement. This field is an empty string when upsell_type is purchase.
    """
    upsell_type: Literal['purchase', 'upgrade']
    url: str
    """
    URL which can be used by the client to invoke the upgrade or purchase workflow. Clients already running in the app may need to process the URL to navigate without reloading the app.
    """


class Upsell(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    upsell: List[UpsellItem]


class Model(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    cohorts: Optional[Dict[str, str]] = None
    """
    A json object with key-value pairs corresponding to cohorts and their values assigned to the current user for all the currently active experiments.
    """
    identity: Optional[Identity] = None
    limits_acrobat: Optional[LimitsAcrobat] = Field(None, alias='limits/acrobat')
    limits_conversions: Optional[LimitsConversions] = Field(
        None, alias='limits/conversions'
    )
    limits_esign: Optional[LimitsEsign] = Field(None, alias='limits/esign')
    limits_fillsign: Optional[LimitsFillsign] = Field(None, alias='limits/fillsign')
    limits_pdf_services: Optional[LimitsPdfServices] = Field(
        None, alias='limits/pdf_services'
    )
    limits_review: Optional[LimitsReview] = Field(None, alias='limits/review')
    limits_send: Optional[LimitsSend] = Field(None, alias='limits/send')
    limits_storage_document_cloud: Optional[LimitsStorageDocumentCloud] = Field(
        None, alias='limits/storage_document_cloud'
    )
    limits_verbs: Optional[LimitsVerbs] = Field(None, alias='limits/verbs')
    prefs_common: Optional[PrefsCommon] = Field(None, alias='prefs/common')
    """
    DC Common Preferences across clients
    """
    prefs_dcweb: Optional[PrefsDcweb] = Field(None, alias='prefs/dcweb')
    """
    DC Web common preferences
    """
    request_access: Optional[RequestAccess] = None
    storage_document_cloud: Optional[StorageDocumentCloud] = Field(
        None, alias='storage/document_cloud'
    )
    subscriptions: Optional[Subscriptions] = None
    upsell: Optional[Upsell] = None
