# generated by datamodel-codegen:
#   filename:  pdf_actions_parameters_v1.json

from __future__ import annotations

from typing import List, Literal, Optional

from pydantic import AnyUrl, BaseModel, ConfigDict, Field, constr


class Rotate(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    angle: Literal[90, 180, 270]
    """
    Required for 'rotate' cmd. It specifies the clockwise rotation angle relative to the starting orientation of the page. e.g. if a page is already rotated 90 degrees (landscape), specifying a rotation of 90 degrees will rotate it a further 90 degrees.  The valid rotation angles are: 90, 180, 270.
    """
    pages: Optional[
        constr(pattern=r'^([1-9 ]+[0-9 ]*-?[0-9 ]*)(,[1-9 ]+[0-9 ]*-?[0-9 ]*)*$')
    ] = None
    """
    A page range relative to the input document. See "include".
    """


class PageAction(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    rotate: Optional[Rotate] = None


class Asset(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    asset_uri: AnyUrl
    """
    URI identifying the asset to convert to PDF.
    """
    include: Optional[
        constr(pattern=r'^([1-9 ]+[0-9 ]*-?[0-9 ]*)(,[1-9 ]+[0-9 ]*-?[0-9 ]*)*$')
    ] = None
    """
    A description of the pages to be included. Page numbers are 1-based, comma seperated, and can include spaces (0x20, ignored) and a dash ('-', 0x2D) -- used to denote a range of pages. Note that individual pages may be included more than once -- but with limits.  Any given page range may not result in more than 5 times the number of pages in the source PDF.  If no range is specified, all pages are included: "1-".
    """
    page_actions: Optional[List[PageAction]] = None
    """
    An array of page manipulation operations. Currently only the "rotate" operation is supported.
    """


class Ocr(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    lang: Optional[
        Literal[
            'da-DK',
            'lt-LT',
            'sl-SI',
            'el-GR',
            'ru-RU',
            'en-US',
            'zh-HK',
            'hu-HU',
            'et-EE',
            'pt-BR',
            'uk-UA',
            'nb-NO',
            'pl-PL',
            'lv-LV',
            'fi-FI',
            'ja-JP',
            'es-ES',
            'bg-BG',
            'en-GB',
            'cs-CZ',
            'mt-MT',
            'de-DE',
            'hr-HR',
            'sk-SK',
            'sr-SR',
            'ca-CA',
            'mk-MK',
            'ko-KR',
            'de-CH',
            'nl-NL',
            'zh-CN',
            'sv-SE',
            'it-IT',
            'no-NO',
            'tr-TR',
            'fr-FR',
            'ro-RO',
            'iw-IL',
        ]
    ] = 'en-US'
    """
    The input language to use for OCR
    """


class Params(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    compression_level: Optional[Literal['low', 'medium', 'high', 'advanced']] = None
    """
    Specify the level of compression to reduce the file size of the pdf. Low compression level reduces resolution of the coloured and grayscale images above 250 dpi to 200 dpi. Medium compression level reduces resolution of the coloured and grayscale images above 200 dpi to 144 dpi. High compression level reduces resolution of the coloured and grayscale images above 100 dpi to 72 dpi. Advanced compression level uses JP2K with low quality level to compress color and gray images.
    """


class Optimize(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    compress: Optional[bool] = False
    """
    Reduce the file size of the pdf. Note that the compress action may not be combined with linearize, page_actions or page includes or other pdf_actions.
    """
    linearize: Optional[bool] = True
    """
    Specify whether to optimize the result for fast web viewing.
    """
    params: Optional[Params] = None
    """
    Params for optimizing the pdf.
    """


class PasswordEncrypt(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    content_to_encrypt: Optional[
        Literal['all_content', 'all_content_except_metadata', 'only_embedded_files']
    ] = 'all_content'
    """
    Sets the type of content to be encrypted. If only_embedded_files option is set, it will render any provided access permissions as ineffective.
    """
    encryption_algorithm: Optional[Literal['aes_128', 'aes_256']] = 'aes_128'
    """
    Sets the encryption algorithm. For AES-128 encryption, the password supports LATIN-I characters only. For AES-256 encryption, the password supports Unicode character set.
    """
    password: Optional[constr(max_length=128)] = None
    """
    Password used to control opening of an encrypted PDF document. When this property is included and non-empty, the use of a password (either this one or, if specified, the permissions password) is necessary to open/view the document. If this password is empty or omitted the document can be opened automatically by conforming PDF viewers.
    """
    permissions: Optional[
        List[
            Literal[
                'print_low_quality',
                'print_high_quality',
                'edit_content',
                'edit_fill_and_sign_form_fields',
                'edit_annotations',
                'edit_document_assembly',
                'copy_content',
            ]
        ]
    ] = None
    """
    Permissions to allow printing, editing and content copying in the PDF document. By default, none of the specified actions are permitted. print_high_quality permission includes print_low_quality permission. edit_content permission includes edit_document_assembly and edit_fill_and_sign_form_fields permissions. Permissions settings will only be used in case the permissions_password is set.
    """
    permissions_password: Optional[constr(max_length=128)] = None
    """
    Password used to control permissions in a PDF document. Conforming PDF viewers require this password to change the permissions. This password can also be used to open/view the PDF document.
    """


class RemovePasswordEncryption(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    password: constr(max_length=150)
    """
    Password for removing the security from the PDF document. Document with permission restrictions requires owner password and document with only viewing/opening restriction set requires a user password to remove the security.
    """


class TaggedPdf(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    client_version: Optional[str] = None
    """
    Version(s) of components on the client in the format of \"componentA=<version>,componentB=<version>, ...\"
    """
    compatibility_version: Optional[Literal['0.3', 'latest']] = 'latest'
    """
    Deprecated version parameter.
    """
    format: Optional[
        Literal['fully_tagged_pdf', 'well_tagged_pdf', 'instance_data']
    ] = 'fully_tagged_pdf'
    """
    What format is the output.  \"well_tagged_pdf \" contains structure tags. \"fully_tagged_pdf\" contains additional information for dynamic viewing. \"instance_data\" contains machine learning output to allow clients to construct fully-taggged-pdf.
    """
    qualified_at_client: Optional[bool] = True
    """
    If the client has not qualified this file for conversion, run the qualifier to ensure the likelihood the pdf will successfully convert
    """


class PdfAction(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    ocr: Optional[Ocr] = None
    """
    Perform OCR on the PDF file.  Note that the ocr action may not be combined with page_actions or page includes or other pdf_actions.
    """
    optimize: Optional[Optimize] = None
    """
    Optimize this PDF
    """
    password_encrypt: Optional[PasswordEncrypt] = None
    """
    Encrypts a PDF document using password(s) and permissions.
    """
    remove_password_encryption: Optional[RemovePasswordEncryption] = None
    """
    Use a password to remove all the passwords as well as security and permissions from the PDF document. Note that the remove_password_encryption action may not be combined with page_actions or page includes or other pdf_actions.
    """
    tagged_pdf: Optional[TaggedPdf] = None
    """
    Convert a PDF to tagged PDF file.  Note that the tagged_pdf action may not be combined with page_actions or page includes or other pdf_actions(Feature not supported anymore).
    """


class PrimarySignAsset(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    asset_uri: constr(min_length=1)
    """
    URI identifying the primary sign asset
    """
    copy_asset_metadata: Optional[bool] = False
    """
    Specify if the sign asset metadata (stored as ACP metadata) will be copied to the output asset
    """


class Model(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        frozen=True,
    )
    assets: List[Asset] = Field(..., min_length=1)
    """
    Asset URIs and operations for the final document.  Note that this array may contain a maximum of 12 unique asset URIs. Specifically, the array may contain more than 12 entries, but may not reference more than 12 assets.
    """
    name: constr(min_length=1)
    """
    Name of the new asset. Duplicate asset name behavior can be set by on_dup_policy.
    """
    on_dup_name: Optional[Literal['error', 'auto_rename', 'overwrite']] = [
        'auto_rename'
    ]
    """
    How to handle a duplicate name conflict in target collection for output file.
    """
    parent_uri: Optional[AnyUrl] = None
    """
    The uri of folder to put the asset in.  This parameter is relevant only for permanent assets.  If not specified, the default depends on the operation.  Conversions will be placed in the same folder as the source asset.
    """
    pdf_actions: Optional[List[PdfAction]] = Field(None, min_length=1)
    """
    A set of actions to apply to the output PDF.
    """
    persistence: Optional[Literal['transient', 'permanent']] = 'transient'
    """
    Asset storage aspect as short-term transient vs. long-term permanent. "transient" creates an asset that will be available for several hours before being garbage collected and deleted.  For operations that convert and download immediately, "transient" is the appropriate choice
    """
    primary_sign_asset: Optional[PrimarySignAsset] = None
    """
    Specify the primary sign asset of this operation. Should only be specified if the primary asset is a Sign agreement draft. Also, this parameter is applicable only if there is a primary document (such as Organize under Edit, Optimize or Protected PDF) The primary Sign agreement draft will serve as the baseline to align and carry over PDF Sign metadata to the output asset.
    """
