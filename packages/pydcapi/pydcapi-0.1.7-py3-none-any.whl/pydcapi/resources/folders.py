# generated by scripts/generate.py

import re
from typing import TYPE_CHECKING, Dict, Literal

from .client import Client

if TYPE_CHECKING:
    from ..models import folder_breadcrumbs_v1, folder_creation_v1, folder_listing_v1, folder_metadata_basic_v1, folder_metadata_field_patch_v1, folder_metadata_field_v1, folder_v1, root_v1, system_folders_v1

import uritemplate


class Folders:

    def __init__(self, client: Client):
        self._client: Client = client

    def breadcrumbs(self, *, folder_uri: str) -> "folder_breadcrumbs_v1.Model":
        from ..models import folder_breadcrumbs_v1

        url = uritemplate.partial(
            uri="{+folder_uri}/breadcrumbs",
            var_dict={
                "folder_uri": folder_uri,
            },
        ).uri
        headers: Dict[str, str] = {}
        headers["Accept"] = 'application/vnd.adobe.dc+json; profile="https://dc-api.adobe.io/schemas/folder_breadcrumbs_v1.json"'

        resp = self._client.request(
            "GET",
            url,
            headers=headers,
        )
        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/folder_breadcrumbs_v1\.json", content_type):
            return folder_breadcrumbs_v1.Model.model_validate(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def create(self, *, _data: "folder_creation_v1.Model") -> "folder_v1.Model":
        from ..models import folder_v1

        url = "https://dc-api-v2.adobe.io/{expiry}/folders"
        headers: Dict[str, str] = {}
        headers["Accept"] = 'application/vnd.adobe.dc+json; profile="https://dc-api.adobe.io/schemas/folder_v1.json"'

        resp = self._client.request(
            "POST",
            url,
            headers=headers,
            json=_data.model_dump(),
        )
        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/folder_v1\.json", content_type):
            return folder_v1.Model.model_validate(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def delete(self, *, folder_uri: str) -> None:
        url = uritemplate.partial(
            uri="{+folder_uri}",
            var_dict={
                "folder_uri": folder_uri,
            },
        ).uri
        headers: Dict[str, str] = {}

        self._client.request(
            "DELETE",
            url,
            headers=headers,
        )

    def get_metadata(self, *, folder_uri: str) -> "folder_metadata_basic_v1.Model":
        from ..models import folder_metadata_basic_v1

        url = uritemplate.partial(
            uri="{+folder_uri}/metadata",
            var_dict={
                "folder_uri": folder_uri,
            },
        ).uri
        headers: Dict[str, str] = {}
        headers["Accept"] = 'application/vnd.adobe.dc+json; profile="https://dc-api.adobe.io/schemas/folder_metadata_basic_v1.json"'

        resp = self._client.request(
            "GET",
            url,
            headers=headers,
        )
        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/folder_metadata_basic_v1\.json", content_type):
            return folder_metadata_basic_v1.Model.model_validate(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def get_metadata_field(self, *, fields: Literal["uri", "name", "folder_id", "parent_uri", "parent_id", "created", "modified", "source", "favorite", "starred", "tags", "custom_tags"], folder_uri: str) -> "folder_metadata_field_v1.Model":
        from ..models import folder_metadata_field_v1

        url = uritemplate.partial(
            uri="{+folder_uri}/metadata{/fields}",
            var_dict={
                "fields": fields,
                "folder_uri": folder_uri,
            },
        ).uri
        headers: Dict[str, str] = {}
        headers["Accept"] = 'application/vnd.adobe.dc+json; profile="https://dc-api.adobe.io/schemas/folder_metadata_field_v1.json"'

        resp = self._client.request(
            "GET",
            url,
            headers=headers,
        )
        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/folder_metadata_field_v1\.json", content_type):
            return folder_metadata_field_v1.Model.model_validate(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def get_root(self) -> "root_v1.Model":
        from ..models import root_v1

        url = "https://dc-api-v2.adobe.io/{expiry}/folders/root"
        headers: Dict[str, str] = {}
        headers["Accept"] = 'application/vnd.adobe.dc+json; profile="https://dc-api.adobe.io/schemas/root_v1.json"'

        resp = self._client.request(
            "GET",
            url,
            headers=headers,
        )
        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/root_v1\.json", content_type):
            return root_v1.Model.model_validate(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def get_system_folders(self) -> "system_folders_v1.Model":
        from ..models import system_folders_v1

        url = "https://dc-api-v2.adobe.io/{expiry}/folders/system_folders"
        headers: Dict[str, str] = {}
        headers["Accept"] = 'application/vnd.adobe.dc+json; profile="https://dc-api.adobe.io/schemas/system_folders_v1.json"'

        resp = self._client.request(
            "GET",
            url,
            headers=headers,
        )
        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/system_folders_v1\.json", content_type):
            return system_folders_v1.Model.model_validate(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def list(self, *, order_by: Literal["name", "size", "type", "extension", "created", "modified", "last_access"], sort_order: Literal["ascending", "descending"], folder_uri: str, metadata: Literal["min", "basic"] = "basic", page_size: int = 5000) -> "folder_listing_v1.Model":
        from ..models import folder_listing_v1

        url = uritemplate.partial(
            uri="{+folder_uri}/contents{?order_by,sort_order,page_size,metadata}",
            var_dict={
                "order_by": order_by,
                "sort_order": sort_order,
                "folder_uri": folder_uri,
                "metadata": metadata,
                "page_size": page_size,
            },
        ).uri
        headers: Dict[str, str] = {}
        headers["Accept"] = 'application/vnd.adobe.dc+json; profile="https://dc-api.adobe.io/schemas/folder_listing_v1.json"'

        resp = self._client.request(
            "GET",
            url,
            headers=headers,
        )
        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/folder_listing_v1\.json", content_type):
            return folder_listing_v1.Model.model_validate(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def list_next_page(self, *, next_page_uri: str) -> "folder_listing_v1.Model":
        from ..models import folder_listing_v1

        url = uritemplate.partial(
            uri="{+next_page_uri}",
            var_dict={
                "next_page_uri": next_page_uri,
            },
        ).uri
        headers: Dict[str, str] = {}
        headers["Accept"] = 'application/vnd.adobe.dc+json; profile="https://dc-api.adobe.io/schemas/folder_listing_v1.json"'

        resp = self._client.request(
            "GET",
            url,
            headers=headers,
        )
        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/folder_listing_v1\.json", content_type):
            return folder_listing_v1.Model.model_validate(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def patch_metadata_field(self, *, _data: "folder_metadata_field_patch_v1.Model", fields: Literal["tags", "custom_tags"], folder_uri: str) -> "folder_metadata_field_v1.Model":
        from ..models import folder_metadata_field_v1

        url = uritemplate.partial(
            uri="{+folder_uri}/metadata{/fields}",
            var_dict={
                "fields": fields,
                "folder_uri": folder_uri,
            },
        ).uri
        headers: Dict[str, str] = {}
        headers["Accept"] = 'application/vnd.adobe.dc+json; profile="https://dc-api.adobe.io/schemas/folder_metadata_field_v1.json"'

        resp = self._client.request(
            "PATCH",
            url,
            headers=headers,
            json=_data.model_dump(),
        )
        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/folder_metadata_field_v1\.json", content_type):
            return folder_metadata_field_v1.Model.model_validate(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def put_metadata_field(self, *, _data: "folder_metadata_field_v1.Model", fields: Literal["favorite", "starred"], folder_uri: str) -> None:
        url = uritemplate.partial(
            uri="{+folder_uri}/metadata{/fields}",
            var_dict={
                "fields": fields,
                "folder_uri": folder_uri,
            },
        ).uri
        headers: Dict[str, str] = {}

        self._client.request(
            "PUT",
            url,
            headers=headers,
            json=_data.model_dump(),
        )
