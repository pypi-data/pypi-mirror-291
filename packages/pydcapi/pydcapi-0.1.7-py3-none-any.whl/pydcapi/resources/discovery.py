# generated by scripts/generate.py

import re
from typing import TYPE_CHECKING, Dict

from .client import Client

if TYPE_CHECKING:
    from ..models import (createpdf_options_v1, discovery_v1,
                          exportpdf_options_v1, services_v1, source_options_v1)


class Discovery:

    def __init__(self, client: Client):
        self._client: Client = client

    def createpdf_options(self) -> "createpdf_options_v1.Model":
        from ..models import createpdf_options_v1

        url = "https://dc-api-v2.adobe.io/{expiry}/discovery/resources/assets/createpdf/options"
        headers: Dict[str, str] = {}
        headers["Accept"] = 'application/vnd.adobe.dc+json; profile="https://dc-api.adobe.io/schemas/createpdf_options_v1.json"'

        resp = self._client.request(
            "GET",
            url,
            headers=headers,
        )
        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/createpdf_options_v1\.json", content_type):
            return createpdf_options_v1.Model.model_validate(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def discover(self) -> "discovery_v1.Model":
        from ..models import discovery_v1

        url = "https://dc-api-v2.adobe.io/discovery"
        headers: Dict[str, str] = {}
        headers["Accept"] = 'application/vnd.adobe.dc+json; profile="https://dc-api.adobe.io/schemas/discovery_v1.json"'

        resp = self._client.request(
            "GET",
            url,
            headers=headers,
        )
        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/discovery_v1\.json", content_type):
            return discovery_v1.Model.model_validate(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def exportpdf_options(self) -> "exportpdf_options_v1.Model":
        from ..models import exportpdf_options_v1

        url = "https://dc-api-v2.adobe.io/{expiry}/discovery/resources/assets/exportpdf/options"
        headers: Dict[str, str] = {}
        headers["Accept"] = 'application/vnd.adobe.dc+json; profile="https://dc-api.adobe.io/schemas/exportpdf_options_v1.json"'

        resp = self._client.request(
            "GET",
            url,
            headers=headers,
        )
        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/exportpdf_options_v1\.json", content_type):
            return exportpdf_options_v1.Model.model_validate(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def get_services(self) -> "services_v1.Model":
        from ..models import services_v1

        url = "https://dc-api-v2.adobe.io/{expiry}/discovery/services"
        headers: Dict[str, str] = {}
        headers["Accept"] = 'application/vnd.adobe.dc+json; profile="https://dc-api.adobe.io/schemas/services_v1.json"'

        resp = self._client.request(
            "GET",
            url,
            headers=headers,
        )
        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/services_v1\.json", content_type):
            return services_v1.Model.model_validate(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")

    def source_options(self) -> "source_options_v1.Model":
        from ..models import source_options_v1

        url = "https://dc-api-v2.adobe.io/{expiry}/discovery/resources/assets/source/options"
        headers: Dict[str, str] = {}
        headers["Accept"] = 'application/vnd.adobe.dc+json; profile="https://dc-api.adobe.io/schemas/source_options_v1.json"'

        resp = self._client.request(
            "GET",
            url,
            headers=headers,
        )
        content_type = resp.headers["Content-Type"]

        if re.search(r"schemas/source_options_v1\.json", content_type):
            return source_options_v1.Model.model_validate(resp.json())
        else:
            raise ValueError(f"Unexpected content type: {content_type}")
