{"version":3,"file":"relatedUserSelectorView.js","names":["optionTemplate","_","template","RB","RelatedUserSelectorView","Djblets","RelatedObjectSelectorView","extend","searchPlaceholderText","gettext","initialize","options","prototype","call","defaults","selectizeOptions","searchField","sortField","field","valueField","_localSitePrefix","localSitePrefix","_useAvatars","useAvatars","renderOption","item","loadOptions","query","callback","params","fullname","length","q","$","ajax","type","url","SITE_ROOT","data","success","results","users","map","u","avatarHTML","avatar_html","id","username","error","args","console"],"sources":["../../../../../../static/rb/js/admin/views/relatedUserSelectorView.es6.js"],"sourcesContent":["(function() {\n\nconst optionTemplate = _.template(dedent`\n    <div>\n    <% if (useAvatars && avatarHTML) { %>\n     <%= avatarHTML %>\n    <% } %>\n    <% if (fullname) { %>\n     <span class=\"title\"><%- fullname %></span>\n     <span class=\"description\">(<%- username %>)</span>\n    <% } else { %>\n     <span class=\"title\"><%- username %></span>\n    <% } %>\n    </div>\n`);\n\n\n/**\n * A widget to select related users using search and autocomplete.\n */\nRB.RelatedUserSelectorView = Djblets.RelatedObjectSelectorView.extend({\n    searchPlaceholderText: gettext('Search for users...'),\n\n    /**\n     * Initialize the view.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the view.\n     *\n     * Option Args:\n     *     localSitePrefix (string):\n     *         The URL prefix for the local site, if any.\n     *\n     *     multivalued (boolean):\n     *         Whether or not the widget should allow selecting multuple\n     *         values.\n     *\n     *     useAvatars (boolean):\n     *         Whether to show avatars. Off by default.\n     */\n    initialize(options) {\n        Djblets.RelatedObjectSelectorView.prototype.initialize.call(\n            this,\n            _.defaults({\n                selectizeOptions: {\n                    searchField: ['fullname', 'username'],\n                    sortField: [\n                        {field: 'fullname'},\n                        {field: 'username'},\n                    ],\n                    valueField: 'username',\n                }\n            }, options));\n\n        this._localSitePrefix = options.localSitePrefix || '';\n        this._useAvatars = !!options.useAvatars;\n    },\n\n    /**\n     * Render an option in the drop-down menu.\n     *\n     * Args:\n     *     item (object):\n     *         The item to render.\n     *\n     * Returns:\n     *     string:\n     *     HTML to insert into the drop-down menu.\n     */\n    renderOption(item) {\n        return optionTemplate(_.extend(\n            { useAvatars: this._useAvatars },\n            item\n        ));\n    },\n\n    /**\n     * Load options from the server.\n     *\n     * Args:\n     *     query (string):\n     *         The string typed in by the user.\n     *\n     *     callback (function):\n     *         A callback to be called once data has been loaded. This should\n     *         be passed an array of objects, each representing an option in\n     *         the drop-down.\n     */\n    loadOptions(query, callback) {\n        const params = {\n            fullname: 1,\n            'only-fields': 'avatar_html,fullname,id,username',\n            'only-links': '',\n            'render-avatars-at': '20',\n        };\n\n        if (query.length !== 0) {\n            params.q = query;\n        }\n\n        $.ajax({\n            type: 'GET',\n            url: `${SITE_ROOT}${this._localSitePrefix}api/users/`,\n            data: params,\n            success(results) {\n                callback(results.users.map(u => ({\n                    avatarHTML: u.avatar_html[20],\n                    fullname: u.fullname,\n                    id: u.id,\n                    username: u.username,\n                })));\n            },\n            error(...args) {\n                console.error('User query failed', args);\n                callback();\n            },\n        });\n    },\n});\n\n\n})();\n"],"mappings":";;AAAA,CAAC,YAAW;EAEZ,MAAMA,cAAc,GAAGC,CAAC,CAACC,QAAQ,CAAQ;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAEC,CAAC;;EAGF;AACA;AACA;EACAC,EAAE,CAACC,uBAAuB,GAAGC,OAAO,CAACC,yBAAyB,CAACC,MAAM,CAAC;IAClEC,qBAAqB,EAAAC,OAAA,uBAAgC;IAErD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACIC,UAAUA,CAACC,OAAO,EAAE;MAChBN,OAAO,CAACC,yBAAyB,CAACM,SAAS,CAACF,UAAU,CAACG,IAAI,CACvD,IAAI,EACJZ,CAAC,CAACa,QAAQ,CAAC;QACPC,gBAAgB,EAAE;UACdC,WAAW,EAAE,CAAC,UAAU,EAAE,UAAU,CAAC;UACrCC,SAAS,EAAE,CACP;YAACC,KAAK,EAAE;UAAU,CAAC,EACnB;YAACA,KAAK,EAAE;UAAU,CAAC,CACtB;UACDC,UAAU,EAAE;QAChB;MACJ,CAAC,EAAER,OAAO,CAAC,CAAC;MAEhB,IAAI,CAACS,gBAAgB,GAAGT,OAAO,CAACU,eAAe,IAAI,EAAE;MACrD,IAAI,CAACC,WAAW,GAAG,CAAC,CAACX,OAAO,CAACY,UAAU;IAC3C,CAAC;IAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACIC,YAAYA,CAACC,IAAI,EAAE;MACf,OAAOzB,cAAc,CAACC,CAAC,CAACM,MAAM,CAC1B;QAAEgB,UAAU,EAAE,IAAI,CAACD;MAAY,CAAC,EAChCG,IACJ,CAAC,CAAC;IACN,CAAC;IAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACIC,WAAWA,CAACC,KAAK,EAAEC,QAAQ,EAAE;MACzB,MAAMC,MAAM,GAAG;QACXC,QAAQ,EAAE,CAAC;QACX,aAAa,EAAE,kCAAkC;QACjD,YAAY,EAAE,EAAE;QAChB,mBAAmB,EAAE;MACzB,CAAC;MAED,IAAIH,KAAK,CAACI,MAAM,KAAK,CAAC,EAAE;QACpBF,MAAM,CAACG,CAAC,GAAGL,KAAK;MACpB;MAEAM,CAAC,CAACC,IAAI,CAAC;QACHC,IAAI,EAAE,KAAK;QACXC,GAAG,EAAG,GAAEC,SAAU,GAAE,IAAI,CAACjB,gBAAiB,YAAW;QACrDkB,IAAI,EAAET,MAAM;QACZU,OAAOA,CAACC,OAAO,EAAE;UACbZ,QAAQ,CAACY,OAAO,CAACC,KAAK,CAACC,GAAG,CAACC,CAAC,KAAK;YAC7BC,UAAU,EAAED,CAAC,CAACE,WAAW,CAAC,EAAE,CAAC;YAC7Bf,QAAQ,EAAEa,CAAC,CAACb,QAAQ;YACpBgB,EAAE,EAAEH,CAAC,CAACG,EAAE;YACRC,QAAQ,EAAEJ,CAAC,CAACI;UAChB,CAAC,CAAC,CAAC,CAAC;QACR,CAAC;QACDC,KAAKA,CAAC,GAAGC,IAAI,EAAE;UACXC,OAAO,CAACF,KAAK,CAAC,mBAAmB,EAAEC,IAAI,CAAC;UACxCrB,QAAQ,CAAC,CAAC;QACd;MACJ,CAAC,CAAC;IACN;EACJ,CAAC,CAAC;AAGF,CAAC,EAAE,CAAC","ignoreList":[]}