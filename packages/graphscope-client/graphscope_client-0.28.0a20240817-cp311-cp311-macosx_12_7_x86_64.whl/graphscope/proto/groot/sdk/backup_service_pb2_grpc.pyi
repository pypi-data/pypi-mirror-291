"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
*
Copyright 2020 Alibaba Group Holding Limited.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""

import abc
import collections.abc
import groot.sdk.backup_service_pb2
import grpc
import grpc.aio
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class BackupStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    createNewBackup: grpc.UnaryUnaryMultiCallable[
        groot.sdk.backup_service_pb2.CreateNewBackupRequest,
        groot.sdk.backup_service_pb2.CreateNewBackupResponse,
    ]

    deleteBackup: grpc.UnaryUnaryMultiCallable[
        groot.sdk.backup_service_pb2.DeleteBackupRequest,
        groot.sdk.backup_service_pb2.DeleteBackupResponse,
    ]

    purgeOldBackups: grpc.UnaryUnaryMultiCallable[
        groot.sdk.backup_service_pb2.PurgeOldBackupsRequest,
        groot.sdk.backup_service_pb2.PurgeOldBackupsResponse,
    ]

    restoreFromBackup: grpc.UnaryUnaryMultiCallable[
        groot.sdk.backup_service_pb2.RestoreFromBackupRequest,
        groot.sdk.backup_service_pb2.RestoreFromBackupResponse,
    ]

    verifyBackup: grpc.UnaryUnaryMultiCallable[
        groot.sdk.backup_service_pb2.VerifyBackupRequest,
        groot.sdk.backup_service_pb2.VerifyBackupResponse,
    ]

    getBackupInfo: grpc.UnaryUnaryMultiCallable[
        groot.sdk.backup_service_pb2.GetBackupInfoRequest,
        groot.sdk.backup_service_pb2.GetBackupInfoResponse,
    ]

class BackupAsyncStub:
    createNewBackup: grpc.aio.UnaryUnaryMultiCallable[
        groot.sdk.backup_service_pb2.CreateNewBackupRequest,
        groot.sdk.backup_service_pb2.CreateNewBackupResponse,
    ]

    deleteBackup: grpc.aio.UnaryUnaryMultiCallable[
        groot.sdk.backup_service_pb2.DeleteBackupRequest,
        groot.sdk.backup_service_pb2.DeleteBackupResponse,
    ]

    purgeOldBackups: grpc.aio.UnaryUnaryMultiCallable[
        groot.sdk.backup_service_pb2.PurgeOldBackupsRequest,
        groot.sdk.backup_service_pb2.PurgeOldBackupsResponse,
    ]

    restoreFromBackup: grpc.aio.UnaryUnaryMultiCallable[
        groot.sdk.backup_service_pb2.RestoreFromBackupRequest,
        groot.sdk.backup_service_pb2.RestoreFromBackupResponse,
    ]

    verifyBackup: grpc.aio.UnaryUnaryMultiCallable[
        groot.sdk.backup_service_pb2.VerifyBackupRequest,
        groot.sdk.backup_service_pb2.VerifyBackupResponse,
    ]

    getBackupInfo: grpc.aio.UnaryUnaryMultiCallable[
        groot.sdk.backup_service_pb2.GetBackupInfoRequest,
        groot.sdk.backup_service_pb2.GetBackupInfoResponse,
    ]

class BackupServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def createNewBackup(
        self,
        request: groot.sdk.backup_service_pb2.CreateNewBackupRequest,
        context: _ServicerContext,
    ) -> typing.Union[groot.sdk.backup_service_pb2.CreateNewBackupResponse, collections.abc.Awaitable[groot.sdk.backup_service_pb2.CreateNewBackupResponse]]: ...

    @abc.abstractmethod
    def deleteBackup(
        self,
        request: groot.sdk.backup_service_pb2.DeleteBackupRequest,
        context: _ServicerContext,
    ) -> typing.Union[groot.sdk.backup_service_pb2.DeleteBackupResponse, collections.abc.Awaitable[groot.sdk.backup_service_pb2.DeleteBackupResponse]]: ...

    @abc.abstractmethod
    def purgeOldBackups(
        self,
        request: groot.sdk.backup_service_pb2.PurgeOldBackupsRequest,
        context: _ServicerContext,
    ) -> typing.Union[groot.sdk.backup_service_pb2.PurgeOldBackupsResponse, collections.abc.Awaitable[groot.sdk.backup_service_pb2.PurgeOldBackupsResponse]]: ...

    @abc.abstractmethod
    def restoreFromBackup(
        self,
        request: groot.sdk.backup_service_pb2.RestoreFromBackupRequest,
        context: _ServicerContext,
    ) -> typing.Union[groot.sdk.backup_service_pb2.RestoreFromBackupResponse, collections.abc.Awaitable[groot.sdk.backup_service_pb2.RestoreFromBackupResponse]]: ...

    @abc.abstractmethod
    def verifyBackup(
        self,
        request: groot.sdk.backup_service_pb2.VerifyBackupRequest,
        context: _ServicerContext,
    ) -> typing.Union[groot.sdk.backup_service_pb2.VerifyBackupResponse, collections.abc.Awaitable[groot.sdk.backup_service_pb2.VerifyBackupResponse]]: ...

    @abc.abstractmethod
    def getBackupInfo(
        self,
        request: groot.sdk.backup_service_pb2.GetBackupInfoRequest,
        context: _ServicerContext,
    ) -> typing.Union[groot.sdk.backup_service_pb2.GetBackupInfoResponse, collections.abc.Awaitable[groot.sdk.backup_service_pb2.GetBackupInfoResponse]]: ...

def add_BackupServicer_to_server(servicer: BackupServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
