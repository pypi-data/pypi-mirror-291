from .Item import Item as Item
from .List import Iterator as Iterator, List as List
from .msg import msg as msg
from _typeshed import Incomplete
from collections import deque
from itertools import islice, tee as tee

class Slice:
    of_list: Incomplete
    start_item: Incomplete
    slice_size: Incomplete
    search_field: Incomplete
    search_term: Incomplete
    sliced_list: Incomplete
    filtered_sliced_list: Incomplete
    def __init__(self, of_list: List, localdb: dict, start_item: Item | None, size: int, search_term: str | float | Item | None, search_field: str | None, internal: bool = False) -> None: ...
    def __iter__(self) -> islice | deque: ...
    def forward(self, steps: int | None = 1) -> None: ...
    def set_search(self, search_term: str | int, search_field: str | None = None) -> None: ...
    def reset_search(self) -> None: ...
    def on_update(self, call_back: callable) -> None: ...
    def count(self) -> int: ...
    def set_size(self, new_size: int) -> None: ...
    def backward(self, steps: int | None = 1) -> None: ...
    def first(self) -> Item | None: ...
    def last(self) -> Item | None: ...
