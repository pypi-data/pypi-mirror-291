# coding: utf-8

"""
    Robust Intelligence REST API

    API methods for Robust Intelligence. Users must authenticate using the `X-Firewall-Auth-Token` for all the firewall methods and `rime-api-key` for all other methods.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GenerativevalidationObjectiveSubCategory(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    UNSPECIFIED = "OBJECTIVE_SUB_CATEGORY_UNSPECIFIED"
    THEFT = "OBJECTIVE_SUB_CATEGORY_THEFT"
    POISONING = "OBJECTIVE_SUB_CATEGORY_POISONING"
    VIOLENCE = "OBJECTIVE_SUB_CATEGORY_VIOLENCE"
    STALKING = "OBJECTIVE_SUB_CATEGORY_STALKING"
    TERRORISM = "OBJECTIVE_SUB_CATEGORY_TERRORISM"
    BOMB = "OBJECTIVE_SUB_CATEGORY_BOMB"
    MURDER = "OBJECTIVE_SUB_CATEGORY_MURDER"
    PII_SSN = "OBJECTIVE_SUB_CATEGORY_PII_SSN"
    PII_PHONE_NUMBER = "OBJECTIVE_SUB_CATEGORY_PII_PHONE_NUMBER"
    PII_CREDIT_CARD = "OBJECTIVE_SUB_CATEGORY_PII_CREDIT_CARD"
    PII_EMAIL_ADDRESS = "OBJECTIVE_SUB_CATEGORY_PII_EMAIL_ADDRESS"
    PII_PASSPORT_NUMBER = "OBJECTIVE_SUB_CATEGORY_PII_PASSPORT_NUMBER"
    PIRACY = "OBJECTIVE_SUB_CATEGORY_PIRACY"
    HACKING = "OBJECTIVE_SUB_CATEGORY_HACKING"
    VIRUS = "OBJECTIVE_SUB_CATEGORY_VIRUS"
    MISINFORMATION = "OBJECTIVE_SUB_CATEGORY_MISINFORMATION"
    FINANCIAL_ADVICE = "OBJECTIVE_SUB_CATEGORY_FINANCIAL_ADVICE"
    PII = "OBJECTIVE_SUB_CATEGORY_PII"
    PROMPT_EXTRACTION = "OBJECTIVE_SUB_CATEGORY_PROMPT_EXTRACTION"
    FINANCIAL = "OBJECTIVE_SUB_CATEGORY_FINANCIAL"
    COPYRIGHT_EXTRACTION = "OBJECTIVE_SUB_CATEGORY_COPYRIGHT_EXTRACTION"
    LONG_PROMPTS = "OBJECTIVE_SUB_CATEGORY_LONG_PROMPTS"
    CHILD_PORN = "OBJECTIVE_SUB_CATEGORY_CHILD_PORN"
    DRUGS = "OBJECTIVE_SUB_CATEGORY_DRUGS"
    SUICIDE = "OBJECTIVE_SUB_CATEGORY_SUICIDE"
    ANIMAL_VIOLENCE = "OBJECTIVE_SUB_CATEGORY_ANIMAL_VIOLENCE"
    BOMB_THREATS_AND_HOAXES = "OBJECTIVE_SUB_CATEGORY_BOMB_THREATS_AND_HOAXES"
    BRANDED_CONTENT = "OBJECTIVE_SUB_CATEGORY_BRANDED_CONTENT"
    BULLYING = "OBJECTIVE_SUB_CATEGORY_BULLYING"
    CELEBRITY_PII = "OBJECTIVE_SUB_CATEGORY_CELEBRITY_PII"
    CHEATING = "OBJECTIVE_SUB_CATEGORY_CHEATING"
    CHILD_SEXUAL_ABUSE_MATERIAL = "OBJECTIVE_SUB_CATEGORY_CHILD_SEXUAL_ABUSE_MATERIAL"
    CONSPIRACY_THEORIES = "OBJECTIVE_SUB_CATEGORY_CONSPIRACY_THEORIES"
    DISABILITIES = "OBJECTIVE_SUB_CATEGORY_DISABILITIES"
    DISCRIMINATION = "OBJECTIVE_SUB_CATEGORY_DISCRIMINATION"
    DISINFORMATION = "OBJECTIVE_SUB_CATEGORY_DISINFORMATION"
    ECONOMIC_CLASS = "OBJECTIVE_SUB_CATEGORY_ECONOMIC_CLASS"
    EMOTIONAL_ABUSE = "OBJECTIVE_SUB_CATEGORY_EMOTIONAL_ABUSE"
    FIREARMS = "OBJECTIVE_SUB_CATEGORY_FIREARMS"
    GENERATE_MALWARE = "OBJECTIVE_SUB_CATEGORY_GENERATE_MALWARE"
    HUMAN_EXPLOITATION = "OBJECTIVE_SUB_CATEGORY_HUMAN_EXPLOITATION"
    ILLEGAL_ACTIVITIES = "OBJECTIVE_SUB_CATEGORY_ILLEGAL_ACTIVITIES"
    IMMIGRATION_STATUS = "OBJECTIVE_SUB_CATEGORY_IMMIGRATION_STATUS"
    IMPERSONATION_IMPOSTOR_CONTENT = "OBJECTIVE_SUB_CATEGORY_IMPERSONATION_IMPOSTOR_CONTENT"
    INTELLECTUAL_PROPERTY_PIRACY = "OBJECTIVE_SUB_CATEGORY_INTELLECTUAL_PROPERTY_PIRACY"
    LOGOS = "OBJECTIVE_SUB_CATEGORY_LOGOS"
    MALICIOUS_CODE = "OBJECTIVE_SUB_CATEGORY_MALICIOUS_CODE"
    MARITAL_STATUS = "OBJECTIVE_SUB_CATEGORY_MARITAL_STATUS"
    MOVIE_QUOTES = "OBJECTIVE_SUB_CATEGORY_MOVIE_QUOTES"
    MURDER_HOMICIDE = "OBJECTIVE_SUB_CATEGORY_MURDER_HOMICIDE"
    PERSONAL_IDENTIFICATION_NUMBERS = "OBJECTIVE_SUB_CATEGORY_PERSONAL_IDENTIFICATION_NUMBERS"
    PHISHING = "OBJECTIVE_SUB_CATEGORY_PHISHING"
    PLAGIARISM = "OBJECTIVE_SUB_CATEGORY_PLAGIARISM"
    PORNOGRAPHIC_DEPICTIONS = "OBJECTIVE_SUB_CATEGORY_PORNOGRAPHIC_DEPICTIONS"
    PRISONS = "OBJECTIVE_SUB_CATEGORY_PRISONS"
    PROFANITY = "OBJECTIVE_SUB_CATEGORY_PROFANITY"
    RELIGIOUS_BELIEFS = "OBJECTIVE_SUB_CATEGORY_RELIGIOUS_BELIEFS"
    RISKY_FINANCIAL_PRACTICES = "OBJECTIVE_SUB_CATEGORY_RISKY_FINANCIAL_PRACTICES"
    RISKY_PRANKS = "OBJECTIVE_SUB_CATEGORY_RISKY_PRANKS"
    SCAMS = "OBJECTIVE_SUB_CATEGORY_SCAMS"
    SOCIAL_ENGINEERING = "OBJECTIVE_SUB_CATEGORY_SOCIAL_ENGINEERING"
    SONG_LYRICS = "OBJECTIVE_SUB_CATEGORY_SONG_LYRICS"
    SPAM = "OBJECTIVE_SUB_CATEGORY_SPAM"
    SUICIDAL_ATTEMPTS = "OBJECTIVE_SUB_CATEGORY_SUICIDAL_ATTEMPTS"
    SURVEILLANCE = "OBJECTIVE_SUB_CATEGORY_SURVEILLANCE"
    SYSTEMIC_RACISM = "OBJECTIVE_SUB_CATEGORY_SYSTEMIC_RACISM"
    THREATS_AND_INTIMIDATION = "OBJECTIVE_SUB_CATEGORY_THREATS_AND_INTIMIDATION"
    TOXIC_CHEMICALS = "OBJECTIVE_SUB_CATEGORY_TOXIC_CHEMICALS"
    UNSAFE_ACTIONS = "OBJECTIVE_SUB_CATEGORY_UNSAFE_ACTIONS"
    UNSAFE_HEALTH_PRACTICES = "OBJECTIVE_SUB_CATEGORY_UNSAFE_HEALTH_PRACTICES"
    WAR_CRIMES = "OBJECTIVE_SUB_CATEGORY_WAR_CRIMES"
    WORKPLACE_DISCRIMINATION = "OBJECTIVE_SUB_CATEGORY_WORKPLACE_DISCRIMINATION"
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
    }

    attribute_map = {
    }

    def __init__(self):  # noqa: E501
        """GenerativevalidationObjectiveSubCategory - a model defined in Swagger"""  # noqa: E501
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GenerativevalidationObjectiveSubCategory, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GenerativevalidationObjectiveSubCategory):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
