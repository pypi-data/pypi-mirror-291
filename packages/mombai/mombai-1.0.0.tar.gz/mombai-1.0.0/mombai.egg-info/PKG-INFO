Metadata-Version: 2.1
Name: mombai
Version: 1.0.0
Summary: A deep learning library for advanced neural network layers.
Home-page: https://github.com/joaquinsc999/mombai
Author: Joaquín Francisco Solórzano Corea
Author-email: joaquinscorea@gmail.com
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.6
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: tensorflow>=2.0


# Mombai

Mombai es una librerÃ­a de aprendizaje profundo diseÃ±ada para implementar y experimentar con capas de redes neuronales avanzadas, basadas en investigaciones recientes. Esta librerÃ­a incluye implementaciones de Kolmogorov-Arnold Networks (KANs) y estÃ¡ orientada a explorar nuevas arquitecturas de redes neuronales que capturen mejor las complejidades no lineales en los datos.

## MotivaciÃ³n

El proyecto Mombai nace de la necesidad de explorar y llevar a la prÃ¡ctica conceptos avanzados de redes neuronales presentados en papers de investigaciÃ³n recientes. La librerÃ­a estÃ¡ en sus primeras fases de desarrollo, con el objetivo de ofrecer implementaciones iniciales de estas arquitecturas. Aunque Mombai aÃºn no estÃ¡ completamente optimizado y algunas partes de la implementaciÃ³n son un primer borrador, es un excelente punto de partida para aquellos interesados en entender y experimentar con estos conceptos.

En futuras versiones, planeamos no solo mejorar la eficiencia de estas implementaciones, sino tambiÃ©n aÃ±adir nuevas capas y arquitecturas basadas en investigaciones cientÃ­ficas personales y experimentos innovadores en el campo de la inteligencia artificial.

## InstalaciÃ³n

Puedes instalar la librerÃ­a directamente desde PyPI usando `pip`:

```bash
pip install mombai
```

## Uso

AquÃ­ tienes un ejemplo bÃ¡sico de cÃ³mo usar la capa KANLayer para entrenar un modelo simple que ajuste la funciÃ³n `y = 3x + 2`:

```python
import tensorflow as tf
from mombai.layers.kan import KANLayer

# DefiniciÃ³n del modelo usando la KANLayer
class KANModel(tf.keras.Model):
    def __init__(self, units=1):
        super(KANModel, self).__init__()
        self.kan_layer = KANLayer(units=units, G=5, k=3)  # Capa KAN
        self.output_layer = tf.keras.layers.Dense(1)  # Capa de salida simple

    def call(self, inputs):
        x = self.kan_layer(inputs)
        return self.output_layer(x)

# GeneraciÃ³n de datos para la funciÃ³n y = 3x + 2
def generate_data():
    x = tf.random.uniform((1000, 1), -1, 1)
    y = 3 * x + 2
    return x, y

# Crear los datos de entrenamiento
x_train, y_train = generate_data()

# Crear el modelo
model = KANModel(units=10)

# Compilar el modelo
model.compile(optimizer='adam', loss='mse')

# Entrenar el modelo
model.fit(x_train, y_train, epochs=10, batch_size=32)

# Probar el modelo con un nuevo dato
x_test = tf.constant([[0.5]], dtype=tf.float32)
y_pred = model.predict(x_test)
print(f"PredicciÃ³n para x=0.5: {y_pred}")
```

## Estado del Proyecto

Esta librerÃ­a estÃ¡ en una fase inicial y todavÃ­a estÃ¡ en desarrollo. Actualmente, las implementaciones estÃ¡n enfocadas en probar los conceptos descritos en los papers de investigaciÃ³n, y se espera que en futuras versiones se mejore la eficiencia y se amplÃ­en las funcionalidades.

En versiones futuras, se incluirÃ¡n nuevas capas y arquitecturas innovadoras basadas en investigaciones cientÃ­ficas personales. Â¡Mantente atento para descubrir estas prÃ³ximas implementaciones!

Si encuentras problemas o tienes sugerencias, no dudes en abrir un issue o contribuir al proyecto.

## Contribuciones

Las contribuciones son bienvenidas. Si quieres contribuir, por favor, sigue los pasos descritos en `CONTRIBUTING.md` (a crear) y asegÃºrate de que tus cambios se alineen con la direcciÃ³n general del proyecto.

## Licencia

Este proyecto estÃ¡ licenciado bajo la licencia MIT. Consulta el archivo `LICENSE` para mÃ¡s detalles.
