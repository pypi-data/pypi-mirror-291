# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import strategies_pb2 as strategies__pb2

GRPC_GENERATED_VERSION = '1.65.5'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.66.0'
SCHEDULED_RELEASE_DATE = 'August 6, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in strategies_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class TextEmbeddingStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getTextEmbedding = channel.unary_unary(
                '/TextSemanticEmbedding.TextEmbedding/getTextEmbedding',
                request_serializer=strategies__pb2.TextEmbeddingRequest.SerializeToString,
                response_deserializer=strategies__pb2.TextEmbeddingResponse.FromString,
                _registered_method=True)
        self.getTextBatchEmbedding = channel.unary_unary(
                '/TextSemanticEmbedding.TextEmbedding/getTextBatchEmbedding',
                request_serializer=strategies__pb2.TextBatchEmbeddingRequest.SerializeToString,
                response_deserializer=strategies__pb2.TextBatchEmbeddingResponse.FromString,
                _registered_method=True)
        self.getTextRerankScores = channel.unary_unary(
                '/TextSemanticEmbedding.TextEmbedding/getTextRerankScores',
                request_serializer=strategies__pb2.TextRerankScoresRequest.SerializeToString,
                response_deserializer=strategies__pb2.TextRerankScoresResponse.FromString,
                _registered_method=True)


class TextEmbeddingServicer(object):
    """Missing associated documentation comment in .proto file."""

    def getTextEmbedding(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getTextBatchEmbedding(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getTextRerankScores(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TextEmbeddingServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getTextEmbedding': grpc.unary_unary_rpc_method_handler(
                    servicer.getTextEmbedding,
                    request_deserializer=strategies__pb2.TextEmbeddingRequest.FromString,
                    response_serializer=strategies__pb2.TextEmbeddingResponse.SerializeToString,
            ),
            'getTextBatchEmbedding': grpc.unary_unary_rpc_method_handler(
                    servicer.getTextBatchEmbedding,
                    request_deserializer=strategies__pb2.TextBatchEmbeddingRequest.FromString,
                    response_serializer=strategies__pb2.TextBatchEmbeddingResponse.SerializeToString,
            ),
            'getTextRerankScores': grpc.unary_unary_rpc_method_handler(
                    servicer.getTextRerankScores,
                    request_deserializer=strategies__pb2.TextRerankScoresRequest.FromString,
                    response_serializer=strategies__pb2.TextRerankScoresResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'TextSemanticEmbedding.TextEmbedding', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('TextSemanticEmbedding.TextEmbedding', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class TextEmbedding(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def getTextEmbedding(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/TextSemanticEmbedding.TextEmbedding/getTextEmbedding',
            strategies__pb2.TextEmbeddingRequest.SerializeToString,
            strategies__pb2.TextEmbeddingResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getTextBatchEmbedding(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/TextSemanticEmbedding.TextEmbedding/getTextBatchEmbedding',
            strategies__pb2.TextBatchEmbeddingRequest.SerializeToString,
            strategies__pb2.TextBatchEmbeddingResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getTextRerankScores(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/TextSemanticEmbedding.TextEmbedding/getTextRerankScores',
            strategies__pb2.TextRerankScoresRequest.SerializeToString,
            strategies__pb2.TextRerankScoresResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
