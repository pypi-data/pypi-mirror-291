# This file was generated by liblab | https://liblab.com/

from typing import List
from ..utils.json_map import JsonMap
from ..base import BaseModel


@JsonMap({})
class SearchParamsParams(BaseModel):
    """SearchParamsParams

    :param radius: radius, defaults to None
    :type radius: int, optional
    :param range_filter: range_filter, defaults to None
    :type range_filter: int, optional
    """

    def __init__(self, radius: int = None, range_filter: int = None):
        if radius is not None:
            self.radius = radius
        if range_filter is not None:
            self.range_filter = range_filter


@JsonMap({"metric_type": "metricType"})
class SearchParams(BaseModel):
    """SearchParams

    :param metric_type: metric_type, defaults to None
    :type metric_type: str, optional
    :param params: params, defaults to None
    :type params: SearchParamsParams, optional
    """

    def __init__(self, metric_type: str = None, radius: int = None, range_filter: int = None):
        if metric_type is not None:
            self.metric_type = metric_type
        if radius or range_filter:
            self.params = SearchParamsParams(radius=radius, range_filter=range_filter)
        


@JsonMap(
    {
        "project_id": "projectId",
        "collection_name": "collectionName",
        "partition_names": "partitionNames",
        "output_fields": "outputFields",
        "anss_field": "anssField",
        "grouping_field": "groupingField",
        "search_params": "searchParams",
    }
)

# TODO Don't forget to add data
class VectorsSearchRequest(BaseModel):
    """VectorsSearchRequest

    :param project_id: project_id
    :type project_id: str
    :param collection_name: collection_name
    :type collection_name: str
    :param partition_names: partition_names, defaults to None
    :type partition_names: List[str], optional
    :param output_fields: output_fields, defaults to None
    :type output_fields: List[str], optional
    :param anss_field: anss_field, defaults to None
    :type anss_field: str, optional
    :param limit: limit, defaults to None
    :type limit: int, optional
    :param offset: offset, defaults to None
    :type offset: int, optional
    :param filter: filter, defaults to None
    :type filter: str, optional
    :param grouping_field: grouping_field, defaults to None
    :type grouping_field: str, optional
    :param search_params: search_params, defaults to None
    :type search_params: SearchParams, optional
    """

    def __init__(
        self,
        collection_name: str,
        project_id: str,
        partition_names: List[str] = None,
        output_fields: List[str] = None,
        anss_field: str = None,
        limit: int = None,
        offset: int = None,
        filter: str = None,
        grouping_field: str = None,
        search_params: SearchParams = None,
    ):
        self.project_id = project_id
        self.collection_name = collection_name
        if partition_names is not None:
            self.partition_names = partition_names
        if output_fields is not None:
            self.output_fields = output_fields
        if anss_field is not None:
            self.anss_field = anss_field
        if limit is not None:
            self.limit = limit
        if offset is not None:
            self.offset = offset
        if filter is not None:
            self.filter = filter
        if grouping_field is not None:
            self.grouping_field = grouping_field
        if search_params is not None:
            self.search_params = self._define_object(search_params, SearchParams)
