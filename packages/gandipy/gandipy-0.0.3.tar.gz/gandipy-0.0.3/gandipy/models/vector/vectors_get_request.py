# This file was generated by liblab | https://liblab.com/

from typing import Union
from typing import List
from ..utils.json_map import JsonMap
from ..base import BaseModel
from ..base import OneOfBaseModel


class IdGuard(OneOfBaseModel):
    class_list = {
        "str": str,
        "List[str]": List[str],
        "int": int,
        "List[int]": List[int],
    }


Id = Union[str, List[str], int, List[int]]


@JsonMap(
    {
        "project_id": "projectId",
        "collection_name": "collectionName",
        "id_": "id",
        "partition_names": "partitionNames",
        "output_fields": "outputFields",
    }
)
class VectorsGetRequest(BaseModel):
    """VectorsGetRequest

    :param project_id: project_id
    :type project_id: str
    :param collection_name: collection_name
    :type collection_name: str
    :param id_: id_, defaults to None
    :type id_: Id, optional
    :param partition_names: partition_names, defaults to None
    :type partition_names: List[str], optional
    :param output_fields: output_fields, defaults to None
    :type output_fields: List[str], optional
    """

    def __init__(
        self,
        collection_name: str,
        project_id: str,
        id_: Id = None,
        host: str = "",
        partition_names: List[str] = None,
        output_fields: List[str] = None,
    ):
        self.project_id = project_id
        self.collection_name = collection_name
        if id_ is not None:
            self.id_ = IdGuard.return_one_of(id_)
        if partition_names is not None:
            self.partition_names = partition_names
        if output_fields is not None:
            self.output_fields = output_fields
        if host is not None:
            self.host = host
