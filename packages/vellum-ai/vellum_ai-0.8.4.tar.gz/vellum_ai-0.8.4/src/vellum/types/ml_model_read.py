# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import pydantic
from .ml_model_family_enum_value_label import MlModelFamilyEnumValueLabel
from .hosted_by_enum import HostedByEnum
from .ml_model_developer_enum_value_label import MlModelDeveloperEnumValueLabel
import typing
from .visibility_enum import VisibilityEnum
from .ml_model_exec_config import MlModelExecConfig
from .ml_model_parameter_config import MlModelParameterConfig
from .ml_model_display_config_labelled import MlModelDisplayConfigLabelled
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class MlModelRead(UniversalBaseModel):
    """
    An ML Model that your Workspace has access to.
    """

    id: str
    name: str = pydantic.Field()
    """
    The unique name of the ML Model.
    """

    family: MlModelFamilyEnumValueLabel = pydantic.Field()
    """
    The family of the ML Model.
    """

    hosted_by: HostedByEnum = pydantic.Field()
    """
    The organization hosting the ML Model.
    
    - `ANTHROPIC` - Anthropic
    - `AWS_BEDROCK` - AWS Bedrock
    - `AZURE_OPENAI` - Azure OpenAI
    - `COHERE` - Cohere
    - `CUSTOM` - Custom
    - `FIREWORKS_AI` - Fireworks AI
    - `GOOGLE` - Google
    - `GOOGLE_VERTEX_AI` - Google Vertex AI
    - `GROQ` - Groq
    - `HUGGINGFACE` - HuggingFace
    - `IBM_WATSONX` - IBM WatsonX
    - `MOSAICML` - MosaicML
    - `MYSTIC` - Mystic
    - `OPENAI` - OpenAI
    - `OPENPIPE` - OpenPipe
    - `PYQ` - Pyq
    - `REPLICATE` - Replicate
    """

    developed_by: MlModelDeveloperEnumValueLabel = pydantic.Field()
    """
    The organization that developed the ML Model.
    """

    visibility: typing.Optional[VisibilityEnum] = pydantic.Field(default=None)
    """
    The visibility of the ML Model.
    
    - `DEFAULT` - Default
    - `PUBLIC` - Public
    - `PRIVATE` - Private
    - `DISABLED` - Disabled
    """

    exec_config: MlModelExecConfig = pydantic.Field()
    """
    Configuration for how to execute the ML Model.
    """

    parameter_config: MlModelParameterConfig = pydantic.Field()
    """
    Configuration for the ML Model's parameters.
    """

    display_config: MlModelDisplayConfigLabelled = pydantic.Field()
    """
    Configuration for how to display the ML Model.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
