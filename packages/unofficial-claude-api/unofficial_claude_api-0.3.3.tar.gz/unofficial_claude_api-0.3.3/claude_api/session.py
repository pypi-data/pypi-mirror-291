"""Session module"""
from typing import Optional
from dataclasses import dataclass
from json import loads as json_loads
from selgym.gym import (
    cleanup_resources,
    get_firefox_options,
    get_firefox_webdriver,
    get_default_firefox_profile,
    wait_element_by,
    click_element,
    By,
)


@dataclass
class SessionData:
    """
    This session class is made for `ClaudeAPIClient` constructor.

    It can be auto generated by having a working login in Firefox
    and geckodriver installed, calling `get_session_data()`
    with the Firefox profile path, or the default one if omitted.
    """

    cookie: str
    """
    The entire Cookie header string value
    """
    user_agent: str
    """
    Browser User agent
    """

    organization_id: Optional[str] = None
    """
    Claude's account organization ID, will be auto retrieved if None
    """


def get_session_data(profile: str = "", quiet: bool = False, organization_index:int=-1) -> SessionData | None:
    """
    Retrieves Claude session data

    This function requires a profile with Claude login and geckodriver installed!

    The default Firefox profile will be used, if the profile argument was not overwrited.

    Parameter `organization_index` is by default -1
    (last entry from https://claude.ai/api/organizations)
    """

    json_tab_id = 'a[id="rawdata-tab"]'
    json_text_csss = 'pre[class="data"]'

    base_url = "https://claude.ai/api/organizations"
    if not profile:
        profile = get_default_firefox_profile()

    if not quiet:
        print(f"\nRetrieving Claude session cookie from {profile}")

    opts = get_firefox_options(firefox_profile=profile, headless=True)
    driver = get_firefox_webdriver(options=opts)
    try:
        driver.get(base_url)

        driver.implicitly_wait(10)
        user_agent = driver.execute_script("return navigator.userAgent")
        if not user_agent:
            raise RuntimeError("Cannot retrieve UserAgent...")

        cookies = driver.get_cookies()

        cookie_string = "; ".join(
            [f"{cookie['name']}={cookie['value']}" for cookie in cookies]
        )

        btn = wait_element_by(driver, By.CSS_SELECTOR, json_tab_id)
        click_element(driver, btn)

        org_id = None
        pre = wait_element_by(driver, By.CSS_SELECTOR, json_text_csss)
        if pre.text:
            j = json_loads(pre.text)
            try:
                if j and len(j) > organization_index and "uuid" in j[organization_index]:
                    org_id = j[organization_index]["uuid"]
            except KeyError:
                print(
                    f"\nUnable to retrieve organization_id from profile: {profile}\n"
                    "Check if this profile is logged into Claude!"
                )
                return None
        return SessionData(cookie_string, user_agent, org_id)
    finally:
        driver.quit()
        cleanup_resources()
