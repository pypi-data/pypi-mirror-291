[build-system]
requires = ["setuptools>=61"]
build-backend = "setuptools.build_meta"


[project]
name = "gitlab-discord-webhook"
authors = [
    { name = "Allan Galarza", email = "allan.galarza@gmail.com" }
]
maintainers = [
    { name = "Allan Galarza", email = "allan.galarza@gmail.com" }
]
dynamic = ["version", "dependencies"]
optional-dependencies = { "lint" = ["ruff"] }
license = { text = "MIT" }
description = "A middleman between GitLab and Discord webhooks to show better formatted messages."
requires-python = ">=3.10"
readme = "README.md"
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python",
    "Topic :: Internet",
    "Topic :: Software Development",
    "Topic :: System :: Logging",
    "Topic :: Utilities",
]

[project.urls]
"Repository" = "https://github.com/Galarzaa90/gitlab-discord-webhook"
"GitHub: Issues" = "https://github.com/Galarzaa90/gitlab-discord-webhook/issues"
"Docker Hub: Repo" = "https://hub.docker.com/repository/docker/galarzaa90/gitlab-discord-webhook"

[project.scripts]
gitlab-discord-webhook = "gitlab_discord_webhook.__main__:main"

[tool.setuptools.dynamic]
version = { attr = "gitlab_discord_webhook.__version__" }
dependencies = { file = ["requirements.txt"] }

[too.ruff]
[tool.ruff.lint]
select = [
    "E", "W293", # pycodestyle
    "F", # Pyflakes
    "N", # pep8-naming
    "D", # pydocstyle
    "UP", # pyupgrade
    "S", # flake8-bandit
    "B", # flake8-bugbear
    "COM", # flake8-commas
    "C4", # flake8-comprehensions
    "FA", # flake8-future-annotations
    "ISC", # flake8-implicit-str-concat
    "G", # flake8-logging-format
    "PIE", # flake8-pie
    "Q", # flake8-quotes
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "ARG", # flake8-unused-arguments
    "PERF", # Perflint
    "RUF", # Ruff-specific rules
    "ANN", # flake8-annotations
]
ignore = [
    "D105", # Missing docstring in magic method
    "D107", # Missing docstring in `__init__`
    "ARG005", # Unused lambda argument
    "D203", # 1 blank line required before class docstring
    "D213", # 1 blank line required before class docstring
    "RUF012", # Mutable class attributes should be annotated with `typing.ClassVar`
    "RUF013", # PEP 484 prohibits implicit `Optional`
    "ANN003", # Missing type annotation for **{name}
    "ANN101", # Missing type annotation for {name} in method
    "ANN102", # Missing type annotation for {name} in classmethod
    "ANN202", # Missing return type annotation for private function {name}
    "ANN204", # Missing return type annotation for special method {name}
    "ANN401", # Dynamically typed expressions ({name}) are disallowed in `other`
]

[tool.ruff.lint.pycodestyle]
max-line-length = 120

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["D", "ANN"]
