language = "python"
parent = "python.scalars"
after = "str"
name = "datetime"
title = "Datetime"
description = "Datetime representation"
code = "import datetime"

[create]
section = "Create"

[create.ymdhms]
action = "From ymdhms"
code = "datetime(year, month, day, hour, minute, second)"

[create.current]
action = "Current datetime"
code = "datetime.now()"

[create.current.utc]
action = "Current datetime in UTC timezone"
code = "datetime.utcnow()"

[create.epoch]
action = "Unix epoch"
code = "datetime.fromtimestamp(0)"

[create.combine]
action = "From date and time"
code = "datetime.combine(date, time)"

[create.str]
action = "Datetime from any valid [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) datetime string"
code = "datetime.fromisoformat(datetime_str)"
details = "e.g. `2023-01-30 23:59`, `2023-01-30T23:59:01`"

[create.str.ymdhms]
action = "Datetime from YYYY-MM-DD HH:mm:ss"
code = "x.strptime('%y-%m-%d %H:%M:%S')"

[create.str.unknown]
action = "Datetime from string (unknown format)"
code = "pandas.to_datetime('2023 Jan 5')"
details = "uses the pandas package"

[create.seconds.epoch]
action = "From total seconds since Unix epoch"
code = "datetime.fromtimestamp(n)"

[create.days.epoch]
action = "From total days since Unix epoch"
code = "datetime.fromtimestamp(0) + timedelta(n)"

[create.seconds.datetime]
action = "From total seconds since reference datetime"
code = "ref_datetime + timedelta(seconds=n)"

[create.days.datetime]
action = "From total days since reference datetime"
code = "ref_datetime + timedelta(n)"


[constants]
section = "Constants"

[constants.min]
action = "Earliest representable datetime"
code = "datetime.min"

[constants.max]
action = "Latest representable datetime"
code = "datetime.max"


[test]
section = "Test"

[test.inherits]
action = "Is datetime"
code = "isinstance(x, datetime.datetime)"

[test.equal]
action = "Same moment"
code = "x == y"
details = "Up to `x.resolution` precision (usually 1Î¼s)"

[test.before]
action = "Happens before _y_"
code = "x < y"

[test.after]
action = "Happens after _y_"
code = "x > y"


[extract]
section = "Extract"

[extract.year]
action = "Year"
code = "x.year"

[extract.month]
action = "Month"
code = "x.month"

[extract.day]
action = "Day"
code = "x.day"

[extract.hour]
action = "Hour"
code = "x.hour"

[extract.minute]
action = "Minute"
code = "x.minute"

[extract.second]
action = "Second"
code = "x.second"

[extract.microsecond]
action = "Microsecond"
code = "x.microsecond"

[extract.weekday]
action = "Weekday number"
code = "x.isoweekday()"
details = "Mon=1, Sun=7"

[extract.weekday.zero]
action = "Weekday number (zero-based)"
code = "x.weekday()"
details = "Mon=0, Sun=6"


[derive]
section = "Derive"

[derive.firstday.year]
action = "Change to first day of year"
code = "x.replace(month=1, day=1)"

[derive.firstday.month]
action = "Change to first day of month"
code = "x.replace(day=1)"

[derive.year]
action = "Change year to _y_"
code = "x.replace(year=y)"

[derive.utc]
action = "In UTC timezone"
code = "?"

[derive.shift.days]
action = "Shift forward by _n_ days"
code = "x + timedelta(days=n)"

[derive.shift.seconds]
action = "Shift forward by _n_ seconds"
code = "x + timedelta(seconds=n)"


[convert]
section = "Convert"

[convert.date]
action = "Date component"
code = "x.date()"

[convert.time]
action = "Time component"
code = "x.time()"

[convert.float]
action = "Timestamp (seconds from Unix epoch), as float"
code = "x.timestamp()"

[convert.str]
action = "Format datetime as [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)"
code = "x.isoformat()"
details = "e.g., `2023-01-01T23:59:00`"

[convert.str.long]
action = "Format readable datetime of consistent length"
code = "x.ctime()"
details = "e.g., `Sun Jan  1 23:59:00 2023`"

[convert.str.ymd]
action = "Format datetime as YYYY-MM-DD"
code = "x.date().isoformat()"
details = "e.g., 2024-01-31"

[convert.str.dmy]
action = "Format datetime as DD-MMM-YYYY"
code = "x.strftime('%d-%b-%Y')"
details = "e.g., `31-Jan-2023`"

[convert.str.hm]
action = "Format datetime as HH:mm"
code = "x.strftime('%H:%M')"
details = "e.g., `23:59`"

[convert.str.hms]
action = "Format datetime as HH:mm:ss"
code = "x.strftime('%H:%M:%S')"
details = "e.g., `23:59:00`"

[convert.str.ymdhms]
action = "Format datetime as YYYY-MM-DD HH:mm:ss"
code = "x.strftime('%y-%m-%d %H:%M:%S')"

[convert.tuple]
action = "Named tuple"
code = "x.timetuple()"
