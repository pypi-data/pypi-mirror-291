language = "python"
parent = "python.scalars"
after = "datetime"
name = "date"
title = "Date"
description = "Date representation"
code = "from datetime import date"

[create]
section = "Create"

[create.ymd]
action = "From ymd"
code = "date(year, month, day)"

[create.current]
action = "Current date"
code = "date.today()"

[create.epoch]
action = "Unix epoch date"
code = "date.fromtimestamp(0)"

[create.str]
action = "Date from any valid [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date string"
code = "date.fromisoformat(date_string)"
details = "e.g., `2023-01-30` or `20230130`"

[create.str.ymd]
action = "Date from YYYY-MM-DD string"
code = "datetime.strptime(datetime_str, '%y-%m-%d')"

[create.str.dmy]
action = "Date from DD-MMM-YYYY string"
code = "datetime.strptime(datetime_str, '%d-%b-%y')"

[create.seconds.epoch]
action = "From total seconds since Unix epoch"
code = "date.fromtimestamp(n)"

[create.days.epoch]
action = "From total days since Unix epoch"
code = "date.fromtimestamp(0) + timedelta(n)"

[create.days.ref]
action = "From total days since reference date"
code = "ref_date + timedelta(n)"


[constants]
section = "Constants"

[constants.min]
action = "Earliest representable date"
code = "date.min"

[constants.max]
action = "Latest representable date"
code = "date.max"


[test]
section = "Test"

[test.inherits]
action = "Is date"
code = "isinstance(x, datetime.date)"

[test.equal]
action = "Same date"
code = "x == y"

[test.before]
action = "Happens before _y_"
code = "x < y"

[test.after]
action = "Happens after _y_"
code = "x > y"


[extract]
section = "Extract"

[extract.days.epoch]
action = "Days from Unix epoch"
code = "(x - date.fromtimestamp(0)).days"

[extract.seconds.epoch]
action = "Seconds from Unix epoch (timestamp)"
code = "(x - date.fromtimestamp(0)).total_seconds()"

[extract.year]
action = "Year"
code = "x.year"

[extract.month]
action = "Month"
code = "x.month"

[extract.day]
action = "Day"
code = "x.day"

[extract.weekday]
action = "Weekday number"
code = "x.isoweekday()"
details = "Mon=1, Sun=7"

[extract.weekday.zero]
action = "Weekday number (zero-based)"
code = "x.weekday()"
details = "Mon=0, Sun=6"


[diff]
section = "Difference between dates"

[diff.timedelta]
action = "Difference between dates, as timedelta"
code = "x - y"

[diff.seconds]
action = "Difference between dates, in seconds"
code = "(x - y).total_seconds()"

[diff.days]
action = "Difference between dates, in whole days"
code = "?"

[diff.years]
action = "Difference between dates, in years"
code = "x.year - y.year - ((x.month, x.day) < (y.month, y.day))"
source = "https://stackoverflow.com/a/9754466/22638740"


[derive]
section = "Derive"

[derive.shift.days]
action = "Shift forward by _n_ days"
code = "x + timedelta(days=n)"


[convert]
section = "Convert"

[convert.datetime]
action = "Datetime"
code = "?"

[convert.timestamp]
action = "Timestamp (Unix epoch)"
code = "(x - date.fromtimestamp(0)).total_seconds()"

[convert.str]
action = "Format date as [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)"
code = "x.isoformat()"
details = "e.g., `2023-01-01`"

[convert.str.ymd]
action = "Format date as YYYY-MM-DD"
code = "x.isoformat()"
details = "e.g., 2024-01-31"

[convert.str.dmy]
action = "Format datetime as DD-MMM-YYYY"
code = "x.strftime('%d-%b-%Y')"
details = "e.g., `31-Jan-2023`"

[convert.str.long]
action = "Format readable datetime of consistent length"
code = "x.ctime()"
details = "e.g., `Sun Jan  1 23:59:00 2023`"

[convert.tuple]
action = "Named tuple"
code = "x.timetuple()"
