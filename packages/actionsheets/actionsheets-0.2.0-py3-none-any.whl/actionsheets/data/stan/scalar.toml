language = "stan"
parent = "stan"
name = "scalar"
title = "Scalar"

[constants]
section = "Create"

[constants.'nan']
action = "NaN"
code = "not_a_number()"

[constants.pi]
action = "_Ï€_"
code = "pi()"

[constants.e]
action = "_e_"
code = "e()"

[constants.sqrt2]
action = "Square root of 2"
code = "sqrt2()"

[constants.'inf']
action = "Positive infinity"
code = "positive_infinity()"

[constants.ninf]
action = "Negative infinity"
code = "negative_infinity()"

[constants.float.eps]
action = "Float epsilon (smallest representable difference)"
code = "?"


[create]
section = "Create"

[create.int]
action = "Declare unconstrainted integer variable"
code = "int x;"

[create.float]
action = "Declare unconstrained float variable"
code = "real x;"

[create.float.value]
action = "Declare unconstrained float with value"
code = "real x = 0.5;"

[create.float.'nan']
action = "Declare unconstrained float variable as NaN"
code = "real x = not_a_number();"

[create.int.bounded]
action = "Declare constrained integer variable"
code = "int<lower=1, upper=10> n;"

[create.float.bounded]
action = "Declare constrained float variable"
code = "real<lower=0, upper=1> prob;"


[test]
section = "Test"

[test.int.equal]
action = "Is integer equal"
code = "x == 5"
details = "Not recommended for float types"

[test.equal.approx.prop]
action = "Approximately equal with proportional tolerance _tol_"
code = "?"

[test.equal.approx.tol]
action = "Approximately equal with absolute tolerance _tol_"
code = "?"

[test.'nan']
action = "Is NaN"
code = "is_nan(x)"

[test.'nan'.2]
code = "is_not_a_number(x)"

[test.finite]
action = "Is finite"
code = "!is_inf(x) && !is_nan(x)"

[test.'inf']
action = "Is infinite"
code = "is_inf(x)"

[test.pinf]
action = "Is positive infinity"
code = "x > 0 && is_inf(x)"

[test.ninf]
action = "Is negative infinity"
code = "x < 0 && is_inf(x)"


[derive]
section = "Derive"

[derive.abs]
action = "Absolute value"
code = "fabs(x)"

[derive.step]
action = "Threshold (step)"
code = "step(x)"
details = "0 if x < 0, else 1"

[derive.add]
action = "Addition"
code = "x + y"

[derive.sub]
action = "Subtraction (difference)"
code = "x - y"

[derive.sub.pos]
action = "Positive difference"
code = "fdim(x, y)"
details = "x - y for x >= y, else 0"

[derive.absdiff]
action = "Absolute difference"
code = "fabs(x - y)"

[derive.mult]
action = "Multiplication"
code = "x * y"

[derive.div]
action = "Division"
code = "x / y"

[derive.inv]
action = "Reciprocal"
code = "inv(x)"
details = "1 / x"

[derive.multadd]
action = "Multiplication followed by addition of _z_"
code = "fma(x, y, z)"
details = "x * y + z"

[derive.sq]
action = "Square (power of 2)"
code = "square(x)"
details = "x ^ 2"

[derive.isq]
action = "Inverse square (power of -2)"
code = "inv_square(x)"
details = "x ^ -2"

[derive.sqrt]
action = "Square root"
code = "sqrt(x)"

[derive.isqrt]
action = "Inverse square root"
code = "inv_sqrt(x)"
details = "1 / sqrt(x)"

[derive.cubert]
action = "Cube root"
code = "cbrt(x)"
details = "pow(x, 1/3)"

[derive.pow]
action = "Raise to power _p_"
code = "x ^ p"

[derive.pow.fun]
code = "pow(x, p)"

[derive.log]
action = "Natural logarithm"
code = "log(x)"

[derive.log2]
action = "Base-2 logarithm"
code = "log2(x)"

[derive.log10]
action = "Base-10 logarithm"
code = "log10(x)"

[derive.loginv]
action = "Natural logarithm of reciprocal"
code = "-log(x)"
details = "log(1/x)"

[derive.log1m]
action = "Natural logarithm of (1 - x)"
code = "log1m(x)"
details = "log(1 - x)"

[derive.log1m.exp]
action = "Natural logarithm of 1 - exp(x)"
code = "log1m_exp(x)"
details = "log(1 - e^x)"

[derive.log1p]
action = "Natural logarithm of (1 + x)"
code = "log1p(x)"
details = "log(1 + x)"

[derive.log1p.exp]
action = "Natural logarithm of 1 + exp(x)"
code = "log1p_exp(x)"
details = "log(1 + e^x)"

[derive.logmult]
action = "Multiplication with log"
code = "lmultiply(x , p)"
details = "p * log(x) for x > 0"

[derive.exp]
action = "Natural exponential"
code = "exp(x)"

[derive.expm1]
action = "Natural exponential of x - 1"
code = "expm1(x)"
details = "(e^x) - 1"

[derive.min]
action = "Min"
code = "fmin(x, y)"

[derive.max]
action = "Max"
code = "fmax(x, y)"

[derive.mod]
action = "Modulus"
code = "fmod(x, y)"
details = "x - floor(x / y) * y"

[derive.floor]
action = "Floor"
code = "floor(x)"

[derive.ceil]
action = "Ceil"
code = "ceil(x)"

[derive.round]
action = "Round"
code = "round(x)"
details = "Output is real"

[derive.truncate]
action = "Truncate to nearest integer"
code = "trunc(x)"
details = "Output is real"

[derive.logsumexp]
action = "Log-sum of exponentials"
code = "log_sum_exp(x, y)"
details = "log(e^x + e^y)"

[derive.logdiffexp]
action = "Log-diff of exponentials"
code = "log_diff_exp(x, y)"
details = "log(e^x - e^y) for x > y"

[derive.logmix]
action = "Proportional log-sum of exponentials (used for mixtures)"
code = "log_mix(theta, x, y)"
details = "log(theta * e^x + (1 - theta) * e^y)"

[derive.logmix.sum]
code = "log_sum_exp(theta + [x, y])"

[derive.logmix.logsum]
code = "log_sum_exp(log(theta) + x, log1m(theta) + y)"

[derive.logit]
action = "Logit transform"
code = "logit(x)"

[derive.ilogit]
action = "Inverse logit transform"
code = "inv_logit(x)"

[derive.ilogit.log]
action = "Natural logarithm of inverse logit"
code = "log_inv_logit(x)"

[derive.ilogit.log1m]
action = "Natural logarithm of 1 minus inverse logit"
code = "log1m_inv_logit(x)"

[derive.binom]
action = "Binomial coefficient (ncr)"
code = "choose(m, k)"
