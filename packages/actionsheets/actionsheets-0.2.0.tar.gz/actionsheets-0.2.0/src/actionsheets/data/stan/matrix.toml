language = "stan"
parent = "stan"
after = "vector"
name = "matrix"
title = "Matrix"

[create]
section = "Create"

[create.define]
action = "Declare _N_ by _M_ matrix"
code = "matrix[N,M] m;"

[create.values]
action = "Declare matrix with values"
code = "matrix[3,2] m = [ [1, 2], [3, 4], [5, 6] ];"

[create.constant.zero]
action = "Declare matrix filled with zeros"
code = "matrix[N,M] m = rep_matrix(0, N, M);"

[create.vector.rows]
action = "Declare matrix from series of row vectors"
code = "matrix[3,M] m = [ rv1, rv2, rv3 ];"

[create.vector.cols]
action = "Declare matrix from series of column vectors"
code = "matrix[N,3] m = [ v1', v2', v3']';"

[create.define.constrain]
action = "Declare constrained matrix"
code = "matrix<lower=0, upper=1>[N,M] m;"

[create.cov]
action = "Declare _K_ by _K_ covariance matrix"
code = "cov_matrix[K] Omega;"

[create.cor]
action = "Declare _K_ by _K_ correlation matrix"
code = "corr_matrix[K] Sigma;"

[create.cholcov]
action = "Declare _K_ by _K_ Cholesky factors of covariance matrix"
code = "cholesky_factor_cov[K] L;"

[create.cholcovmn]
action = "Declare _M_ by _N_ Cholesky factors of covariance matrix"
code = "cholesky_factor_cov[M,N] L;"

[create.cholcor]
action = "Declare Cholesky factors of correlation matrix"
code = "cholesky_factor_corr[K] L;"

[create.vector.col.rep]
action = "Create _N_ by _M_ matrix from replicated column vector of length _N_"
code = "rep_matrix(v, M)"

[create.vector.row.rep]
action = "Create _N_ by _M_ matrix from replicated row vector of length _N_"
code = "rep_matrix(v, N)"


[prop]
section = "Properties"

[prop.length]
action = "Number of elements (NxM)"
code = "num_elements(m)"

[prop.dim]
action = "Dimension sizes"
code = "dims(m)"

[prop.ncol]
action = "Number of columns (M)"
code = "cols(m)"

[prop.nrow]
action = "Number of rows (N)"
code = "rows(m)"


[extract]
section = "Extract"

[extract.elem]
action = "Element at row _i_, column _j_"
code = "m[i,j]"

[extract.col]
action = "Extract _j_th column"
code = "m[, j]"

[extract.col.fun]
code = "col(m, j)"

[extract.col.matrix]
action = "Extract _j_th column as a matrix"
code = "block(m, 1, j, N, 1)"

[extract.row]
action = "Extract _i_th row"
code = "m[i, ]"
details = "Accessing column-wise is much faster than row-wise"

[extract.row.fun]
code = "row(m, i)"

[extract.row.matrix]
action = "Extract _i_th row as a matrix"
code = "block(m, i, 1, 1, M)"

[extract.diag]
action = "Diagonal"
code = "diagonal(m)"


[derive]
section = "Derive"
description = "For many useful functions, see https://jrnold.github.io/ssmodels-in-stan/stan-functions.html"


[derive.map]
section = "Map"

[derive.map.inv]
action = "Inverse"
code = "inverse(m)"

[derive.map.sum]
action = "Sum elementwise"
code = "m + m2"

[derive.map.sub]
action = "Multiply elementwise"
code = "m .* m2"

[derive.map.col.mult]
action = "Column-wise vector multiplication"
code = "rep_matrix(v, N) .* m"

[derive.map.row.mult]
action = "Row-wise vector multiplication"
code = "rep_matrix(v', M) .* m"


[derive.grow]
section = "Grow"

[derive.grow.col.append]
action = "Append vector as column"
code = "append_col(m, v)"

[derive.grow.row.append]
action = "Append vector as row"
code = "append_row(m, v)"


[derive.shrink]
section = "Shrink"

[derive.shrink.slice.cols]
action = "Slice columns"
code = "m[, 2:3]"

[derive.shrink.slice.rows]
action = "Slice rows"
code = "m[2:3, ]"

[derive.shrink.sub.slice]
action = "Submatrix by slicing rows and columns"
code = "m[1:2, 3:4]"

[derive.shrink.sub.slice.length]
action = "Submatrix by start row and columns with length"
code = "block(m, rowstart, colstart, rowN, colN)"


[derive.reshape]
section = "Reshape"
description = "Change dimensions or form of the matrix"

[derive.reshape.tcrossprod]
action = "Cross-product (post-multiply)"
code = "tcrossprod(m)"
details = "m * m'"

[derive.reshape.crossprod]
action = "Cross-product (pre-multiply)"
code = "crossprod(m)"
details = "m' * m"

[derive.reshape.quad]
action = "Quadratic form with matrix"
code = "quad_form(m, m2)"
details = "m2' * m * m2"

[derive.reshape.quad.vector]
action = "Quadratic form with vector"
code = "quad_form(m, v)"
details = "v' * m * v"

[compute]
section = "Computations"

[compute.dot.self.col]
action = "Column-wise self dot product"
code = "columns_dot_self(m)"

[compute.dot.self.row]
action = "Row-wise self dot product"
code = "rows_dot_self(m)"

[compute.dot.col]
action = "Dot product between columns"
code = "columns_dot_product(m, m2)"
details = "vector result"

[compute.dot.row]
action = "Dot product between rows"
code = "rows_dot_product(m, m2)"
details = "vector result"

[compute.matrix.qr]
action = "QR decomposition"
code = """
Q = qr_Q(m);
R = qr_R(m);
"""

[compute.matrix.qr.thin]
action = "Thin QR decomposition"
code = """
Q = qr_thin_Q(m) * sqrt(N - 1);
R = qr_thin_R(m) / sqrt(N - 1);
"""


[convert]
section = "Convert"

[convert.vector]
action = "To vector"
code = "to_vector(m)"
