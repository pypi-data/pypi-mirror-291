language = "python"
parent = "python.collections"
after = "list"
name = "dict"
title = "Dict"
description = "Maps hashable objects to a value"
details = ""
keywords = ["map", "dictionary"]


[create]
section = "Create"
description = "Create a dictionary"

[create.define.empty]
action = "Define empty dictionary"
code = "x = {}"

[create.define.str]
action = "Define with string keys and values"
code = "x = {'color': 'blue', 'size': 'large'}"

[create.define.int]
action = "Define with integer keys"
code = "x = {1: 'a', 2: 'b', 3: 'c'}"

[create.comprehension]
action = "Generate from comprehension over list of keys"
code = """
keys = ['a', 'b', 'c']
{key: key.upper() for key in keys}
"""

[create.iter.fill]
action = "Define from keys iterator and constant value _v_"
code = "dict.fromkeys(key_iter, v)"
keywords = ["fill"]

[create.iter.kv]
action = "Define dynamically from iterators for keys and values"
code = "x = dict(zip(key_iter, value_iter))"


[test]
section = "Test"

[test.inherits]
action = "Is dict or subclass"
code = "isinstance(x, dict)"

[test.is]
action = "Is dict but not subclass"
code = "type(x) is dict"

[test.empty]
action = "Is empty"
code = "x"

[test.nempty]
action = "Is not empty"
code = "not x"

[test.contains.key]
action = "Contains key _k_"
code = "k in x"

[test.contains.value]
action = "Contains value _v_"
code = "v in x.values()"

[test.contains.value.none]
action = "Contains value `None`"
code = "None in x.values()"

[test.contains.keys]
action = "Contains specific keys"
code = "{k1, k2}.issubset(x)"

[test.contains.keys.dyn]
action = "Contains keys _keys_"
code = "set(keys).issubset(x)"

[test.contains.values]
action = "Contains specific values"
code = "{v1, v2}.issubset(x.values())"

[test.contains.values.dyn]
action = "Contains values _values_"
code = "set(values).issubset(x.values())"

[test.contains.duplicate]
action = "Contains duplicate values"
code = "len(x) != len(set(x.values()))"


[extract]
section = "Extract"

[extract.length]
action = "Number of key-value elements"
code = "len(x)"

[extract.hash]
action = "Hash"
code = "hash(frozenset(x.items()))"
source = "https://stackoverflow.com/a/5884123/22638740"

[extract.keys]
action = "Keys"
code = "x.keys()"
details = "As `dict_keys`"

[extract.keys.list]
action = "Keys as list"
code = "list(x)"

[extract.keys.list.sorted]
action = "Keys as sorted list"
code = "sorted(x)"

[extract.values]
action = "Values"
code = "x.values()"
details = "As `dict_values`"

[extract.values.list]
action = "Values as list"
code = "list(x.values())"

[extract.values.sorted]
action = "Values sorted by keys"
code = "[x[k] for k in sorted(x)]"

[extract.entries]
action = "Entries (as list of tuples)"
code = "x.items()"

[extract.value]
action = "Value from key"
code = "x['color']"
details = "Throws an error if missing"

[extract.value.try]
action = "Try get value from key"
code = "x.get('color')"
details = "Returns `None` if missing"

[extract.value.try.default]
action = "Try get value from key, with default _v_ if missing"
code = "x.get('color', v)"

[extract.values.keys.list]
action = "Values from list of keys"
code = "[x[k] for k in keys_list]"

[extract.key.value.first]
action = "First key with value _v_"
code = "next(k for k in x if x[k] == v)"

[extract.keys.value.all]
action = "All keys with value _v_"
code = "[k for k in x if x[k] == v]"


[update]
section = "Update"

[update.transform.entry]
action = "Update entry value"
code = "x['size'] = 'small'"

[update.transform.ifexists]
action = "Update entry, error if missing"
code = "?"
details = "?"

[update.transform.rename]
action = "Rename entry"
code = "x['new'] = x.pop('old')"


[update.grow]
section = "Grow"

[update.grow.add]
action = "Add or update entry"
code = "x['size'] = 'small'"

[update.grow.add.missing]
action = "Add entry with value if it does not exist"
code = "x.setdefault('size', 'medium')"


[update.shrink]
section = "Shrink"

[update.shrink.clear]
action = "Remove all entries (clear)"
code = "x.clear()"

[update.shrink.remove.entry]
action = "Remove entry by key"
code = "del x['size']"

[update.shrink.remove.entries]
action = "Remove entries by keys"
code = "for k in keys: del x[k]"

[update.shrink.pop.entry]
action = "Remove entry by key, get value"
code = "x.pop('size')"

[update.shrink.pop.entries]
action = "Remove keys, get values"
code = "[x.pop(k) for k in keys]"

[update.shrink.pop.last]
action = "Remove last-inserted entry, get value"
code = "x.popitem()"

[update.combine]
section = "Combine"
description = "Instead of merging several dictionaries, consider using a [ChainMap](https://docs.python.org/3/library/collections.html#collections.ChainMap), which is often much faster."

[update.combine.merge]
action = "Merge with another dictionary"
code = "x |= y"

[update.combine.merge.fun]
code = "x.update(y)"


[derive]
section = "Derive"

[derive.copy]
action = "Copy"
code = "x.copy()"

[derive.copy.new]
code = "dict(x)"

[derive.shrink.keys]
action = "Subset for keys"
code = "{k: x[k] for k in keys}"
details = "Error if a key is missing"

[derive.shrink.keys.default]
action = "Subset for keys with default _v_"
code = "{k: x.get(k, default=v) for k in keys}"

[derive.shrink.keys.intersect]
action = "Subset (intersection) for keys"
code = "{k: x[k] for k in x.keys() if k in keys}"
details = "Returns empty dict if all keys are missing"

[derive.shrink.keys.diff]
action = "Subset except for keys"
code = "{k: x[k] for k in x.keys() if k not in keys}"


[derive.combine]
section = "Combine"

[derive.combine.merge]
action = "Merge dictionaries"
code = "z = x | y"

[derive.combine.merge.unpack]
code = "z = {**x, **y}"


[convert]
section = "Convert"

[convert.list]
action = "List of key-value tuples"
code = "x.items()"

[convert.str.json]
action = "JSON string"
code = "json.dumps(x)"

[convert.str.json.robust]
action = "JSON string, handle non-string entries"
code = "json.dumps(x, default = str)"


[iter]
section = "Iterate"

[iter.for.keys]
action = "Loop over keys"
code = "for key in x:"

[iter.for.values]
action = "Loop over values"
code = "for value in x.values():"

[iter.for.entries]
action = "Loop over key-value pairs"
code = "for key, value in x.items():"
details = "More efficient than a key-based for-loop as each `x[k]` lookup requires recomputation of the hash for _k_"



[show]
section = "Show"

[show.print]
action = "Pretty print"
code = "pprint.pprint(x)"
