# Generated by Django 5.0.2 on 2024-07-27 19:28

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Allergens",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("description", models.CharField(max_length=255)),
            ],
            options={
                "db_table": "allergens",
            },
        ),
        migrations.CreateModel(
            name="ComboIngredients",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("extra_price", models.DecimalField(decimal_places=2, max_digits=10)),
            ],
            options={
                "db_table": "combo_ingredients",
            },
        ),
        migrations.CreateModel(
            name="ExtraIngredients",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("max_extra_ingredients", models.IntegerField()),
                ("unit_price", models.DecimalField(decimal_places=2, max_digits=10)),
            ],
            options={
                "db_table": "extra_ingredients",
            },
        ),
        migrations.CreateModel(
            name="RemovableIngredients",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
            ],
            options={
                "db_table": "removable_ingredients",
            },
        ),
        migrations.CreateModel(
            name="RestaurantCategories",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("description", models.CharField(max_length=300)),
            ],
            options={
                "db_table": "restaurant_categories",
            },
        ),
        migrations.CreateModel(
            name="Restaurants",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("img", models.CharField(blank=True, max_length=255, null=True)),
                ("about_us", models.CharField(max_length=300)),
                ("contact_email", models.CharField(max_length=320)),
                ("contact_phone", models.CharField(max_length=15)),
                ("currency", models.CharField(max_length=3)),
                ("main_color", models.CharField(max_length=10, null=True)),
                ("secondary_color", models.CharField(max_length=10, null=True)),
                ("instagram", models.CharField(max_length=255, null=True)),
                ("facebook", models.CharField(max_length=255, null=True)),
                ("twitter", models.CharField(max_length=255, null=True)),
            ],
            options={
                "db_table": "restaurants",
            },
        ),
        migrations.CreateModel(
            name="ComboIngredientsSections",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("max_use", models.IntegerField()),
                (
                    "ingredients",
                    models.ManyToManyField(
                        related_name="combo_ingredients_sections_ingredients",
                        to="database.comboingredients",
                    ),
                ),
            ],
            options={
                "db_table": "combo_ingredients_sections",
            },
        ),
        migrations.CreateModel(
            name="Products",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("price", models.DecimalField(decimal_places=2, max_digits=10)),
                ("net_price", models.DecimalField(decimal_places=2, max_digits=10)),
                ("description", models.CharField(max_length=300)),
                ("img", models.CharField(blank=True, max_length=255)),
                ("rating", models.DecimalField(decimal_places=2, max_digits=3)),
                ("enabled", models.BooleanField(default=True)),
                (
                    "allergens",
                    models.ManyToManyField(
                        db_table="product_allergen", to="database.allergens"
                    ),
                ),
                (
                    "combo_ingredients_sections",
                    models.ManyToManyField(
                        db_table="product_combo-ingredients",
                        to="database.comboingredientssections",
                    ),
                ),
                (
                    "extra_ingredients",
                    models.ManyToManyField(
                        db_table="product_extra-ingredients",
                        to="database.extraingredients",
                    ),
                ),
                (
                    "removable_ingredients",
                    models.ManyToManyField(
                        db_table="product_removable-ingredients",
                        to="database.removableingredients",
                    ),
                ),
                (
                    "category",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="restaurant_categories",
                        to="database.restaurantcategories",
                    ),
                ),
                (
                    "restaurant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="restaurants",
                        to="database.restaurants",
                    ),
                ),
            ],
            options={
                "db_table": "products",
            },
        ),
        migrations.CreateModel(
            name="ComboSections",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                (
                    "products",
                    models.ManyToManyField(
                        blank=True,
                        db_table="combo-sections_products",
                        default=None,
                        to="database.products",
                    ),
                ),
            ],
            options={
                "db_table": "combo_sections",
            },
        ),
        migrations.AddField(
            model_name="restaurantcategories",
            name="restaurant",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="restaurants_categories",
                to="database.restaurants",
            ),
        ),
        migrations.AddField(
            model_name="removableingredients",
            name="restaurant",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="restaurant_removable_ingredients",
                to="database.restaurants",
            ),
        ),
        migrations.AddField(
            model_name="extraingredients",
            name="restaurant",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="restaurant_extra_ingredients",
                to="database.restaurants",
            ),
        ),
        migrations.CreateModel(
            name="Combos",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                (
                    "price",
                    models.DecimalField(decimal_places=2, default=0, max_digits=10),
                ),
                (
                    "net_price",
                    models.DecimalField(decimal_places=2, default=0, max_digits=10),
                ),
                ("description", models.CharField(blank=True, default="", max_length=300)),
                ("image_url", models.CharField(blank=True, default="", max_length=255)),
                ("active", models.BooleanField(db_column="active", default=True)),
                (
                    "sections",
                    models.ManyToManyField(
                        blank=True,
                        db_column="combo_combo-sections",
                        default=None,
                        to="database.combosections",
                    ),
                ),
                (
                    "restaurant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="combos_restaurants",
                        to="database.restaurants",
                    ),
                ),
            ],
            options={
                "db_table": "combos",
            },
        ),
        migrations.CreateModel(
            name="CustomUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
                (
                    "restaurants",
                    models.ManyToManyField(
                        db_table="user_restaurants", to="database.restaurants"
                    ),
                ),
            ],
            options={
                "db_table": "custom_users",
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
