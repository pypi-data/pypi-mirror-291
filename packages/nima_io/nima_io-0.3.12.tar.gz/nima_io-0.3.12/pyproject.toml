[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]

[project]
authors = [
  {name = 'Daniele Arosio', email = 'darosio@duck.com'}
]
classifiers = [
  "Environment :: Console",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Unix Shell",
  "Intended Audience :: Science/Research",
  "Topic :: Scientific/Engineering",
  "Development Status :: 3 - Alpha"
]
dependencies = [
  'click <= 8.1.7',
  'jpype1 <= 1.5.0',
  'lxml <= 5.3.0',
  'numpy <= 2.1.0',
  'pims <= 0.7',
  "setuptools",
  "scyjava <= 1.10.0",
  "bioio-bioformats <= 1.0.0",
  "readlif <= 0.6.5",
  "dask-image <= 2024.5.3",
  "pyometiff <= 1.0.0"
]
description = "A project to read microscopy files."
keywords = [
  "Bioimage",
  "Image Analysis",
  "Metadata",
  "Open Microscopy",
  "Tiled Images"
]
license = "BSD-3-Clause"
name = "nima_io"
readme = "README.md"
requires-python = ">=3.10, <3.13"
version = "0.3.12"

[project.optional-dependencies]
dev = [
  "bfio <= 2.4.2",
  "commitizen <= 3.29.0",
  "ipykernel",
  "jupyter",
  "matplotlib <= 3.9.2",
  "pre-commit <= 3.8.0",
  "pylsp-mypy",
  "ruff <= 0.6.1",
  "ruff-lsp",
  "scikit-image <= 0.24.0"
]
docs = [
  "autodocsumm <= 0.2.13",
  "nbsphinx <= 0.9.5",
  "pydata-sphinx-theme <= 0.15.4",
  "Sphinx <= 8.0.2",
  "sphinx-click <= 6.0.0",
  "sphinx_autodoc_typehints <= 2.2.3",
  "sphinxcontrib-plantuml <= 0.30",
  "xmltodict"
]
tests = [
  "coverage[toml] <= 7.6.1",
  "mypy <= 1.11.1",
  "pygments <= 2.18.0",  # color xdoctest
  "pytest <= 8.3.2",
  "types-click <= 7.1.8",
  "xdoctest <= 1.2.0"
]

[project.scripts]
imgdiff = "nima_io.__main__:imgdiff"

[project.urls]
"Bug Tracker" = "https://github.com/darosio/nima_io/issues"
Changelog = "https://github.com/darosio/nima_io/blob/main/CHANGELOG.md"
# Discussions = "https://github.com/darosio/nima_io/discussions"
Documentation = "https://nima-io.readthedocs.io"
"Github releases" = "https://github.com/darosio/nima_io/releases"
Homepage = "https://github.com/darosio/nima_io"

[tool.codespell]
count = true
ignore-words-list = 'ciao'
quiet-level = 3
skip = 'examples/general_reading_and_development.ipynb,aics_et_al.ipynb'

[tool.commitizen]
name = "cz_customize"
tag_format = "v$version"
version = "0.3.12"
version_files = [
  "pyproject.toml:version",
  "docs/conf.py:release",
  "README.md:Version",
  "tests/test_cli.py:expected_version"
]

[tool.commitizen.customize]
bump_map = {"^.+!:" = "MAJOR", "BREAKING CHANGE" = "MAJOR", "feat" = "MINOR", "fix" = "PATCH", "perf" = "PATCH", "refactor" = "PATCH"}
bump_pattern = "^(BREAKING CHANGE|feat|fix|perf|refactor)"
change_type_map = {"feat" = "Feat", "fix" = "Fix", "docs" = "Docs", "build" = "Build", "style" = "Style", "refactor" = "Refactor", "perf" = "Perf", "test" = "Test", "ci" = "CI/CD"}
change_type_order = ["BREAKING CHANGE", "Feat", "Fix", "Docs", "Style", "Perf", "Test", "Build", "CI/CD"]
changelog_pattern = "^(feat|fix|docs|style|refactor|perf|test|build|ci)?(\\(.*\\))?(!)?"
commit_parser = "^(?P<change_type>feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert)(?:\\((?P<scope>[^()\r\n]*)\\)|\\()?(?P<breaking>!)?:\\s(?P<message>.*)?"
example = """fix(parser): correct minor typos in code\n
see the issue for details on the typos fixed\n
closes issue #12
"""
info_path = "cz_customize_info.txt"
message_template = "{{change_type}}:{% if show_message %} {{message}}{% endif %}"
schema = """
<type>(<scope>): <subject>
<BLANK LINE>
<body>
<BLANK LINE>
(BREAKING CHANGE: )<footer>
"""
schema_pattern = "^(feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert|bump)(?:\\(([^()\r\n]*)\\)|\\()?(!)?:\\s(.*)?"

[[tool.commitizen.customize.questions]]
choices = [
  {value = "feat", name = "feat: A new feature. Correlates with MINOR in SemVer"},
  {value = "fix", name = "fix: A bug fix. Correlates with PATCH in SemVer"},
  {value = "perf", name = "perf: A code change that improves performance. Correlates with PATCH in SemVer"},
  {value = "docs", name = "docs: Documentation only changes"},
  {value = "style", name = "style: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)"},
  {value = "refactor", name = "refactor: A code change that neither fixes a bug nor adds a feature"},
  {value = "test", name = "test: Adding missing or correcting existing tests"},
  {value = "build", name = "build: Changes that update the build system, development tools or external dependencies"},
  {value = "ci", name = "ci: Changes to our CI configuration files and scripts (example scopes: GitLabCI)"},
  {value = "revert", name = "revert: Reverting to previous commit(s)."}
]
message = "Select the type of change you are committing"
name = "change_type"
type = "list"

[[tool.commitizen.customize.questions]]
message = "Body."
name = "message"
type = "input"

[[tool.commitizen.customize.questions]]
message = "Do you want to add body message in commit?"
name = "show_message"
type = "confirm"

[tool.coverage.paths]
source = ["src", "*/site-packages"]
tests = ["tests", "*/tests"]

[tool.coverage.report]
# fail_under = 100
exclude_lines = [
  "pragma: no cover"
]
show_missing = true

[tool.coverage.run]
branch = true
omit = ["*__init__.py"]
source = ["nima_io", "tests"]

[tool.hatch.envs.default]
features = ["dev", "tests", "docs"]

[tool.hatch.envs.default.scripts]
bump = [
  "cz bump --major-version-zero -ch {args}",  # e.g. "--increment PATCH"
  "hatch build",
  "export TEST_PYPI_TOKEN=$(pass show cloud/test_pypi | head -n 1) && hatch publish -r test -u __token__ -a $TEST_PYPI_TOKEN"
]
ch = "cz ch --incremental --unreleased-version HEAD"
clean = "rm -rf ./build .coverage ./__pycache__ ./.mypy_cache ./.pytest_cache ./docs/_build ./tests/__pycache__ ./dist ./src/nima_io/__pycache__"
docs = "sphinx-build docs docs/_build"
docserve = "python -m http.server 8000 -d docs/_build"
init = [
  "pre-commit --version",
  "pre-commit install",
  "pre-commit install --hook-type commit-msg --hook-type pre-push"
]
lint = [
  "pre-commit --version",
  "pre-commit run --all-files --show-diff-on-failure {args}"
]

[tool.hatch.envs.tests]
features = ["tests"]
template = "tests"

[[tool.hatch.envs.tests.matrix]]
python = ["3.12", "3.11", "3.10"]  # reverse order to ensure the presence in older python of module included in newer versions

[tool.hatch.envs.tests.scripts]
all = ["test", "type", "xdoc", "cov"]
cov = [
  "coverage combine",
  "coverage report",
  "coverage xml"
]
test = "coverage run -p -m pytest -v"
type = "mypy src tests docs/conf.py"
xdoc = "python -m xdoctest nima_io all"

[tool.isort]
combine_as_imports = true
force_single_line = false
include_trailing_comma = true
known_first_party = "nima_io"
line_length = 88  # to match black's default line length
multi_line_output = 3
profile = "black"

[tool.mypy]
# enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
enable_error_code = ["redundant-expr", "truthy-bool"]
plugins = ["numpy.typing.mypy_plugin"]
pretty = true
show_column_numbers = true
show_error_codes = true
show_error_context = true
strict = true
warn_unreachable = true
warn_unused_configs = true

[tool.pydoclint]
check-class-attributes = false

[tool.pylsp-mypy]
dmypy = false
enabled = true
live_mode = true
strict = true

[tool.pytest.ini_options]
addopts = ["-ra", "--showlocals", "--strict-markers", "--strict-config"]
# xfail_strict = true
# filterwarnings = ["ignore::DeprecationWarning", "ignore:OVER"]
filterwarnings = ["ignore::DeprecationWarning"]
log_cli_level = "INFO"
markers = [
  "slow: marks tests as slow (deselect with '-m \"not slow\"')"
]
minversion = "6.0"
testpaths = [
  "tests"
]

[tool.ruff]
force-exclude = true
line-length = 88
target-version = "py312"

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint]
ignore = ["ANN101", "ANN102", "ISC001"]
select = [
  "A",  # builtins
  "ANN",  # typing annotation
  "ARG",  # unused arguments
  "B",  # bugbear
  "C",
  "C4",  # comprehensions
  "C90",  # mccabe
  "D",  # pydocstyle
  "DTZ",  # dates
  "E",  # pycodestyle
  "TRY",  # exceptions
  "EM",  # exceptions
  "ERA",  # eradicate
  "F",  # pyflakes
  "FBT",  # boolean-trap
  "I",  # isort
  "ICN",  # import conventions (opinionated)
  "ISC",  # implicit-str-concat
  "N",  # pep8-naming
  "PD",  # pandas-vet
  "PGH",  # pygrep WAIT
  "PL",  # pylint see PLR2004...
  "PT",  # pytest-style
  "PTH",  # use-pathlib
  "Q",  # quotes
  "RUF",  # Ruff
  "S",  # bandit XXX
  "SIM",  # simplify
  "TID",  # tidy-imports
  "UP",  # pyupgrade
  "YTT",  # 2020
  "W"  # pycodestyle
]
isort.combine-as-imports = true
isort.force-single-line = false
isort.known-first-party = ["nima_io"]
isort.split-on-trailing-comma = true
mccabe.max-complexity = 12

[tool.ruff.lint.per-file-ignores]
"*.ipynb" = ["ERA", "N816", "S314"]
"tests/*" = ["PLR2004", "S101"]
"tests/test_cli.py" = [
  "S603"  # Need to call a process as CliRunner and javabridge does not play well together
]

[tool.ruff.lint.pydocstyle]
convention = "numpy"
