# CI Workflow
# This workflow runs linting, type checking, and testing (pytest with coverage),
# builds documentation, and deploys it to GitHub Pages.
name: CI

on:
  workflow_dispatch:
  pull_request:
    paths-ignore:
      - "docs/**"
      - "*.md"
  push:
    paths-ignore:
      - "*.md"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  STABLE_PYTHON_VERSION: "3.12"
  PYTHONUNBUFFERED: "1"
  FORCE_COLOR: "1"

jobs:
  pre-commit:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python-${{ env.STABLE_PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.STABLE_PYTHON_VERSION }}

      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          distribution: "adopt"
          java-version: 11

      - name: Display JAVA version
        run: java -version

      - name: Cache pip dependencies
        id: cache-pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ env.STABLE_PYTHON_VERSION }}-${{ hashFiles('**/constraints.txt', '**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ env.STABLE_PYTHON_VERSION }}-

      - name: Install pip and hatch
        run: |
          python -m pip install --constraint=.github/workflows/constraints.txt pip hatch

      - name: Cache pre-commit
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit/
          key: pre-commit-${{ env.STABLE_PYTHON_VERSION }}-${{ hashFiles('.pre-commit-config.yaml') }}
          restore-keys: |
            pre-commit-${{ env.STABLE_PYTHON_VERSION }}-

      - name: Run lint
        run: hatch run lint

  tests:
    name: ${{ matrix.tests }} py-${{ matrix.python }} on ${{ startsWith(matrix.os, 'macos-') && 'macOS' || startsWith(matrix.os, 'windows-') && 'Windows' || 'Linux' }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest] # , windows-latest
        python: ["3.12", "3.11", "3.10"]
        tests: [pytest, mypy, xdoc]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python-${{ matrix.python }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}

      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          distribution: "adopt"
          java-version: 11

      - name: Display JAVA version
        run: java -version

      - name: Cache tests/data
        id: cache-data
        uses: actions/cache@v4
        with:
          path: tests/data
          key: ${{ hashFiles('tests/data.filenames.md5') }}
          enableCrossOsArchive: true

      - name: Download tests data files
        if: steps.cache-data.outputs.cache-hit != 'true' && matrix.tests != 'mypy'
        shell: bash
        run: |
          base_url="https://gin.g-node.org/darosio/imgread-testdata/raw/master/"
          wget -P tests/data/ -i tests/data.filenames.txt -B "$base_url"
          files=($(<tests/data.filenames.txt))
          echo "files=${files[*]}" >> $GITHUB_OUTPUT

      - name: List cached data files
        if: matrix.os != 'windows-latest'
        run: |
          echo "Listing files in tests/data"
          ls -alh tests/data

      # TODO: check
      - name: Setup pip cache directory
        run: |
          mkdir -p ~/.cache/pip
        if: runner.os == 'macOS'

      - name: Cache pip
        id: cache-pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}|pip|${{ matrix.python }}|${{ hashFiles('**/constraints.txt', '**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}|pip|${{ matrix.python }}|
          enableCrossOsArchive: true
          fail-on-cache-miss: false

      - name: Install pip and hatch
        run: |
          python -m pip install --constraint=.github/workflows/constraints.txt pip hatch

      - name: Run pytest and coverage
        if: matrix.tests == 'pytest'
        run: hatch run tests.py${{ matrix.python }}:test

      - name: Run coverage
        if: matrix.tests == 'pytest'
        run: hatch run tests.py${{ matrix.python }}:cov

      - name: Upload coverage report
        if: matrix.tests == 'pytest'
        uses: codecov/codecov-action@v4.5.0
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Run mypy
        if: matrix.tests == 'mypy'
        run: hatch run tests.py${{ matrix.python }}:type

      - name: Run xdoctest
        if: matrix.tests == 'xdoc'
        run: hatch run tests.py${{ matrix.python }}:xdoc

  testpypi:
    needs: [pre-commit, tests]
    runs-on: ubuntu-latest
    if: "startsWith(github.event.head_commit.message, 'bump:')"
    outputs:
      version: ${{ steps.version.outputs.ver }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python-${{ env.STABLE_PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.STABLE_PYTHON_VERSION }}

      - name: Get version
        id: version
        run: |
          echo "Extracting version from commit message..."
          ver=$(echo "${{ github.event.head_commit.message }}" | awk '{ print $NF }')
          echo "ver=${ver}" >> $GITHUB_OUTPUT
          echo "ver=${ver}" >> $GITHUB_ENV
          echo "Version extracted: $ver"

      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          distribution: "adopt"
          java-version: 11

      - name: Cache pip
        id: cache-pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}|pip|${{ env.STABLE_PYTHON_VERSION }}|${{ hashFiles('**/constraints.txt', '**/pyproject.toml') }}

      - name: Install pip
        run: python -m pip install --constraint=.github/workflows/constraints.txt pip

      - name: Install and run CLI
        run: |
          echo "Installing nima_io version ${{ env.ver }} from TestPyPI..."
          python -m pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ nima_io==${{ env.ver }}
          echo "Running imgdiff to verify installation..."
          imgdiff --version

  release:
    name: Release to GitHub
    needs: testpypi
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ needs.testpypi.outputs.version }}
          name: v${{ needs.testpypi.outputs.version }}
          # bodyFile: "release.md"  # Uncomment this line if you want to include a changelog or release notes from a file
          draft: false
          prerelease: false

  publish:
    name: Publish to PyPI
    needs: testpypi
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.STABLE_PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.STABLE_PYTHON_VERSION }}

      - name: Build and publish to PyPI
        run: |
          pipx run hatch build
          pipx run hatch publish --user=__token__ --auth=${{ secrets.PYPI_TOKEN }}

  docs_build:
    name: Build Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.STABLE_PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.STABLE_PYTHON_VERSION }}

      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          distribution: "adopt"
          java-version: 11

      - name: Display JAVA version
        run: java -version

      - name: Install binaries for docs
        run: |
          sudo add-apt-repository ppa:openjdk-r/ppa
          sudo apt-get update
          sudo apt-get install -y pandoc plantuml

      - name: Cache tests/data
        id: cache-data
        uses: actions/cache@v4
        with:
          path: tests/data
          key: ${{ hashFiles('tests/data.filenames.md5') }}

      - name: Download tests data files
        if: steps.cache-data.outputs.cache-hit != 'true'
        run: |
          base_url="https://gin.g-node.org/darosio/imgread-testdata/raw/master/"
          wget -P tests/data/ -i tests/data.filenames.txt -B "$base_url"
          # files=($(<tests/data.filenames.txt))
          # echo "files=${files[*]}" >> $GITHUB_OUTPUT

      - name: List cached data files
        run: |
          echo "Listing files in tests/data"
          ls -a tests/data

      - name: Cache pip
        id: cache-pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}|pip|${{ env.STABLE_PYTHON_VERSION }}|-${{ hashFiles('**/constraints.txt', '**/pyproject.toml') }}

      - name: Install pip and hatch
        run: |
          python -m pip install --constraint=.github/workflows/constraints.txt pip hatch

      - name: Run hatch
        run: hatch run docs

      - name: Upload documentation artifact
        uses: actions/upload-pages-artifact@v3
        with:
          name: github-pages
          path: ./docs/_build

  docs_deploy:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    # if: ${{ github.ref == 'refs/heads/main' }}
    needs: docs_build
    environment:
      name: github-pages
      # url: ${{ steps.deployment.outputs.page_url }}
    # Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
    permissions:
      contents: read
      pages: write
      id-token: write
    steps:
      - name: Download Documentation Artifact
        uses: actions/download-artifact@v4
        with:
          name: github-pages

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  auto_merge_deps:
    name: Auto Merge Dependencies Labeled PRs
    needs: [pre-commit, tests, docs_build]
    # Run only on pull requests labeled as dependencies or with the pre-commit CI commit message.
    if: >
      startsWith(github.event.pull_request.title, 'build(pre-commit): update hooks') ||
      contains(github.event.pull_request.labels.*.name, 'dependencies')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Merge PR
        uses: pascalgn/automerge-action@v0.16.3
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          MERGE_LABELS: ""
          MERGE_METHOD: squash
          DELETE_BRANCH_AFTER_MERGE: true
          # LOG: "TRACE" # or DEBUG
          LOG: TRACE # Available options: TRACE, DEBUG, INFO, WARN, ERROR
