# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class RunSpecCreateForPipelineAPIInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cluster_id': 'int',
        'cluster_node_ids': 'list[int]',
        'description': 'str',
        'docker_credentials_id': 'int',
        'image_url': 'str',
        'kernel_resource_spec_preset_id': 'int',
        'project_name': 'str',
        'run_spec_input': 'V1RunSpecInputLegacy',
        'title': 'str'
    }

    attribute_map = {
        'cluster_id': 'cluster_id',
        'cluster_node_ids': 'cluster_node_ids',
        'description': 'description',
        'docker_credentials_id': 'docker_credentials_id',
        'image_url': 'image_url',
        'kernel_resource_spec_preset_id': 'kernel_resource_spec_preset_id',
        'project_name': 'projectName',
        'run_spec_input': 'run_spec_input',
        'title': 'title'
    }

    def __init__(self, cluster_id=None, cluster_node_ids=None, description=None, docker_credentials_id=None, image_url=None, kernel_resource_spec_preset_id=None, project_name=None, run_spec_input=None, title=None, local_vars_configuration=None):  # noqa: E501
        """RunSpecCreateForPipelineAPIInput - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._cluster_id = None
        self._cluster_node_ids = None
        self._description = None
        self._docker_credentials_id = None
        self._image_url = None
        self._kernel_resource_spec_preset_id = None
        self._project_name = None
        self._run_spec_input = None
        self._title = None
        self.discriminator = None

        self.cluster_id = cluster_id
        if cluster_node_ids is not None:
            self.cluster_node_ids = cluster_node_ids
        if description is not None:
            self.description = description
        self.docker_credentials_id = docker_credentials_id
        self.image_url = image_url
        self.kernel_resource_spec_preset_id = kernel_resource_spec_preset_id
        self.project_name = project_name
        self.run_spec_input = run_spec_input
        self.title = title

    @property
    def cluster_id(self):
        """Gets the cluster_id of this RunSpecCreateForPipelineAPIInput.  # noqa: E501


        :return: The cluster_id of this RunSpecCreateForPipelineAPIInput.  # noqa: E501
        :rtype: int
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id):
        """Sets the cluster_id of this RunSpecCreateForPipelineAPIInput.


        :param cluster_id: The cluster_id of this RunSpecCreateForPipelineAPIInput.  # noqa: E501
        :type cluster_id: int
        """
        if self.local_vars_configuration.client_side_validation and cluster_id is None:  # noqa: E501
            raise ValueError("Invalid value for `cluster_id`, must not be `None`")  # noqa: E501

        self._cluster_id = cluster_id

    @property
    def cluster_node_ids(self):
        """Gets the cluster_node_ids of this RunSpecCreateForPipelineAPIInput.  # noqa: E501


        :return: The cluster_node_ids of this RunSpecCreateForPipelineAPIInput.  # noqa: E501
        :rtype: list[int]
        """
        return self._cluster_node_ids

    @cluster_node_ids.setter
    def cluster_node_ids(self, cluster_node_ids):
        """Sets the cluster_node_ids of this RunSpecCreateForPipelineAPIInput.


        :param cluster_node_ids: The cluster_node_ids of this RunSpecCreateForPipelineAPIInput.  # noqa: E501
        :type cluster_node_ids: list[int]
        """

        self._cluster_node_ids = cluster_node_ids

    @property
    def description(self):
        """Gets the description of this RunSpecCreateForPipelineAPIInput.  # noqa: E501


        :return: The description of this RunSpecCreateForPipelineAPIInput.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RunSpecCreateForPipelineAPIInput.


        :param description: The description of this RunSpecCreateForPipelineAPIInput.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def docker_credentials_id(self):
        """Gets the docker_credentials_id of this RunSpecCreateForPipelineAPIInput.  # noqa: E501


        :return: The docker_credentials_id of this RunSpecCreateForPipelineAPIInput.  # noqa: E501
        :rtype: int
        """
        return self._docker_credentials_id

    @docker_credentials_id.setter
    def docker_credentials_id(self, docker_credentials_id):
        """Sets the docker_credentials_id of this RunSpecCreateForPipelineAPIInput.


        :param docker_credentials_id: The docker_credentials_id of this RunSpecCreateForPipelineAPIInput.  # noqa: E501
        :type docker_credentials_id: int
        """

        self._docker_credentials_id = docker_credentials_id

    @property
    def image_url(self):
        """Gets the image_url of this RunSpecCreateForPipelineAPIInput.  # noqa: E501


        :return: The image_url of this RunSpecCreateForPipelineAPIInput.  # noqa: E501
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this RunSpecCreateForPipelineAPIInput.


        :param image_url: The image_url of this RunSpecCreateForPipelineAPIInput.  # noqa: E501
        :type image_url: str
        """
        if self.local_vars_configuration.client_side_validation and image_url is None:  # noqa: E501
            raise ValueError("Invalid value for `image_url`, must not be `None`")  # noqa: E501

        self._image_url = image_url

    @property
    def kernel_resource_spec_preset_id(self):
        """Gets the kernel_resource_spec_preset_id of this RunSpecCreateForPipelineAPIInput.  # noqa: E501


        :return: The kernel_resource_spec_preset_id of this RunSpecCreateForPipelineAPIInput.  # noqa: E501
        :rtype: int
        """
        return self._kernel_resource_spec_preset_id

    @kernel_resource_spec_preset_id.setter
    def kernel_resource_spec_preset_id(self, kernel_resource_spec_preset_id):
        """Sets the kernel_resource_spec_preset_id of this RunSpecCreateForPipelineAPIInput.


        :param kernel_resource_spec_preset_id: The kernel_resource_spec_preset_id of this RunSpecCreateForPipelineAPIInput.  # noqa: E501
        :type kernel_resource_spec_preset_id: int
        """

        self._kernel_resource_spec_preset_id = kernel_resource_spec_preset_id

    @property
    def project_name(self):
        """Gets the project_name of this RunSpecCreateForPipelineAPIInput.  # noqa: E501


        :return: The project_name of this RunSpecCreateForPipelineAPIInput.  # noqa: E501
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """Sets the project_name of this RunSpecCreateForPipelineAPIInput.


        :param project_name: The project_name of this RunSpecCreateForPipelineAPIInput.  # noqa: E501
        :type project_name: str
        """

        self._project_name = project_name

    @property
    def run_spec_input(self):
        """Gets the run_spec_input of this RunSpecCreateForPipelineAPIInput.  # noqa: E501


        :return: The run_spec_input of this RunSpecCreateForPipelineAPIInput.  # noqa: E501
        :rtype: V1RunSpecInputLegacy
        """
        return self._run_spec_input

    @run_spec_input.setter
    def run_spec_input(self, run_spec_input):
        """Sets the run_spec_input of this RunSpecCreateForPipelineAPIInput.


        :param run_spec_input: The run_spec_input of this RunSpecCreateForPipelineAPIInput.  # noqa: E501
        :type run_spec_input: V1RunSpecInputLegacy
        """
        if self.local_vars_configuration.client_side_validation and run_spec_input is None:  # noqa: E501
            raise ValueError("Invalid value for `run_spec_input`, must not be `None`")  # noqa: E501

        self._run_spec_input = run_spec_input

    @property
    def title(self):
        """Gets the title of this RunSpecCreateForPipelineAPIInput.  # noqa: E501


        :return: The title of this RunSpecCreateForPipelineAPIInput.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this RunSpecCreateForPipelineAPIInput.


        :param title: The title of this RunSpecCreateForPipelineAPIInput.  # noqa: E501
        :type title: str
        """
        if self.local_vars_configuration.client_side_validation and title is None:  # noqa: E501
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RunSpecCreateForPipelineAPIInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RunSpecCreateForPipelineAPIInput):
            return True

        return self.to_dict() != other.to_dict()
