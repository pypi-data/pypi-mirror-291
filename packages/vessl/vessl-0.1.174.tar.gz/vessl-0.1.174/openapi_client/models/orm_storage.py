# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class OrmStorage(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'base_path': 'str',
        'bucket_name': 'str',
        'created_dt': 'datetime',
        'edges': 'OrmStorageEdges',
        'id': 'int',
        'immutable_slug': 'str',
        'is_public_bucket': 'bool',
        'is_vessl_managed': 'bool',
        'organization_credentials_id': 'int',
        'provider': 'str',
        'provider_endpoint': 'str',
        'region_id': 'int',
        'storage_organization': 'int',
        'updated_dt': 'datetime'
    }

    attribute_map = {
        'base_path': 'base_path',
        'bucket_name': 'bucket_name',
        'created_dt': 'created_dt',
        'edges': 'edges',
        'id': 'id',
        'immutable_slug': 'immutable_slug',
        'is_public_bucket': 'is_public_bucket',
        'is_vessl_managed': 'is_vessl_managed',
        'organization_credentials_id': 'organization_credentials_id',
        'provider': 'provider',
        'provider_endpoint': 'provider_endpoint',
        'region_id': 'region_id',
        'storage_organization': 'storage_organization',
        'updated_dt': 'updated_dt'
    }

    def __init__(self, base_path=None, bucket_name=None, created_dt=None, edges=None, id=None, immutable_slug=None, is_public_bucket=None, is_vessl_managed=None, organization_credentials_id=None, provider=None, provider_endpoint=None, region_id=None, storage_organization=None, updated_dt=None, local_vars_configuration=None):  # noqa: E501
        """OrmStorage - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._base_path = None
        self._bucket_name = None
        self._created_dt = None
        self._edges = None
        self._id = None
        self._immutable_slug = None
        self._is_public_bucket = None
        self._is_vessl_managed = None
        self._organization_credentials_id = None
        self._provider = None
        self._provider_endpoint = None
        self._region_id = None
        self._storage_organization = None
        self._updated_dt = None
        self.discriminator = None

        self.base_path = base_path
        if bucket_name is not None:
            self.bucket_name = bucket_name
        if created_dt is not None:
            self.created_dt = created_dt
        if edges is not None:
            self.edges = edges
        if id is not None:
            self.id = id
        if immutable_slug is not None:
            self.immutable_slug = immutable_slug
        if is_public_bucket is not None:
            self.is_public_bucket = is_public_bucket
        if is_vessl_managed is not None:
            self.is_vessl_managed = is_vessl_managed
        self.organization_credentials_id = organization_credentials_id
        if provider is not None:
            self.provider = provider
        self.provider_endpoint = provider_endpoint
        self.region_id = region_id
        self.storage_organization = storage_organization
        if updated_dt is not None:
            self.updated_dt = updated_dt

    @property
    def base_path(self):
        """Gets the base_path of this OrmStorage.  # noqa: E501


        :return: The base_path of this OrmStorage.  # noqa: E501
        :rtype: str
        """
        return self._base_path

    @base_path.setter
    def base_path(self, base_path):
        """Sets the base_path of this OrmStorage.


        :param base_path: The base_path of this OrmStorage.  # noqa: E501
        :type base_path: str
        """

        self._base_path = base_path

    @property
    def bucket_name(self):
        """Gets the bucket_name of this OrmStorage.  # noqa: E501


        :return: The bucket_name of this OrmStorage.  # noqa: E501
        :rtype: str
        """
        return self._bucket_name

    @bucket_name.setter
    def bucket_name(self, bucket_name):
        """Sets the bucket_name of this OrmStorage.


        :param bucket_name: The bucket_name of this OrmStorage.  # noqa: E501
        :type bucket_name: str
        """

        self._bucket_name = bucket_name

    @property
    def created_dt(self):
        """Gets the created_dt of this OrmStorage.  # noqa: E501


        :return: The created_dt of this OrmStorage.  # noqa: E501
        :rtype: datetime
        """
        return self._created_dt

    @created_dt.setter
    def created_dt(self, created_dt):
        """Sets the created_dt of this OrmStorage.


        :param created_dt: The created_dt of this OrmStorage.  # noqa: E501
        :type created_dt: datetime
        """

        self._created_dt = created_dt

    @property
    def edges(self):
        """Gets the edges of this OrmStorage.  # noqa: E501


        :return: The edges of this OrmStorage.  # noqa: E501
        :rtype: OrmStorageEdges
        """
        return self._edges

    @edges.setter
    def edges(self, edges):
        """Sets the edges of this OrmStorage.


        :param edges: The edges of this OrmStorage.  # noqa: E501
        :type edges: OrmStorageEdges
        """

        self._edges = edges

    @property
    def id(self):
        """Gets the id of this OrmStorage.  # noqa: E501


        :return: The id of this OrmStorage.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OrmStorage.


        :param id: The id of this OrmStorage.  # noqa: E501
        :type id: int
        """

        self._id = id

    @property
    def immutable_slug(self):
        """Gets the immutable_slug of this OrmStorage.  # noqa: E501


        :return: The immutable_slug of this OrmStorage.  # noqa: E501
        :rtype: str
        """
        return self._immutable_slug

    @immutable_slug.setter
    def immutable_slug(self, immutable_slug):
        """Sets the immutable_slug of this OrmStorage.


        :param immutable_slug: The immutable_slug of this OrmStorage.  # noqa: E501
        :type immutable_slug: str
        """

        self._immutable_slug = immutable_slug

    @property
    def is_public_bucket(self):
        """Gets the is_public_bucket of this OrmStorage.  # noqa: E501


        :return: The is_public_bucket of this OrmStorage.  # noqa: E501
        :rtype: bool
        """
        return self._is_public_bucket

    @is_public_bucket.setter
    def is_public_bucket(self, is_public_bucket):
        """Sets the is_public_bucket of this OrmStorage.


        :param is_public_bucket: The is_public_bucket of this OrmStorage.  # noqa: E501
        :type is_public_bucket: bool
        """

        self._is_public_bucket = is_public_bucket

    @property
    def is_vessl_managed(self):
        """Gets the is_vessl_managed of this OrmStorage.  # noqa: E501


        :return: The is_vessl_managed of this OrmStorage.  # noqa: E501
        :rtype: bool
        """
        return self._is_vessl_managed

    @is_vessl_managed.setter
    def is_vessl_managed(self, is_vessl_managed):
        """Sets the is_vessl_managed of this OrmStorage.


        :param is_vessl_managed: The is_vessl_managed of this OrmStorage.  # noqa: E501
        :type is_vessl_managed: bool
        """

        self._is_vessl_managed = is_vessl_managed

    @property
    def organization_credentials_id(self):
        """Gets the organization_credentials_id of this OrmStorage.  # noqa: E501


        :return: The organization_credentials_id of this OrmStorage.  # noqa: E501
        :rtype: int
        """
        return self._organization_credentials_id

    @organization_credentials_id.setter
    def organization_credentials_id(self, organization_credentials_id):
        """Sets the organization_credentials_id of this OrmStorage.


        :param organization_credentials_id: The organization_credentials_id of this OrmStorage.  # noqa: E501
        :type organization_credentials_id: int
        """

        self._organization_credentials_id = organization_credentials_id

    @property
    def provider(self):
        """Gets the provider of this OrmStorage.  # noqa: E501


        :return: The provider of this OrmStorage.  # noqa: E501
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this OrmStorage.


        :param provider: The provider of this OrmStorage.  # noqa: E501
        :type provider: str
        """

        self._provider = provider

    @property
    def provider_endpoint(self):
        """Gets the provider_endpoint of this OrmStorage.  # noqa: E501


        :return: The provider_endpoint of this OrmStorage.  # noqa: E501
        :rtype: str
        """
        return self._provider_endpoint

    @provider_endpoint.setter
    def provider_endpoint(self, provider_endpoint):
        """Sets the provider_endpoint of this OrmStorage.


        :param provider_endpoint: The provider_endpoint of this OrmStorage.  # noqa: E501
        :type provider_endpoint: str
        """

        self._provider_endpoint = provider_endpoint

    @property
    def region_id(self):
        """Gets the region_id of this OrmStorage.  # noqa: E501


        :return: The region_id of this OrmStorage.  # noqa: E501
        :rtype: int
        """
        return self._region_id

    @region_id.setter
    def region_id(self, region_id):
        """Sets the region_id of this OrmStorage.


        :param region_id: The region_id of this OrmStorage.  # noqa: E501
        :type region_id: int
        """

        self._region_id = region_id

    @property
    def storage_organization(self):
        """Gets the storage_organization of this OrmStorage.  # noqa: E501


        :return: The storage_organization of this OrmStorage.  # noqa: E501
        :rtype: int
        """
        return self._storage_organization

    @storage_organization.setter
    def storage_organization(self, storage_organization):
        """Sets the storage_organization of this OrmStorage.


        :param storage_organization: The storage_organization of this OrmStorage.  # noqa: E501
        :type storage_organization: int
        """

        self._storage_organization = storage_organization

    @property
    def updated_dt(self):
        """Gets the updated_dt of this OrmStorage.  # noqa: E501


        :return: The updated_dt of this OrmStorage.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_dt

    @updated_dt.setter
    def updated_dt(self, updated_dt):
        """Sets the updated_dt of this OrmStorage.


        :param updated_dt: The updated_dt of this OrmStorage.  # noqa: E501
        :type updated_dt: datetime
        """

        self._updated_dt = updated_dt

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrmStorage):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrmStorage):
            return True

        return self.to_dict() != other.to_dict()
