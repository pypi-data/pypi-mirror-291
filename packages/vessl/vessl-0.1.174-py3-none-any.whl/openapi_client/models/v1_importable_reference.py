# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class V1ImportableReference(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'dataset': 'V1DatasetReference',
        'git': 'V1GitReference',
        'local': 'V1LocalReference',
        'nfs': 'V1NFSReference',
        'ref_type': 'str',
        'volume': 'V1VolumeReference'
    }

    attribute_map = {
        'dataset': 'dataset',
        'git': 'git',
        'local': 'local',
        'nfs': 'nfs',
        'ref_type': 'ref_type',
        'volume': 'volume'
    }

    def __init__(self, dataset=None, git=None, local=None, nfs=None, ref_type=None, volume=None, local_vars_configuration=None):  # noqa: E501
        """V1ImportableReference - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._dataset = None
        self._git = None
        self._local = None
        self._nfs = None
        self._ref_type = None
        self._volume = None
        self.discriminator = None

        if dataset is not None:
            self.dataset = dataset
        if git is not None:
            self.git = git
        if local is not None:
            self.local = local
        if nfs is not None:
            self.nfs = nfs
        self.ref_type = ref_type
        if volume is not None:
            self.volume = volume

    @property
    def dataset(self):
        """Gets the dataset of this V1ImportableReference.  # noqa: E501


        :return: The dataset of this V1ImportableReference.  # noqa: E501
        :rtype: V1DatasetReference
        """
        return self._dataset

    @dataset.setter
    def dataset(self, dataset):
        """Sets the dataset of this V1ImportableReference.


        :param dataset: The dataset of this V1ImportableReference.  # noqa: E501
        :type dataset: V1DatasetReference
        """

        self._dataset = dataset

    @property
    def git(self):
        """Gets the git of this V1ImportableReference.  # noqa: E501


        :return: The git of this V1ImportableReference.  # noqa: E501
        :rtype: V1GitReference
        """
        return self._git

    @git.setter
    def git(self, git):
        """Sets the git of this V1ImportableReference.


        :param git: The git of this V1ImportableReference.  # noqa: E501
        :type git: V1GitReference
        """

        self._git = git

    @property
    def local(self):
        """Gets the local of this V1ImportableReference.  # noqa: E501


        :return: The local of this V1ImportableReference.  # noqa: E501
        :rtype: V1LocalReference
        """
        return self._local

    @local.setter
    def local(self, local):
        """Sets the local of this V1ImportableReference.


        :param local: The local of this V1ImportableReference.  # noqa: E501
        :type local: V1LocalReference
        """

        self._local = local

    @property
    def nfs(self):
        """Gets the nfs of this V1ImportableReference.  # noqa: E501


        :return: The nfs of this V1ImportableReference.  # noqa: E501
        :rtype: V1NFSReference
        """
        return self._nfs

    @nfs.setter
    def nfs(self, nfs):
        """Sets the nfs of this V1ImportableReference.


        :param nfs: The nfs of this V1ImportableReference.  # noqa: E501
        :type nfs: V1NFSReference
        """

        self._nfs = nfs

    @property
    def ref_type(self):
        """Gets the ref_type of this V1ImportableReference.  # noqa: E501


        :return: The ref_type of this V1ImportableReference.  # noqa: E501
        :rtype: str
        """
        return self._ref_type

    @ref_type.setter
    def ref_type(self, ref_type):
        """Sets the ref_type of this V1ImportableReference.


        :param ref_type: The ref_type of this V1ImportableReference.  # noqa: E501
        :type ref_type: str
        """
        if self.local_vars_configuration.client_side_validation and ref_type is None:  # noqa: E501
            raise ValueError("Invalid value for `ref_type`, must not be `None`")  # noqa: E501
        allowed_values = ["local", "nfs", "git", "volume", "dataset"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and ref_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `ref_type` ({0}), must be one of {1}"  # noqa: E501
                .format(ref_type, allowed_values)
            )

        self._ref_type = ref_type

    @property
    def volume(self):
        """Gets the volume of this V1ImportableReference.  # noqa: E501


        :return: The volume of this V1ImportableReference.  # noqa: E501
        :rtype: V1VolumeReference
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this V1ImportableReference.


        :param volume: The volume of this V1ImportableReference.  # noqa: E501
        :type volume: V1VolumeReference
        """

        self._volume = volume

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1ImportableReference):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1ImportableReference):
            return True

        return self.to_dict() != other.to_dict()
