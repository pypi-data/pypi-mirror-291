# coding: utf-8

"""
    Cobo Wallet as a Service 2.0

    Contact: support@cobo.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from cobo_waas2.models.amount_details_inner import AmountDetailsInner
from cobo_waas2.models.stakings_validator_info import StakingsValidatorInfo
from typing import Optional, Set
from typing_extensions import Self


class Stakings(BaseModel):
    """
    The staking info.
    """  # noqa: E501
    id: StrictStr = Field(description="The unique id of the stake.")
    wallet_id: StrictStr = Field(description="The unique wallet id.")
    address: StrictStr = Field(description="The staker wallet address.")
    amounts: List[AmountDetailsInner] = Field(description="The staking amount details.")
    initiator: Optional[StrictStr] = Field(default=None, description="The initiator of the stake.")
    unlock_timestamp: Optional[StrictInt] = Field(default=None, description="The unlock time.")
    unlock_block_height: Optional[StrictInt] = Field(default=None, description="The unlock block height.")
    pool_id: StrictStr = Field(description="The unique pool id.")
    token_id: StrictStr = Field(description="The token id.")
    pos_chain: Optional[StrictStr] = Field(default=None, description="The pos chain of the stake.")
    rewards_info: Optional[Dict[str, Any]] = Field(default=None, description="The rewards info of the stake.")
    created_timestamp: StrictInt = Field(description="The time when the stake was created.")
    updated_timestamp: StrictInt = Field(description="The time when the stake was last updated.")
    validator_info: StakingsValidatorInfo
    __properties: ClassVar[List[str]] = ["id", "wallet_id", "address", "amounts", "initiator", "unlock_timestamp", "unlock_block_height", "pool_id", "token_id", "pos_chain", "rewards_info", "created_timestamp", "updated_timestamp", "validator_info"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Stakings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in amounts (list)
        _items = []
        if self.amounts:
            for _item in self.amounts:
                if _item:
                    _items.append(_item.to_dict())
            _dict['amounts'] = _items
        # override the default output from pydantic by calling `to_dict()` of validator_info
        if self.validator_info:
            _dict['validator_info'] = self.validator_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Stakings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "wallet_id": obj.get("wallet_id"),
            "address": obj.get("address"),
            "amounts": [AmountDetailsInner.from_dict(_item) for _item in obj["amounts"]] if obj.get("amounts") is not None else None,
            "initiator": obj.get("initiator"),
            "unlock_timestamp": obj.get("unlock_timestamp"),
            "unlock_block_height": obj.get("unlock_block_height"),
            "pool_id": obj.get("pool_id"),
            "token_id": obj.get("token_id"),
            "pos_chain": obj.get("pos_chain"),
            "rewards_info": obj.get("rewards_info"),
            "created_timestamp": obj.get("created_timestamp"),
            "updated_timestamp": obj.get("updated_timestamp"),
            "validator_info": StakingsValidatorInfo.from_dict(obj["validator_info"]) if obj.get("validator_info") is not None else None
        })
        return _obj


