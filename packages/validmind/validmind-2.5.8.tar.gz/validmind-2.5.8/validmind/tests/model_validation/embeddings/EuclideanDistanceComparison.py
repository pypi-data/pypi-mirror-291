# Copyright Â© 2023-2024 ValidMind Inc. All rights reserved.
# See the LICENSE file in the root of this repository for details.
# SPDX-License-Identifier: AGPL-3.0 AND ValidMind Commercial

from itertools import combinations

import numpy as np
import pandas as pd
import plotly.express as px
from sklearn.metrics.pairwise import euclidean_distances

from validmind import tags, tasks


@tags("visualization", "dimensionality_reduction", "embeddings")
@tasks("text_qa", "text_generation", "text_summarization")
def EuclideanDistanceComparison(dataset, models):
    """
    Computes pairwise Euclidean distances between model embeddings and visualizes the results through bar charts,
    alongside compiling a comprehensive table of descriptive statistics for each model pair.

    **Purpose:**
    This function is designed to analyze and compare the embeddings produced by different models using Euclidean Distance.
    Euclidean Distance measures the "ordinary" straight-line distance between two points in Euclidean space, providing a
    straightforward metric to assess the absolute differences between vectors. This analysis helps in understanding the
    magnitude of dissimilarity between the embeddings generated by different models, which is crucial for tasks that require
    distinctive model responses or feature separations.

    **Test Mechanism:**
    The function begins by computing the embeddings for each model using the provided dataset. It then calculates the
    Euclidean distance for every possible pair of models, generating a distance matrix. Each element of this matrix
    represents the Euclidean distance between two model embeddings. The function flattens this matrix and uses it to
    create a bar chart for each model pair, visualizing their distance distribution. Additionally, it compiles a table
    with descriptive statistics (mean, median, standard deviation, minimum, and maximum) for the distances of each
    pair, including a reference to the compared models.

    **Signs of High Risk:**

    - Very high distance values could suggest that the models are focusing on completely different features or aspects
      of the data, which might be undesirable for ensemble methods or similar applications where some degree of
      consensus is expected.
    - Extremely low distances across different models might indicate redundancy, suggesting that the models are not
      providing diverse enough perspectives on the data.

    **Strengths:**

    - Provides a clear and quantifiable measure of how different the embeddings from various models are.
    - Useful for identifying outlier models or those that behave significantly differently from others in a group.

    **Limitations:**

    - Euclidean distance can be sensitive to the scale of the data, meaning that preprocessing steps like normalization
      might be necessary to ensure meaningful comparisons.
    - Does not consider the orientation or angle between vectors, focusing purely on magnitude differences.
    """

    figures = []
    all_stats = []

    # Generate all pairs of models for comparison
    for model_A, model_B in combinations(models, 2):
        embeddings_A = np.stack(dataset.y_pred(model_A))
        embeddings_B = np.stack(dataset.y_pred(model_B))

        # Calculate pairwise Euclidean distances
        distance_matrix = euclidean_distances(embeddings_A, embeddings_B)
        distances = distance_matrix.flatten()

        # Generate statistics and add model combination as a column
        stats_data = {
            "Combination": f"{model_A.input_id} vs {model_B.input_id}",
            "Mean": np.mean(distances),
            "Median": np.median(distances),
            "Standard Deviation": np.std(distances),
            "Minimum": np.min(distances),
            "Maximum": np.max(distances),
        }
        all_stats.append(stats_data)

        # Generate an index for each distance value
        indices = range(len(distances))

        # Create the bar chart using Plotly
        fig = px.bar(
            x=indices,
            y=distances,
            labels={"x": "Pair Index", "y": "Euclidean Distance"},
            title=f"Euclidean Distance - {model_A.input_id} vs {model_B.input_id}",
        )
        fig.update_layout(xaxis_title="Pair Index", yaxis_title="Euclidean Distance")
        figures.append(fig)

    # Create a DataFrame from all collected statistics
    stats_df = pd.DataFrame(all_stats)

    return (stats_df, *tuple(figures))
