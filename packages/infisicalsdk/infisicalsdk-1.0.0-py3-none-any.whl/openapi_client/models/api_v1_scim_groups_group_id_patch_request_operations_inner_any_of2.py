# coding: utf-8

"""
    Infisical API

    List of all available APIs that can be consumed

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, Field, StrictStr, conlist, validator
from openapi_client.models.api_v1_scim_groups_group_id_patch_request_operations_inner_any_of2_value_inner import ApiV1ScimGroupsGroupIdPatchRequestOperationsInnerAnyOf2ValueInner

class ApiV1ScimGroupsGroupIdPatchRequestOperationsInnerAnyOf2(BaseModel):
    """
    ApiV1ScimGroupsGroupIdPatchRequestOperationsInnerAnyOf2
    """
    op: StrictStr = Field(...)
    path: StrictStr = Field(...)
    value: conlist(ApiV1ScimGroupsGroupIdPatchRequestOperationsInnerAnyOf2ValueInner) = Field(...)
    __properties = ["op", "path", "value"]

    @validator('op')
    def op_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('add'):
            raise ValueError("must be one of enum values ('add')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ApiV1ScimGroupsGroupIdPatchRequestOperationsInnerAnyOf2:
        """Create an instance of ApiV1ScimGroupsGroupIdPatchRequestOperationsInnerAnyOf2 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in value (list)
        _items = []
        if self.value:
            for _item in self.value:
                if _item:
                    _items.append(_item.to_dict())
            _dict['value'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ApiV1ScimGroupsGroupIdPatchRequestOperationsInnerAnyOf2:
        """Create an instance of ApiV1ScimGroupsGroupIdPatchRequestOperationsInnerAnyOf2 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ApiV1ScimGroupsGroupIdPatchRequestOperationsInnerAnyOf2.parse_obj(obj)

        _obj = ApiV1ScimGroupsGroupIdPatchRequestOperationsInnerAnyOf2.parse_obj({
            "op": obj.get("op"),
            "path": obj.get("path"),
            "value": [ApiV1ScimGroupsGroupIdPatchRequestOperationsInnerAnyOf2ValueInner.from_dict(_item) for _item in obj.get("value")] if obj.get("value") is not None else None
        })
        return _obj


