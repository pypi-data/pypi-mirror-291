# coding: utf-8

"""
    Infisical API

    List of all available APIs that can be consumed

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictStr
from openapi_client.models.api_v1_integration_auth_integration_auth_id_heroku_pipelines_get200_response_pipelines_inner_app import ApiV1IntegrationAuthIntegrationAuthIdHerokuPipelinesGet200ResponsePipelinesInnerApp
from openapi_client.models.api_v1_integration_auth_integration_auth_id_heroku_pipelines_get200_response_pipelines_inner_pipeline import ApiV1IntegrationAuthIntegrationAuthIdHerokuPipelinesGet200ResponsePipelinesInnerPipeline

class ApiV1IntegrationAuthIntegrationAuthIdHerokuPipelinesGet200ResponsePipelinesInner(BaseModel):
    """
    ApiV1IntegrationAuthIntegrationAuthIdHerokuPipelinesGet200ResponsePipelinesInner
    """
    app: ApiV1IntegrationAuthIntegrationAuthIdHerokuPipelinesGet200ResponsePipelinesInnerApp = Field(...)
    stage: StrictStr = Field(...)
    pipeline: ApiV1IntegrationAuthIntegrationAuthIdHerokuPipelinesGet200ResponsePipelinesInnerPipeline = Field(...)
    __properties = ["app", "stage", "pipeline"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ApiV1IntegrationAuthIntegrationAuthIdHerokuPipelinesGet200ResponsePipelinesInner:
        """Create an instance of ApiV1IntegrationAuthIntegrationAuthIdHerokuPipelinesGet200ResponsePipelinesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of app
        if self.app:
            _dict['app'] = self.app.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pipeline
        if self.pipeline:
            _dict['pipeline'] = self.pipeline.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ApiV1IntegrationAuthIntegrationAuthIdHerokuPipelinesGet200ResponsePipelinesInner:
        """Create an instance of ApiV1IntegrationAuthIntegrationAuthIdHerokuPipelinesGet200ResponsePipelinesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ApiV1IntegrationAuthIntegrationAuthIdHerokuPipelinesGet200ResponsePipelinesInner.parse_obj(obj)

        _obj = ApiV1IntegrationAuthIntegrationAuthIdHerokuPipelinesGet200ResponsePipelinesInner.parse_obj({
            "app": ApiV1IntegrationAuthIntegrationAuthIdHerokuPipelinesGet200ResponsePipelinesInnerApp.from_dict(obj.get("app")) if obj.get("app") is not None else None,
            "stage": obj.get("stage"),
            "pipeline": ApiV1IntegrationAuthIntegrationAuthIdHerokuPipelinesGet200ResponsePipelinesInnerPipeline.from_dict(obj.get("pipeline")) if obj.get("pipeline") is not None else None
        })
        return _obj


