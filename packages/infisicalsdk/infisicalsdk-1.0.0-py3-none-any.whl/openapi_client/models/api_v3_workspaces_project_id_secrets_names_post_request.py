# coding: utf-8

"""
    Infisical API

    List of all available APIs that can be consumed

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, Field, conlist
from openapi_client.models.api_v3_workspaces_project_id_secrets_names_post_request_secrets_to_update_inner import ApiV3WorkspacesProjectIdSecretsNamesPostRequestSecretsToUpdateInner

class ApiV3WorkspacesProjectIdSecretsNamesPostRequest(BaseModel):
    """
    ApiV3WorkspacesProjectIdSecretsNamesPostRequest
    """
    secrets_to_update: conlist(ApiV3WorkspacesProjectIdSecretsNamesPostRequestSecretsToUpdateInner) = Field(default=..., alias="secretsToUpdate")
    __properties = ["secretsToUpdate"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ApiV3WorkspacesProjectIdSecretsNamesPostRequest:
        """Create an instance of ApiV3WorkspacesProjectIdSecretsNamesPostRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in secrets_to_update (list)
        _items = []
        if self.secrets_to_update:
            for _item in self.secrets_to_update:
                if _item:
                    _items.append(_item.to_dict())
            _dict['secretsToUpdate'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ApiV3WorkspacesProjectIdSecretsNamesPostRequest:
        """Create an instance of ApiV3WorkspacesProjectIdSecretsNamesPostRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ApiV3WorkspacesProjectIdSecretsNamesPostRequest.parse_obj(obj)

        _obj = ApiV3WorkspacesProjectIdSecretsNamesPostRequest.parse_obj({
            "secrets_to_update": [ApiV3WorkspacesProjectIdSecretsNamesPostRequestSecretsToUpdateInner.from_dict(_item) for _item in obj.get("secretsToUpdate")] if obj.get("secretsToUpdate") is not None else None
        })
        return _obj


