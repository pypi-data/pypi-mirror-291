# coding: utf-8

"""
    Infisical API

    List of all available APIs that can be consumed

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class ApiV1SecretApprovalRequestsGet200ResponseApprovalsInnerCommitterUser(BaseModel):
    """
    ApiV1SecretApprovalRequestsGet200ResponseApprovalsInnerCommitterUser
    """
    user_id: StrictStr = Field(default=..., alias="userId")
    email: Optional[StrictStr] = None
    first_name: Optional[StrictStr] = Field(default=None, alias="firstName")
    last_name: Optional[StrictStr] = Field(default=None, alias="lastName")
    username: StrictStr = Field(...)
    __properties = ["userId", "email", "firstName", "lastName", "username"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ApiV1SecretApprovalRequestsGet200ResponseApprovalsInnerCommitterUser:
        """Create an instance of ApiV1SecretApprovalRequestsGet200ResponseApprovalsInnerCommitterUser from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if email (nullable) is None
        # and __fields_set__ contains the field
        if self.email is None and "email" in self.__fields_set__:
            _dict['email'] = None

        # set to None if first_name (nullable) is None
        # and __fields_set__ contains the field
        if self.first_name is None and "first_name" in self.__fields_set__:
            _dict['firstName'] = None

        # set to None if last_name (nullable) is None
        # and __fields_set__ contains the field
        if self.last_name is None and "last_name" in self.__fields_set__:
            _dict['lastName'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ApiV1SecretApprovalRequestsGet200ResponseApprovalsInnerCommitterUser:
        """Create an instance of ApiV1SecretApprovalRequestsGet200ResponseApprovalsInnerCommitterUser from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ApiV1SecretApprovalRequestsGet200ResponseApprovalsInnerCommitterUser.parse_obj(obj)

        _obj = ApiV1SecretApprovalRequestsGet200ResponseApprovalsInnerCommitterUser.parse_obj({
            "user_id": obj.get("userId"),
            "email": obj.get("email"),
            "first_name": obj.get("firstName"),
            "last_name": obj.get("lastName"),
            "username": obj.get("username")
        })
        return _obj


