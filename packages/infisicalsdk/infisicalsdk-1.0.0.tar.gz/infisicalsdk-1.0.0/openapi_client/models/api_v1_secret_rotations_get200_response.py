# coding: utf-8

"""
    Infisical API

    List of all available APIs that can be consumed

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, Field, conlist
from openapi_client.models.api_v1_secret_rotations_get200_response_secret_rotations_inner import ApiV1SecretRotationsGet200ResponseSecretRotationsInner

class ApiV1SecretRotationsGet200Response(BaseModel):
    """
    ApiV1SecretRotationsGet200Response
    """
    secret_rotations: conlist(ApiV1SecretRotationsGet200ResponseSecretRotationsInner) = Field(default=..., alias="secretRotations")
    __properties = ["secretRotations"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ApiV1SecretRotationsGet200Response:
        """Create an instance of ApiV1SecretRotationsGet200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in secret_rotations (list)
        _items = []
        if self.secret_rotations:
            for _item in self.secret_rotations:
                if _item:
                    _items.append(_item.to_dict())
            _dict['secretRotations'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ApiV1SecretRotationsGet200Response:
        """Create an instance of ApiV1SecretRotationsGet200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ApiV1SecretRotationsGet200Response.parse_obj(obj)

        _obj = ApiV1SecretRotationsGet200Response.parse_obj({
            "secret_rotations": [ApiV1SecretRotationsGet200ResponseSecretRotationsInner.from_dict(_item) for _item in obj.get("secretRotations")] if obj.get("secretRotations") is not None else None
        })
        return _obj


