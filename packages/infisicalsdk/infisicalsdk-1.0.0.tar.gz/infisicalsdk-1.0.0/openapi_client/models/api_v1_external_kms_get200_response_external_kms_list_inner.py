# coding: utf-8

"""
    Infisical API

    List of all available APIs that can be consumed

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr
from openapi_client.models.api_v1_external_kms_get200_response_external_kms_list_inner_external_kms import ApiV1ExternalKmsGet200ResponseExternalKmsListInnerExternalKms

class ApiV1ExternalKmsGet200ResponseExternalKmsListInner(BaseModel):
    """
    ApiV1ExternalKmsGet200ResponseExternalKmsListInner
    """
    id: StrictStr = Field(...)
    description: Optional[StrictStr] = None
    is_disabled: Optional[StrictBool] = Field(default=False, alias="isDisabled")
    created_at: datetime = Field(default=..., alias="createdAt")
    updated_at: datetime = Field(default=..., alias="updatedAt")
    slug: StrictStr = Field(...)
    external_kms: ApiV1ExternalKmsGet200ResponseExternalKmsListInnerExternalKms = Field(default=..., alias="externalKms")
    __properties = ["id", "description", "isDisabled", "createdAt", "updatedAt", "slug", "externalKms"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ApiV1ExternalKmsGet200ResponseExternalKmsListInner:
        """Create an instance of ApiV1ExternalKmsGet200ResponseExternalKmsListInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of external_kms
        if self.external_kms:
            _dict['externalKms'] = self.external_kms.to_dict()
        # set to None if description (nullable) is None
        # and __fields_set__ contains the field
        if self.description is None and "description" in self.__fields_set__:
            _dict['description'] = None

        # set to None if is_disabled (nullable) is None
        # and __fields_set__ contains the field
        if self.is_disabled is None and "is_disabled" in self.__fields_set__:
            _dict['isDisabled'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ApiV1ExternalKmsGet200ResponseExternalKmsListInner:
        """Create an instance of ApiV1ExternalKmsGet200ResponseExternalKmsListInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ApiV1ExternalKmsGet200ResponseExternalKmsListInner.parse_obj(obj)

        _obj = ApiV1ExternalKmsGet200ResponseExternalKmsListInner.parse_obj({
            "id": obj.get("id"),
            "description": obj.get("description"),
            "is_disabled": obj.get("isDisabled") if obj.get("isDisabled") is not None else False,
            "created_at": obj.get("createdAt"),
            "updated_at": obj.get("updatedAt"),
            "slug": obj.get("slug"),
            "external_kms": ApiV1ExternalKmsGet200ResponseExternalKmsListInnerExternalKms.from_dict(obj.get("externalKms")) if obj.get("externalKms") is not None else None
        })
        return _obj


