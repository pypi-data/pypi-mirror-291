# coding: utf-8

"""
    Infisical API

    List of all available APIs that can be consumed

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, Field, StrictStr, conlist
from openapi_client.models.api_v2_organizations_organization_id_workspaces_get200_response_workspaces_inner_environments_inner import ApiV2OrganizationsOrganizationIdWorkspacesGet200ResponseWorkspacesInnerEnvironmentsInner

class ApiV2OrganizationsOrganizationIdWorkspacesGet200ResponseWorkspacesInner(BaseModel):
    """
    ApiV2OrganizationsOrganizationIdWorkspacesGet200ResponseWorkspacesInner
    """
    id: StrictStr = Field(...)
    name: StrictStr = Field(...)
    slug: StrictStr = Field(...)
    organization: StrictStr = Field(...)
    environments: conlist(ApiV2OrganizationsOrganizationIdWorkspacesGet200ResponseWorkspacesInnerEnvironmentsInner) = Field(...)
    __properties = ["id", "name", "slug", "organization", "environments"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ApiV2OrganizationsOrganizationIdWorkspacesGet200ResponseWorkspacesInner:
        """Create an instance of ApiV2OrganizationsOrganizationIdWorkspacesGet200ResponseWorkspacesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in environments (list)
        _items = []
        if self.environments:
            for _item in self.environments:
                if _item:
                    _items.append(_item.to_dict())
            _dict['environments'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ApiV2OrganizationsOrganizationIdWorkspacesGet200ResponseWorkspacesInner:
        """Create an instance of ApiV2OrganizationsOrganizationIdWorkspacesGet200ResponseWorkspacesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ApiV2OrganizationsOrganizationIdWorkspacesGet200ResponseWorkspacesInner.parse_obj(obj)

        _obj = ApiV2OrganizationsOrganizationIdWorkspacesGet200ResponseWorkspacesInner.parse_obj({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "slug": obj.get("slug"),
            "organization": obj.get("organization"),
            "environments": [ApiV2OrganizationsOrganizationIdWorkspacesGet200ResponseWorkspacesInnerEnvironmentsInner.from_dict(_item) for _item in obj.get("environments")] if obj.get("environments") is not None else None
        })
        return _obj


