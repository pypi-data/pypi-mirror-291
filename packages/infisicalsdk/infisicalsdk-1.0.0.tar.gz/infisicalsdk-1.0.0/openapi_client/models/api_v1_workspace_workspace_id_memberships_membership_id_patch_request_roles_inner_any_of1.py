# coding: utf-8

"""
    Infisical API

    List of all available APIs that can be consumed

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime

from pydantic import BaseModel, Field, StrictBool, StrictStr, validator

class ApiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatchRequestRolesInnerAnyOf1(BaseModel):
    """
    ApiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatchRequestRolesInnerAnyOf1
    """
    role: StrictStr = Field(...)
    is_temporary: StrictBool = Field(default=..., alias="isTemporary")
    temporary_mode: StrictStr = Field(default=..., alias="temporaryMode")
    temporary_range: StrictStr = Field(default=..., alias="temporaryRange")
    temporary_access_start_time: datetime = Field(default=..., alias="temporaryAccessStartTime")
    __properties = ["role", "isTemporary", "temporaryMode", "temporaryRange", "temporaryAccessStartTime"]

    @validator('temporary_mode')
    def temporary_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('relative'):
            raise ValueError("must be one of enum values ('relative')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ApiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatchRequestRolesInnerAnyOf1:
        """Create an instance of ApiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatchRequestRolesInnerAnyOf1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ApiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatchRequestRolesInnerAnyOf1:
        """Create an instance of ApiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatchRequestRolesInnerAnyOf1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ApiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatchRequestRolesInnerAnyOf1.parse_obj(obj)

        _obj = ApiV1WorkspaceWorkspaceIdMembershipsMembershipIdPatchRequestRolesInnerAnyOf1.parse_obj({
            "role": obj.get("role"),
            "is_temporary": obj.get("isTemporary"),
            "temporary_mode": obj.get("temporaryMode"),
            "temporary_range": obj.get("temporaryRange"),
            "temporary_access_start_time": obj.get("temporaryAccessStartTime")
        })
        return _obj


