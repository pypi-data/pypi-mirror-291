# coding: utf-8

"""
    Infisical API

    List of all available APIs that can be consumed

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from openapi_client.models.api_v2_workspace_workspace_id_encrypted_key_get200_response_sender import ApiV2WorkspaceWorkspaceIdEncryptedKeyGet200ResponseSender

class ApiV2WorkspaceWorkspaceIdEncryptedKeyGet200Response(BaseModel):
    """
    ApiV2WorkspaceWorkspaceIdEncryptedKeyGet200Response
    """
    id: StrictStr = Field(...)
    encrypted_key: StrictStr = Field(default=..., alias="encryptedKey")
    nonce: StrictStr = Field(...)
    receiver_id: StrictStr = Field(default=..., alias="receiverId")
    sender_id: Optional[StrictStr] = Field(default=None, alias="senderId")
    project_id: StrictStr = Field(default=..., alias="projectId")
    created_at: datetime = Field(default=..., alias="createdAt")
    updated_at: datetime = Field(default=..., alias="updatedAt")
    sender: ApiV2WorkspaceWorkspaceIdEncryptedKeyGet200ResponseSender = Field(...)
    __properties = ["id", "encryptedKey", "nonce", "receiverId", "senderId", "projectId", "createdAt", "updatedAt", "sender"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ApiV2WorkspaceWorkspaceIdEncryptedKeyGet200Response:
        """Create an instance of ApiV2WorkspaceWorkspaceIdEncryptedKeyGet200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of sender
        if self.sender:
            _dict['sender'] = self.sender.to_dict()
        # set to None if sender_id (nullable) is None
        # and __fields_set__ contains the field
        if self.sender_id is None and "sender_id" in self.__fields_set__:
            _dict['senderId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ApiV2WorkspaceWorkspaceIdEncryptedKeyGet200Response:
        """Create an instance of ApiV2WorkspaceWorkspaceIdEncryptedKeyGet200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ApiV2WorkspaceWorkspaceIdEncryptedKeyGet200Response.parse_obj(obj)

        _obj = ApiV2WorkspaceWorkspaceIdEncryptedKeyGet200Response.parse_obj({
            "id": obj.get("id"),
            "encrypted_key": obj.get("encryptedKey"),
            "nonce": obj.get("nonce"),
            "receiver_id": obj.get("receiverId"),
            "sender_id": obj.get("senderId"),
            "project_id": obj.get("projectId"),
            "created_at": obj.get("createdAt"),
            "updated_at": obj.get("updatedAt"),
            "sender": ApiV2WorkspaceWorkspaceIdEncryptedKeyGet200ResponseSender.from_dict(obj.get("sender")) if obj.get("sender") is not None else None
        })
        return _obj


