# coding: utf-8

"""
    Infisical API

    List of all available APIs that can be consumed

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictStr, confloat, conint, conlist, validator

class ApiV1AccessApprovalsPoliciesPolicyIdPatchRequest(BaseModel):
    """
    ApiV1AccessApprovalsPoliciesPolicyIdPatchRequest
    """
    name: Optional[StrictStr] = None
    secret_path: Optional[StrictStr] = Field(default=None, alias="secretPath")
    approvers: conlist(StrictStr, min_items=1) = Field(...)
    approvals: Optional[Union[confloat(ge=1, strict=True), conint(ge=1, strict=True)]] = 1
    enforcement_level: Optional[StrictStr] = Field(default='hard', alias="enforcementLevel")
    __properties = ["name", "secretPath", "approvers", "approvals", "enforcementLevel"]

    @validator('enforcement_level')
    def enforcement_level_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('hard', 'soft'):
            raise ValueError("must be one of enum values ('hard', 'soft')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ApiV1AccessApprovalsPoliciesPolicyIdPatchRequest:
        """Create an instance of ApiV1AccessApprovalsPoliciesPolicyIdPatchRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ApiV1AccessApprovalsPoliciesPolicyIdPatchRequest:
        """Create an instance of ApiV1AccessApprovalsPoliciesPolicyIdPatchRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ApiV1AccessApprovalsPoliciesPolicyIdPatchRequest.parse_obj(obj)

        _obj = ApiV1AccessApprovalsPoliciesPolicyIdPatchRequest.parse_obj({
            "name": obj.get("name"),
            "secret_path": obj.get("secretPath"),
            "approvers": obj.get("approvers"),
            "approvals": obj.get("approvals") if obj.get("approvals") is not None else 1,
            "enforcement_level": obj.get("enforcementLevel") if obj.get("enforcementLevel") is not None else 'hard'
        })
        return _obj


