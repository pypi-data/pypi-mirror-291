# coding: utf-8

"""
    Infisical API

    List of all available APIs that can be consumed

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from openapi_client.models.api_v1_secret_rotations_restart_post200_response import ApiV1SecretRotationsRestartPost200Response  # noqa: E501

class TestApiV1SecretRotationsRestartPost200Response(unittest.TestCase):
    """ApiV1SecretRotationsRestartPost200Response unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ApiV1SecretRotationsRestartPost200Response:
        """Test ApiV1SecretRotationsRestartPost200Response
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ApiV1SecretRotationsRestartPost200Response`
        """
        model = ApiV1SecretRotationsRestartPost200Response()  # noqa: E501
        if include_optional:
            return ApiV1SecretRotationsRestartPost200Response(
                secret_rotation = openapi_client.models._api_v1_secret_rotations_restart_post_200_response_secret_rotation._api_v1_secret_rotations_restart_post_200_response_secretRotation(
                    id = '', 
                    provider = '', 
                    secret_path = '', 
                    interval = 1.337, 
                    last_rotated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    status = '', 
                    status_message = '', 
                    encrypted_data = '', 
                    encrypted_data_iv = '', 
                    encrypted_data_tag = '', 
                    algorithm = '', 
                    key_encoding = '', 
                    env_id = '', 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    environment = openapi_client.models._api_v1_secret_approvals_get_200_response_approvals_inner_environment._api_v1_secret_approvals_get_200_response_approvals_inner_environment(
                        id = '', 
                        name = '', 
                        slug = '', ), )
            )
        else:
            return ApiV1SecretRotationsRestartPost200Response(
                secret_rotation = openapi_client.models._api_v1_secret_rotations_restart_post_200_response_secret_rotation._api_v1_secret_rotations_restart_post_200_response_secretRotation(
                    id = '', 
                    provider = '', 
                    secret_path = '', 
                    interval = 1.337, 
                    last_rotated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    status = '', 
                    status_message = '', 
                    encrypted_data = '', 
                    encrypted_data_iv = '', 
                    encrypted_data_tag = '', 
                    algorithm = '', 
                    key_encoding = '', 
                    env_id = '', 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    environment = openapi_client.models._api_v1_secret_approvals_get_200_response_approvals_inner_environment._api_v1_secret_approvals_get_200_response_approvals_inner_environment(
                        id = '', 
                        name = '', 
                        slug = '', ), ),
        )
        """

    def testApiV1SecretRotationsRestartPost200Response(self):
        """Test ApiV1SecretRotationsRestartPost200Response"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
