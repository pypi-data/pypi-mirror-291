# coding: utf-8

"""
    Infisical API

    List of all available APIs that can be consumed

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from openapi_client.models.api_v3_secrets_batch_raw_patch_request_secrets_inner import ApiV3SecretsBatchRawPatchRequestSecretsInner  # noqa: E501

class TestApiV3SecretsBatchRawPatchRequestSecretsInner(unittest.TestCase):
    """ApiV3SecretsBatchRawPatchRequestSecretsInner unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ApiV3SecretsBatchRawPatchRequestSecretsInner:
        """Test ApiV3SecretsBatchRawPatchRequestSecretsInner
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ApiV3SecretsBatchRawPatchRequestSecretsInner`
        """
        model = ApiV3SecretsBatchRawPatchRequestSecretsInner()  # noqa: E501
        if include_optional:
            return ApiV3SecretsBatchRawPatchRequestSecretsInner(
                secret_key = '',
                secret_value = '',
                secret_comment = '',
                skip_multiline_encoding = True,
                new_secret_name = '0',
                tag_ids = [
                    ''
                    ],
                secret_reminder_note = '',
                secret_reminder_repeat_days = 1.337
            )
        else:
            return ApiV3SecretsBatchRawPatchRequestSecretsInner(
                secret_key = '',
                secret_value = '',
        )
        """

    def testApiV3SecretsBatchRawPatchRequestSecretsInner(self):
        """Test ApiV3SecretsBatchRawPatchRequestSecretsInner"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
