# coding: utf-8

"""
    Infisical API

    List of all available APIs that can be consumed

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from openapi_client.models.api_v1_secret_approval_requests_get200_response_approvals_inner import ApiV1SecretApprovalRequestsGet200ResponseApprovalsInner  # noqa: E501

class TestApiV1SecretApprovalRequestsGet200ResponseApprovalsInner(unittest.TestCase):
    """ApiV1SecretApprovalRequestsGet200ResponseApprovalsInner unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ApiV1SecretApprovalRequestsGet200ResponseApprovalsInner:
        """Test ApiV1SecretApprovalRequestsGet200ResponseApprovalsInner
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ApiV1SecretApprovalRequestsGet200ResponseApprovalsInner`
        """
        model = ApiV1SecretApprovalRequestsGet200ResponseApprovalsInner()  # noqa: E501
        if include_optional:
            return ApiV1SecretApprovalRequestsGet200ResponseApprovalsInner(
                id = '',
                policy_id = '',
                has_merged = True,
                status = 'open',
                conflicts = None,
                slug = '',
                folder_id = '',
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                is_replicated = True,
                committer_user_id = '',
                status_changed_by_user_id = '',
                bypass_reason = '',
                policy = openapi_client.models._api_v1_secret_approval_requests_get_200_response_approvals_inner_policy._api_v1_secret_approval_requests_get_200_response_approvals_inner_policy(
                    id = '', 
                    name = '', 
                    approvals = 1.337, 
                    approvers = [
                        ''
                        ], 
                    secret_path = '', 
                    enforcement_level = '', ),
                committer_user = openapi_client.models._api_v1_secret_approval_requests_get_200_response_approvals_inner_committer_user._api_v1_secret_approval_requests_get_200_response_approvals_inner_committerUser(
                    user_id = '', 
                    email = '', 
                    first_name = '', 
                    last_name = '', 
                    username = '', ),
                commits = [
                    openapi_client.models._api_v1_secret_approval_requests_get_200_response_approvals_inner_commits_inner._api_v1_secret_approval_requests_get_200_response_approvals_inner_commits_inner(
                        op = '', 
                        secret_id = '', )
                    ],
                environment = '',
                reviewers = [
                    openapi_client.models._api_v1_secret_approval_requests_get_200_response_approvals_inner_reviewers_inner._api_v1_secret_approval_requests_get_200_response_approvals_inner_reviewers_inner(
                        user_id = '', 
                        status = '', )
                    ],
                approvers = [
                    ''
                    ]
            )
        else:
            return ApiV1SecretApprovalRequestsGet200ResponseApprovalsInner(
                id = '',
                policy_id = '',
                slug = '',
                folder_id = '',
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                committer_user_id = '',
                policy = openapi_client.models._api_v1_secret_approval_requests_get_200_response_approvals_inner_policy._api_v1_secret_approval_requests_get_200_response_approvals_inner_policy(
                    id = '', 
                    name = '', 
                    approvals = 1.337, 
                    approvers = [
                        ''
                        ], 
                    secret_path = '', 
                    enforcement_level = '', ),
                committer_user = openapi_client.models._api_v1_secret_approval_requests_get_200_response_approvals_inner_committer_user._api_v1_secret_approval_requests_get_200_response_approvals_inner_committerUser(
                    user_id = '', 
                    email = '', 
                    first_name = '', 
                    last_name = '', 
                    username = '', ),
                commits = [
                    openapi_client.models._api_v1_secret_approval_requests_get_200_response_approvals_inner_commits_inner._api_v1_secret_approval_requests_get_200_response_approvals_inner_commits_inner(
                        op = '', 
                        secret_id = '', )
                    ],
                environment = '',
                reviewers = [
                    openapi_client.models._api_v1_secret_approval_requests_get_200_response_approvals_inner_reviewers_inner._api_v1_secret_approval_requests_get_200_response_approvals_inner_reviewers_inner(
                        user_id = '', 
                        status = '', )
                    ],
                approvers = [
                    ''
                    ],
        )
        """

    def testApiV1SecretApprovalRequestsGet200ResponseApprovalsInner(self):
        """Test ApiV1SecretApprovalRequestsGet200ResponseApprovalsInner"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
