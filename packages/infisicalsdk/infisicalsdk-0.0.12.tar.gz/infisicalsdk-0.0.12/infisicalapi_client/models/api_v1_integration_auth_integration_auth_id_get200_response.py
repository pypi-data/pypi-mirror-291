# coding: utf-8

"""
    Infisical API

    List of all available APIs that can be consumed

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field
from infisicalapi_client.models.api_v1_workspace_workspace_id_authorizations_get200_response_authorizations_inner import ApiV1WorkspaceWorkspaceIdAuthorizationsGet200ResponseAuthorizationsInner

class ApiV1IntegrationAuthIntegrationAuthIdGet200Response(BaseModel):
    """
    ApiV1IntegrationAuthIntegrationAuthIdGet200Response
    """
    integration_auth: ApiV1WorkspaceWorkspaceIdAuthorizationsGet200ResponseAuthorizationsInner = Field(default=..., alias="integrationAuth")
    __properties = ["integrationAuth"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ApiV1IntegrationAuthIntegrationAuthIdGet200Response:
        """Create an instance of ApiV1IntegrationAuthIntegrationAuthIdGet200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of integration_auth
        if self.integration_auth:
            _dict['integrationAuth'] = self.integration_auth.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ApiV1IntegrationAuthIntegrationAuthIdGet200Response:
        """Create an instance of ApiV1IntegrationAuthIntegrationAuthIdGet200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ApiV1IntegrationAuthIntegrationAuthIdGet200Response.parse_obj(obj)

        _obj = ApiV1IntegrationAuthIntegrationAuthIdGet200Response.parse_obj({
            "integration_auth": ApiV1WorkspaceWorkspaceIdAuthorizationsGet200ResponseAuthorizationsInner.from_dict(obj.get("integrationAuth")) if obj.get("integrationAuth") is not None else None
        })
        return _obj


