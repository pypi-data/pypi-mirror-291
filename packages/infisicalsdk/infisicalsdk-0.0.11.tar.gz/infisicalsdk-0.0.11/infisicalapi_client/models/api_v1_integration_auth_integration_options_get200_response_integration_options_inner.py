# coding: utf-8

"""
    Infisical API

    List of all available APIs that can be consumed

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr

class ApiV1IntegrationAuthIntegrationOptionsGet200ResponseIntegrationOptionsInner(BaseModel):
    """
    ApiV1IntegrationAuthIntegrationOptionsGet200ResponseIntegrationOptionsInner
    """
    name: StrictStr = Field(...)
    slug: StrictStr = Field(...)
    client_slug: Optional[StrictStr] = Field(default=None, alias="clientSlug")
    image: StrictStr = Field(...)
    is_available: Optional[StrictBool] = Field(default=None, alias="isAvailable")
    type: StrictStr = Field(...)
    client_id: Optional[StrictStr] = Field(default=None, alias="clientId")
    docs_link: Optional[StrictStr] = Field(default=None, alias="docsLink")
    __properties = ["name", "slug", "clientSlug", "image", "isAvailable", "type", "clientId", "docsLink"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ApiV1IntegrationAuthIntegrationOptionsGet200ResponseIntegrationOptionsInner:
        """Create an instance of ApiV1IntegrationAuthIntegrationOptionsGet200ResponseIntegrationOptionsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ApiV1IntegrationAuthIntegrationOptionsGet200ResponseIntegrationOptionsInner:
        """Create an instance of ApiV1IntegrationAuthIntegrationOptionsGet200ResponseIntegrationOptionsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ApiV1IntegrationAuthIntegrationOptionsGet200ResponseIntegrationOptionsInner.parse_obj(obj)

        _obj = ApiV1IntegrationAuthIntegrationOptionsGet200ResponseIntegrationOptionsInner.parse_obj({
            "name": obj.get("name"),
            "slug": obj.get("slug"),
            "client_slug": obj.get("clientSlug"),
            "image": obj.get("image"),
            "is_available": obj.get("isAvailable"),
            "type": obj.get("type"),
            "client_id": obj.get("clientId"),
            "docs_link": obj.get("docsLink")
        })
        return _obj


