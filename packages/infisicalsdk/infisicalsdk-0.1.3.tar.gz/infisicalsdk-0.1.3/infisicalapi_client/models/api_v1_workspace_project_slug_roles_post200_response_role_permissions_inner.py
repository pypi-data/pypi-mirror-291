# coding: utf-8

"""
    Infisical API

    List of all available APIs that can be consumed

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field
from infisicalapi_client.models.api_v1_workspace_project_slug_roles_post200_response_role_permissions_inner_conditions import ApiV1WorkspaceProjectSlugRolesPost200ResponseRolePermissionsInnerConditions
from infisicalapi_client.models.api_v1_workspace_project_slug_roles_post200_response_role_permissions_inner_subject import ApiV1WorkspaceProjectSlugRolesPost200ResponseRolePermissionsInnerSubject

class ApiV1WorkspaceProjectSlugRolesPost200ResponseRolePermissionsInner(BaseModel):
    """
    ApiV1WorkspaceProjectSlugRolesPost200ResponseRolePermissionsInner
    """
    subject: Optional[ApiV1WorkspaceProjectSlugRolesPost200ResponseRolePermissionsInnerSubject] = None
    action: ApiV1WorkspaceProjectSlugRolesPost200ResponseRolePermissionsInnerSubject = Field(...)
    conditions: Optional[ApiV1WorkspaceProjectSlugRolesPost200ResponseRolePermissionsInnerConditions] = None
    __properties = ["subject", "action", "conditions"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ApiV1WorkspaceProjectSlugRolesPost200ResponseRolePermissionsInner:
        """Create an instance of ApiV1WorkspaceProjectSlugRolesPost200ResponseRolePermissionsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of subject
        if self.subject:
            _dict['subject'] = self.subject.to_dict()
        # override the default output from pydantic by calling `to_dict()` of action
        if self.action:
            _dict['action'] = self.action.to_dict()
        # override the default output from pydantic by calling `to_dict()` of conditions
        if self.conditions:
            _dict['conditions'] = self.conditions.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ApiV1WorkspaceProjectSlugRolesPost200ResponseRolePermissionsInner:
        """Create an instance of ApiV1WorkspaceProjectSlugRolesPost200ResponseRolePermissionsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ApiV1WorkspaceProjectSlugRolesPost200ResponseRolePermissionsInner.parse_obj(obj)

        _obj = ApiV1WorkspaceProjectSlugRolesPost200ResponseRolePermissionsInner.parse_obj({
            "subject": ApiV1WorkspaceProjectSlugRolesPost200ResponseRolePermissionsInnerSubject.from_dict(obj.get("subject")) if obj.get("subject") is not None else None,
            "action": ApiV1WorkspaceProjectSlugRolesPost200ResponseRolePermissionsInnerSubject.from_dict(obj.get("action")) if obj.get("action") is not None else None,
            "conditions": ApiV1WorkspaceProjectSlugRolesPost200ResponseRolePermissionsInnerConditions.from_dict(obj.get("conditions")) if obj.get("conditions") is not None else None
        })
        return _obj


