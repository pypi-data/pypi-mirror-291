# coding: utf-8

"""
    Infisical API

    List of all available APIs that can be consumed

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt

class ApiV1RateLimitPutRequest(BaseModel):
    """
    ApiV1RateLimitPutRequest
    """
    read_rate_limit: Union[StrictFloat, StrictInt] = Field(default=..., alias="readRateLimit")
    write_rate_limit: Union[StrictFloat, StrictInt] = Field(default=..., alias="writeRateLimit")
    secrets_rate_limit: Union[StrictFloat, StrictInt] = Field(default=..., alias="secretsRateLimit")
    auth_rate_limit: Union[StrictFloat, StrictInt] = Field(default=..., alias="authRateLimit")
    invite_user_rate_limit: Union[StrictFloat, StrictInt] = Field(default=..., alias="inviteUserRateLimit")
    mfa_rate_limit: Union[StrictFloat, StrictInt] = Field(default=..., alias="mfaRateLimit")
    public_endpoint_limit: Union[StrictFloat, StrictInt] = Field(default=..., alias="publicEndpointLimit")
    __properties = ["readRateLimit", "writeRateLimit", "secretsRateLimit", "authRateLimit", "inviteUserRateLimit", "mfaRateLimit", "publicEndpointLimit"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ApiV1RateLimitPutRequest:
        """Create an instance of ApiV1RateLimitPutRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ApiV1RateLimitPutRequest:
        """Create an instance of ApiV1RateLimitPutRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ApiV1RateLimitPutRequest.parse_obj(obj)

        _obj = ApiV1RateLimitPutRequest.parse_obj({
            "read_rate_limit": obj.get("readRateLimit"),
            "write_rate_limit": obj.get("writeRateLimit"),
            "secrets_rate_limit": obj.get("secretsRateLimit"),
            "auth_rate_limit": obj.get("authRateLimit"),
            "invite_user_rate_limit": obj.get("inviteUserRateLimit"),
            "mfa_rate_limit": obj.get("mfaRateLimit"),
            "public_endpoint_limit": obj.get("publicEndpointLimit")
        })
        return _obj


