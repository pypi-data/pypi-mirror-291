# coding: utf-8

"""
    Infisical API

    List of all available APIs that can be consumed

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from infisicalapi_client.models.api_v1_dynamic_secrets_leases_lease_id_get200_response_lease import ApiV1DynamicSecretsLeasesLeaseIdGet200ResponseLease  # noqa: E501

class TestApiV1DynamicSecretsLeasesLeaseIdGet200ResponseLease(unittest.TestCase):
    """ApiV1DynamicSecretsLeasesLeaseIdGet200ResponseLease unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ApiV1DynamicSecretsLeasesLeaseIdGet200ResponseLease:
        """Test ApiV1DynamicSecretsLeasesLeaseIdGet200ResponseLease
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ApiV1DynamicSecretsLeasesLeaseIdGet200ResponseLease`
        """
        model = ApiV1DynamicSecretsLeasesLeaseIdGet200ResponseLease()  # noqa: E501
        if include_optional:
            return ApiV1DynamicSecretsLeasesLeaseIdGet200ResponseLease(
                id = '',
                version = 1.337,
                external_entity_id = '',
                expire_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                status = '',
                status_details = '',
                dynamic_secret_id = '',
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                dynamic_secret = infisicalapi_client.models._api_v1_dynamic_secrets_get_200_response_dynamic_secrets_inner._api_v1_dynamic_secrets_get_200_response_dynamicSecrets_inner(
                    id = '', 
                    name = '', 
                    version = 1.337, 
                    type = '', 
                    default_ttl = '', 
                    max_ttl = '', 
                    folder_id = '', 
                    status = '', 
                    status_details = '', 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
            )
        else:
            return ApiV1DynamicSecretsLeasesLeaseIdGet200ResponseLease(
                id = '',
                version = 1.337,
                external_entity_id = '',
                expire_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                dynamic_secret_id = '',
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                dynamic_secret = infisicalapi_client.models._api_v1_dynamic_secrets_get_200_response_dynamic_secrets_inner._api_v1_dynamic_secrets_get_200_response_dynamicSecrets_inner(
                    id = '', 
                    name = '', 
                    version = 1.337, 
                    type = '', 
                    default_ttl = '', 
                    max_ttl = '', 
                    folder_id = '', 
                    status = '', 
                    status_details = '', 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
        )
        """

    def testApiV1DynamicSecretsLeasesLeaseIdGet200ResponseLease(self):
        """Test ApiV1DynamicSecretsLeasesLeaseIdGet200ResponseLease"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
