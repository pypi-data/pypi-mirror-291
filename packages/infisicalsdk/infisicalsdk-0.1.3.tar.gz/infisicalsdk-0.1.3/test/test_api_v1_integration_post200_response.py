# coding: utf-8

"""
    Infisical API

    List of all available APIs that can be consumed

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from infisicalapi_client.models.api_v1_integration_post200_response import ApiV1IntegrationPost200Response  # noqa: E501

class TestApiV1IntegrationPost200Response(unittest.TestCase):
    """ApiV1IntegrationPost200Response unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ApiV1IntegrationPost200Response:
        """Test ApiV1IntegrationPost200Response
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ApiV1IntegrationPost200Response`
        """
        model = ApiV1IntegrationPost200Response()  # noqa: E501
        if include_optional:
            return ApiV1IntegrationPost200Response(
                integration = infisicalapi_client.models._api_v1_integration_post_200_response_integration._api_v1_integration_post_200_response_integration(
                    id = '', 
                    is_active = True, 
                    url = '', 
                    app = '', 
                    app_id = '', 
                    target_environment = '', 
                    target_environment_id = '', 
                    target_service = '', 
                    target_service_id = '', 
                    owner = '', 
                    path = '', 
                    region = '', 
                    scope = '', 
                    integration = '', 
                    metadata = null, 
                    integration_auth_id = '', 
                    env_id = '', 
                    secret_path = '/', 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    last_used = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    is_synced = True, 
                    sync_message = '', 
                    last_sync_job_id = '', )
            )
        else:
            return ApiV1IntegrationPost200Response(
                integration = infisicalapi_client.models._api_v1_integration_post_200_response_integration._api_v1_integration_post_200_response_integration(
                    id = '', 
                    is_active = True, 
                    url = '', 
                    app = '', 
                    app_id = '', 
                    target_environment = '', 
                    target_environment_id = '', 
                    target_service = '', 
                    target_service_id = '', 
                    owner = '', 
                    path = '', 
                    region = '', 
                    scope = '', 
                    integration = '', 
                    metadata = null, 
                    integration_auth_id = '', 
                    env_id = '', 
                    secret_path = '/', 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    last_used = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    is_synced = True, 
                    sync_message = '', 
                    last_sync_job_id = '', ),
        )
        """

    def testApiV1IntegrationPost200Response(self):
        """Test ApiV1IntegrationPost200Response"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
