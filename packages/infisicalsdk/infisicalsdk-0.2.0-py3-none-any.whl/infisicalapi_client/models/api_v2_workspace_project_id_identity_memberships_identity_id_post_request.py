# coding: utf-8

"""
    Infisical API

    List of all available APIs that can be consumed

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from infisicalapi_client.models.api_v2_workspace_project_id_identity_memberships_identity_id_post_request_roles_inner import ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPostRequestRolesInner

class ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPostRequest(BaseModel):
    """
    ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPostRequest
    """
    role: Optional[StrictStr] = 'no-access'
    roles: Optional[conlist(ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPostRequestRolesInner)] = Field(default=None, description="A list of role slugs to assign to the newly created identity project membership.")
    __properties = ["role", "roles"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPostRequest:
        """Create an instance of ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPostRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in roles (list)
        _items = []
        if self.roles:
            for _item in self.roles:
                if _item:
                    _items.append(_item.to_dict())
            _dict['roles'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPostRequest:
        """Create an instance of ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPostRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPostRequest.parse_obj(obj)

        _obj = ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPostRequest.parse_obj({
            "role": obj.get("role") if obj.get("role") is not None else 'no-access',
            "roles": [ApiV2WorkspaceProjectIdIdentityMembershipsIdentityIdPostRequestRolesInner.from_dict(_item) for _item in obj.get("roles")] if obj.get("roles") is not None else None
        })
        return _obj


