# coding: utf-8

"""
    Infisical API

    List of all available APIs that can be consumed

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictStr, validator

class ApiV1PkiCertificatesSerialNumberRevokePostRequest(BaseModel):
    """
    ApiV1PkiCertificatesSerialNumberRevokePostRequest
    """
    revocation_reason: StrictStr = Field(default=..., alias="revocationReason", description="The reason for revoking the certificate.")
    __properties = ["revocationReason"]

    @validator('revocation_reason')
    def revocation_reason_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('UNSPECIFIED', 'KEY_COMPROMISE', 'CA_COMPROMISE', 'AFFILIATION_CHANGED', 'SUPERSEDED', 'CESSATION_OF_OPERATION', 'CERTIFICATE_HOLD', 'PRIVILEGE_WITHDRAWN', 'A_A_COMPROMISE'):
            raise ValueError("must be one of enum values ('UNSPECIFIED', 'KEY_COMPROMISE', 'CA_COMPROMISE', 'AFFILIATION_CHANGED', 'SUPERSEDED', 'CESSATION_OF_OPERATION', 'CERTIFICATE_HOLD', 'PRIVILEGE_WITHDRAWN', 'A_A_COMPROMISE')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ApiV1PkiCertificatesSerialNumberRevokePostRequest:
        """Create an instance of ApiV1PkiCertificatesSerialNumberRevokePostRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ApiV1PkiCertificatesSerialNumberRevokePostRequest:
        """Create an instance of ApiV1PkiCertificatesSerialNumberRevokePostRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ApiV1PkiCertificatesSerialNumberRevokePostRequest.parse_obj(obj)

        _obj = ApiV1PkiCertificatesSerialNumberRevokePostRequest.parse_obj({
            "revocation_reason": obj.get("revocationReason")
        })
        return _obj


