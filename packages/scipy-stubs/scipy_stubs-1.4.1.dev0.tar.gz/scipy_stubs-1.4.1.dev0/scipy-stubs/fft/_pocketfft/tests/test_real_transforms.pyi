from collections.abc import Generator

from scipy._typing import Untyped
from scipy.fft._pocketfft.realtransforms import (
    dct as dct,
    dctn as dctn,
    dst as dst,
    dstn as dstn,
    idct as idct,
    idctn as idctn,
    idst as idst,
    idstn as idstn,
)

fftpack_test_dir: Untyped
MDATA_COUNT: int
FFTWDATA_COUNT: int

def is_longdouble_binary_compatible() -> Untyped: ...
def reference_data() -> Generator[Untyped, None, None]: ...
def fftwdata_size(request, reference_data) -> Untyped: ...
def mdata_x(request, reference_data) -> Untyped: ...
def mdata_xy(request, reference_data) -> Untyped: ...
def fftw_dct_ref(type, size, dt, reference_data) -> Untyped: ...
def fftw_dst_ref(type, size, dt, reference_data) -> Untyped: ...
def ref_2d(func, x, **kwargs) -> Untyped: ...
def naive_dct1(x, norm: Untyped | None = None) -> Untyped: ...
def naive_dst1(x, norm: Untyped | None = None) -> Untyped: ...
def naive_dct4(x, norm: Untyped | None = None) -> Untyped: ...
def naive_dst4(x, norm: Untyped | None = None) -> Untyped: ...
def test_complex(transform, dtype): ...

DecMapType: Untyped
dec_map: DecMapType

class TestDCT:
    def test_definition(self, rdt, type, fftwdata_size, reference_data): ...
    def test_axis(self, rdt, type, size): ...

def test_dct1_definition_ortho(rdt, mdata_x): ...
def test_dct2_definition_matlab(mdata_xy, rdt): ...
def test_dct3_definition_ortho(mdata_x, rdt): ...
def test_dct4_definition_ortho(mdata_x, rdt): ...
def test_idct_definition(fftwdata_size, rdt, type, reference_data): ...
def test_definition(fftwdata_size, rdt, type, reference_data): ...
def test_dst1_definition_ortho(rdt, mdata_x): ...
def test_dst4_definition_ortho(rdt, mdata_x): ...
def test_idst_definition(fftwdata_size, rdt, type, reference_data): ...
def test_overwrite(routine, dtype, shape, axis, type, norm, overwrite_x): ...

class Test_DCTN_IDCTN:
    dec: int
    dct_type: Untyped
    norms: Untyped
    rstate: Untyped
    shape: Untyped
    data: Untyped
    def test_axes_round_trip(self, fforward, finverse, axes, dct_type, norm): ...
    def test_dctn_vs_2d_reference(self, funcn, func, dct_type, norm): ...
    def test_idctn_vs_2d_reference(self, funcn, func, dct_type, norm): ...
    def test_axes_and_shape(self, fforward, finverse): ...
    def test_shape(self, fforward): ...
    def test_shape_is_none_with_axes(self, fforward, finverse, axes): ...

def test_swapped_byte_order(func): ...
