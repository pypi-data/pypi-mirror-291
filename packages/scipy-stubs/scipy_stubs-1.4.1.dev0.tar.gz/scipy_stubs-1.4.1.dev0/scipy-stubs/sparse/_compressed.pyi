from ._base import SparseEfficiencyWarning as SparseEfficiencyWarning, issparse as issparse, sparray as sparray
from ._data import _data_matrix, _minmax_mixin
from ._index import IndexMixin as IndexMixin
from ._sparsetools import (
    csr_column_index1 as csr_column_index1,
    csr_column_index2 as csr_column_index2,
    csr_row_index as csr_row_index,
    csr_row_slice as csr_row_slice,
    csr_sample_offsets as csr_sample_offsets,
    csr_sample_values as csr_sample_values,
    csr_todense as csr_todense,
    get_csr_submatrix as get_csr_submatrix,
)
from ._sputils import (
    check_shape as check_shape,
    downcast_intp_index as downcast_intp_index,
    get_sum_dtype as get_sum_dtype,
    getdtype as getdtype,
    is_pydata_spmatrix as is_pydata_spmatrix,
    isdense as isdense,
    isintlike as isintlike,
    isscalarlike as isscalarlike,
    isshape as isshape,
    to_native as to_native,
    upcast as upcast,
    upcast_char as upcast_char,
)
from scipy._lib._util import copy_if_needed as copy_if_needed
from scipy._typing import Untyped

class _cs_matrix(_data_matrix, _minmax_mixin, IndexMixin):
    data: Untyped
    indices: Untyped
    indptr: Untyped
    def __init__(
        self,
        arg1,
        shape: Untyped | None = None,
        dtype: Untyped | None = None,
        copy: bool = False,
        *,
        maxprint: Untyped | None = None,
    ): ...
    def count_nonzero(self, axis: Untyped | None = None) -> Untyped: ...
    def check_format(self, full_check: bool = True): ...
    def __eq__(self, other) -> Untyped: ...
    def __ne__(self, other) -> Untyped: ...
    def __lt__(self, other) -> Untyped: ...
    def __gt__(self, other) -> Untyped: ...
    def __le__(self, other) -> Untyped: ...
    def __ge__(self, other) -> Untyped: ...
    def multiply(self, other) -> Untyped: ...
    def diagonal(self, k: int = 0) -> Untyped: ...
    def maximum(self, other) -> Untyped: ...
    def minimum(self, other) -> Untyped: ...
    def sum(self, axis: Untyped | None = None, dtype: Untyped | None = None, out: Untyped | None = None) -> Untyped: ...
    def tocoo(self, copy: bool = True) -> Untyped: ...
    def toarray(self, order: Untyped | None = None, out: Untyped | None = None) -> Untyped: ...
    def eliminate_zeros(self): ...
    @property
    def has_canonical_format(self) -> bool: ...
    @has_canonical_format.setter
    def has_canonical_format(self, val: bool): ...
    def sum_duplicates(self): ...
    @property
    def has_sorted_indices(self) -> bool: ...
    @has_sorted_indices.setter
    def has_sorted_indices(self, val: bool): ...
    def sorted_indices(self) -> Untyped: ...
    def sort_indices(self): ...
    def prune(self): ...
    def resize(self, *shape): ...
