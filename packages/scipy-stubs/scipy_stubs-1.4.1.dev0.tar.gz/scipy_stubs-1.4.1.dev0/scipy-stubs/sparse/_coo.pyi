from .._lib._util import copy_if_needed as copy_if_needed
from ._base import SparseEfficiencyWarning as SparseEfficiencyWarning, issparse as issparse, sparray as sparray
from ._data import _data_matrix, _minmax_mixin
from ._matrix import spmatrix as spmatrix
from ._sparsetools import (
    coo_matmat_dense as coo_matmat_dense,
    coo_matvec as coo_matvec,
    coo_tocsr as coo_tocsr,
    coo_todense as coo_todense,
)
from ._sputils import (
    check_reshape_kwargs as check_reshape_kwargs,
    check_shape as check_shape,
    downcast_intp_index as downcast_intp_index,
    get_index_dtype as get_index_dtype,
    getdata as getdata,
    getdtype as getdtype,
    isshape as isshape,
    to_native as to_native,
    upcast_char as upcast_char,
)
from scipy._typing import Untyped

__docformat__: str

class _coo_base(_data_matrix, _minmax_mixin):
    coords: Untyped
    data: Untyped
    has_canonical_format: bool
    def __init__(
        self,
        arg1,
        shape: Untyped | None = None,
        dtype: Untyped | None = None,
        copy: bool = False,
        *,
        maxprint: Untyped | None = None,
    ): ...
    @property
    def row(self) -> Untyped: ...
    @row.setter
    def row(self, new_row): ...
    @property
    def col(self) -> Untyped: ...
    @col.setter
    def col(self, new_col): ...
    def reshape(self, *args, **kwargs) -> Untyped: ...
    def count_nonzero(self, axis: Untyped | None = None) -> Untyped: ...
    def transpose(self, axes: Untyped | None = None, copy: bool = False) -> Untyped: ...
    def resize(self, *shape) -> None: ...
    def toarray(self, order: Untyped | None = None, out: Untyped | None = None) -> Untyped: ...
    def tocsc(self, copy: bool = False) -> Untyped: ...
    def tocsr(self, copy: bool = False) -> Untyped: ...
    def tocoo(self, copy: bool = False) -> Untyped: ...
    def todia(self, copy: bool = False) -> Untyped: ...
    def todok(self, copy: bool = False) -> Untyped: ...
    def diagonal(self, k: int = 0) -> Untyped: ...
    def sum_duplicates(self) -> None: ...
    def eliminate_zeros(self): ...

def isspmatrix_coo(x) -> Untyped: ...

class coo_array(_coo_base, sparray): ...
class coo_matrix(spmatrix, _coo_base): ...
