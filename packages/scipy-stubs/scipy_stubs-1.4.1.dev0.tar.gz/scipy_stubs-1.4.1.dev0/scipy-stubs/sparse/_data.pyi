from ._base import _spbase, sparray as sparray
from ._sputils import isscalarlike as isscalarlike, validateaxis as validateaxis
from scipy._typing import Untyped

class _data_matrix(_spbase):
    def __init__(self, arg1, *, maxprint: Untyped | None = None): ...
    @property
    def dtype(self) -> Untyped: ...
    @dtype.setter
    def dtype(self, newtype): ...
    def __abs__(self) -> Untyped: ...
    def __round__(self, ndigits: int = 0) -> Untyped: ...
    def __neg__(self) -> Untyped: ...
    def __imul__(self, other) -> Untyped: ...
    def __itruediv__(self, other) -> Untyped: ...
    def astype(self, dtype, casting: str = "unsafe", copy: bool = True) -> Untyped: ...
    def conjugate(self, copy: bool = True) -> Untyped: ...
    def copy(self) -> Untyped: ...
    def power(self, n, dtype: Untyped | None = None) -> Untyped: ...

name: Untyped

class _minmax_mixin:
    def max(self, axis: Untyped | None = None, out: Untyped | None = None, *, explicit: bool = False) -> Untyped: ...
    def min(self, axis: Untyped | None = None, out: Untyped | None = None, *, explicit: bool = False) -> Untyped: ...
    def nanmax(self, axis: Untyped | None = None, out: Untyped | None = None, *, explicit: bool = False) -> Untyped: ...
    def nanmin(self, axis: Untyped | None = None, out: Untyped | None = None, *, explicit: bool = False) -> Untyped: ...
    def argmax(self, axis: Untyped | None = None, out: Untyped | None = None, *, explicit: bool = False) -> Untyped: ...
    def argmin(self, axis: Untyped | None = None, out: Untyped | None = None, *, explicit: bool = False) -> Untyped: ...
