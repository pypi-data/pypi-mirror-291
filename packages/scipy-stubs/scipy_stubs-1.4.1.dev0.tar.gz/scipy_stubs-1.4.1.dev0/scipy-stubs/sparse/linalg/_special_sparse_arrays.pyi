from scipy._typing import Untyped
from scipy.sparse import dia_array as dia_array, eye as eye, kron as kron
from scipy.sparse.linalg import LinearOperator as LinearOperator

class LaplacianNd(LinearOperator):
    grid_shape: Untyped
    boundary_conditions: Untyped
    def __init__(self, grid_shape, *, boundary_conditions: str = "neumann", dtype=...): ...
    def eigenvalues(self, m: Untyped | None = None) -> Untyped: ...
    def eigenvectors(self, m: Untyped | None = None) -> Untyped: ...
    def toarray(self) -> Untyped: ...
    def tosparse(self) -> Untyped: ...

class Sakurai(LinearOperator):
    n: Untyped
    dtype: Untyped
    def __init__(self, n, dtype=...) -> None: ...
    def eigenvalues(self, m: Untyped | None = None) -> Untyped: ...
    def tobanded(self) -> Untyped: ...
    def tosparse(self) -> Untyped: ...
    def toarray(self) -> Untyped: ...

class MikotaM(LinearOperator):
    shape: Untyped
    dtype: Untyped
    def __init__(self, shape, dtype=...) -> None: ...
    def tobanded(self) -> Untyped: ...
    def tosparse(self) -> Untyped: ...
    def toarray(self) -> Untyped: ...

class MikotaK(LinearOperator):
    shape: Untyped
    dtype: Untyped
    def __init__(self, shape, dtype=...) -> None: ...
    def tobanded(self) -> Untyped: ...
    def tosparse(self) -> Untyped: ...
    def toarray(self) -> Untyped: ...

class MikotaPair:
    n: Untyped
    dtype: Untyped
    shape: Untyped
    m: Untyped
    k: Untyped
    def __init__(self, n, dtype=...) -> None: ...
    def eigenvalues(self, m: Untyped | None = None) -> Untyped: ...
