from scipy._lib._util import np_long as np_long
from scipy._typing import Untyped
from scipy.sparse import SparseEfficiencyWarning as SparseEfficiencyWarning
from scipy.sparse.linalg import aslinearoperator as aslinearoperator
from scipy.sparse.linalg._expm_multiply import expm_multiply as expm_multiply

IMPRECISE: Untyped
REAL_DTYPES: Untyped
COMPLEX_DTYPES: Untyped
DTYPES: Untyped

def estimated(func) -> Untyped: ...
def less_than_or_close(a, b) -> Untyped: ...

class TestExpmActionSimple:
    def test_theta_monotonicity(self): ...
    def test_p_max_default(self): ...
    def test_p_max_range(self): ...
    def test_onenormest_matrix_power(self): ...
    def test_expm_multiply(self): ...
    def test_matrix_vector_multiply(self): ...
    def test_scaled_expm_multiply(self): ...
    def test_scaled_expm_multiply_single_timepoint(self): ...
    def test_sparse_expm_multiply(self): ...
    def test_complex(self): ...

class TestExpmActionInterval:
    def test_sparse_expm_multiply_interval(self): ...
    def test_expm_multiply_interval_vector(self): ...
    def test_expm_multiply_interval_matrix(self): ...
    def test_sparse_expm_multiply_interval_dtypes(self): ...
    def test_expm_multiply_interval_status_0(self): ...
    def test_expm_multiply_interval_status_1(self): ...
    def test_expm_multiply_interval_status_2(self): ...

def test_expm_multiply_dtype(dtype_a, dtype_b, b_is_matrix): ...
