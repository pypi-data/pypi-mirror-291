import numpy as np

from scipy._lib._testutils import check_free_memory as check_free_memory
from scipy._lib._util import ComplexWarning as ComplexWarning
from scipy._typing import Untyped
from scipy.linalg import inv as inv, norm as norm
from scipy.sparse import (
    SparseEfficiencyWarning as SparseEfficiencyWarning,
    bsr_matrix as bsr_matrix,
    csc_matrix as csc_matrix,
    csr_matrix as csr_matrix,
    dok_matrix as dok_matrix,
    identity as identity,
    issparse as issparse,
    lil_matrix as lil_matrix,
    spdiags as spdiags,
)
from scipy.sparse.linalg import SuperLU as SuperLU
from scipy.sparse.linalg._dsolve import (
    MatrixRankWarning as MatrixRankWarning,
    factorized as factorized,
    spilu as spilu,
    splu as splu,
    spsolve as spsolve,
    spsolve_triangular as spsolve_triangular,
    use_solver as use_solver,
)

sup_sparse_efficiency: Untyped
has_umfpack: bool

def toarray(a) -> Untyped: ...
def setup_bug_8278() -> Untyped: ...

class TestFactorized:
    n: Untyped
    A: Untyped
    def setup_method(self): ...
    def test_singular_without_umfpack(self): ...
    def test_singular_with_umfpack(self): ...
    def test_non_singular_without_umfpack(self): ...
    def test_non_singular_with_umfpack(self): ...
    def test_cannot_factorize_nonsquare_matrix_without_umfpack(self): ...
    def test_factorizes_nonsquare_matrix_with_umfpack(self): ...
    def test_call_with_incorrectly_sized_matrix_without_umfpack(self): ...
    def test_call_with_incorrectly_sized_matrix_with_umfpack(self): ...
    def test_call_with_cast_to_complex_without_umfpack(self): ...
    def test_call_with_cast_to_complex_with_umfpack(self): ...
    def test_assume_sorted_indices_flag(self): ...
    def test_bug_8278(self): ...

class TestLinsolve:
    def setup_method(self): ...
    def test_singular(self): ...
    def test_singular_gh_3312(self): ...
    def test_twodiags(self, format: str, idx_dtype: np.dtype): ...
    def test_bvector_smoketest(self): ...
    def test_bmatrix_smoketest(self): ...
    def test_non_square(self): ...
    def test_example_comparison(self): ...
    def test_shape_compatibility(self): ...
    def test_ndarray_support(self): ...
    def test_gssv_badinput(self) -> Untyped: ...
    def test_sparsity_preservation(self): ...
    def test_dtype_cast(self): ...
    def test_bug_8278(self): ...

class TestSplu:
    n: Untyped
    A: Untyped
    def setup_method(self): ...
    def test_splu_smoketest(self): ...
    def test_spilu_smoketest(self): ...
    def test_spilu_drop_rule(self): ...
    def test_splu_nnz0(self): ...
    def test_spilu_nnz0(self): ...
    def test_splu_basic(self): ...
    def test_splu_perm(self): ...
    def test_natural_permc(self, splu_fun, rtol): ...
    def test_lu_refcount(self): ...
    def test_bad_inputs(self): ...
    def test_superlu_dlamch_i386_nan(self): ...
    def test_lu_attr(self): ...
    def test_threads_parallel(self): ...
    def test_singular_matrix(self): ...

class TestGstrsErrors:
    A: Untyped
    b: Untyped
    def setup_method(self): ...
    def test_trans(self): ...
    def test_shape_LU(self): ...
    def test_shape_b(self): ...
    def test_types_differ(self): ...
    def test_types_unsupported(self): ...

class TestSpsolveTriangular:
    def setup_method(self): ...
    def test_zero_diagonal(self, fmt): ...
    def test_singular(self, fmt): ...
    def test_bad_shape(self): ...
    def test_input_types(self): ...
    def test_random(self, n, m, lower, format, unit_diagonal, choice_of_A, choice_of_b) -> Untyped: ...
