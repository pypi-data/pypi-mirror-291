from collections.abc import Generator

from scipy._lib._util import ComplexWarning as ComplexWarning
from scipy._lib.decorator import decorator as decorator
from scipy._typing import Untyped
from scipy.sparse import (
    SparseEfficiencyWarning as SparseEfficiencyWarning,
    bsr_matrix as bsr_matrix,
    coo_matrix as coo_matrix,
    csc_matrix as csc_matrix,
    csr_matrix as csr_matrix,
    dia_matrix as dia_matrix,
    dok_matrix as dok_matrix,
    eye as eye,
    issparse as issparse,
    lil_matrix as lil_matrix,
    sparray as sparray,
)
from scipy.sparse._sputils import (
    asmatrix as asmatrix,
    get_index_dtype as get_index_dtype,
    isscalarlike as isscalarlike,
    matrix as matrix,
    supported_dtypes as supported_dtypes,
)
from scipy.sparse.linalg import expm as expm, inv as inv, splu as splu

IS_COLAB: Untyped

def assert_in(member, collection, msg: Untyped | None = None): ...
def assert_array_equal_dtype(x, y, **kwargs): ...

NON_ARRAY_BACKED_FORMATS: Untyped

def sparse_may_share_memory(A, B) -> Untyped: ...

sup_complex: Untyped

def with_64bit_maxval_limit(
    maxval_limit: Untyped | None = None,
    random: bool = False,
    fixed_dtype: Untyped | None = None,
    downcast_maxval: Untyped | None = None,
    assert_32bit: bool = False,
) -> Untyped: ...
def toarray(a) -> Untyped: ...

class BinopTester:
    def __add__(self, mat) -> Untyped: ...
    def __mul__(self, mat) -> Untyped: ...
    def __sub__(self, mat) -> Untyped: ...
    def __radd__(self, mat) -> Untyped: ...
    def __rmul__(self, mat) -> Untyped: ...
    def __rsub__(self, mat) -> Untyped: ...
    def __matmul__(self, mat) -> Untyped: ...
    def __rmatmul__(self, mat) -> Untyped: ...

class BinopTester_with_shape:
    def __init__(self, shape) -> None: ...
    def shape(self) -> Untyped: ...
    def ndim(self) -> Untyped: ...
    def __add__(self, mat) -> Untyped: ...
    def __mul__(self, mat) -> Untyped: ...
    def __sub__(self, mat) -> Untyped: ...
    def __radd__(self, mat) -> Untyped: ...
    def __rmul__(self, mat) -> Untyped: ...
    def __rsub__(self, mat) -> Untyped: ...
    def __matmul__(self, mat) -> Untyped: ...
    def __rmatmul__(self, mat) -> Untyped: ...

class ComparisonTester:
    def __eq__(self, other) -> Untyped: ...
    def __ne__(self, other) -> Untyped: ...
    def __lt__(self, other) -> Untyped: ...
    def __le__(self, other) -> Untyped: ...
    def __gt__(self, other) -> Untyped: ...
    def __ge__(self, other) -> Untyped: ...

class _TestCommon:
    math_dtypes = supported_dtypes
    @classmethod
    def init_class(cls): ...
    def test_bool(self): ...
    def test_bool_rollover(self): ...
    def test_eq(self): ...
    def test_ne(self): ...
    def test_lt(self): ...
    def test_gt(self): ...
    def test_le(self): ...
    def test_ge(self): ...
    def test_empty(self): ...
    def test_count_nonzero(self): ...
    def test_invalid_shapes(self): ...
    def test_repr(self): ...
    def test_str_maxprint(self): ...
    def test_str(self): ...
    def test_empty_arithmetic(self): ...
    def test_abs(self): ...
    def test_round(self): ...
    def test_elementwise_power(self): ...
    def test_neg(self): ...
    def test_real(self): ...
    def test_imag(self): ...
    def test_diagonal(self): ...
    def test_trace(self): ...
    def test_reshape(self): ...
    def test_setdiag_comprehensive(self): ...
    def test_setdiag(self): ...
    def test_nonzero(self): ...
    def test_numpy_nonzero(self): ...
    def test_getrow(self): ...
    def test_getcol(self): ...
    def test_sum(self): ...
    def test_sum_invalid_params(self): ...
    def test_sum_dtype(self): ...
    def test_sum_out(self): ...
    def test_numpy_sum(self): ...
    def test_mean(self): ...
    def test_mean_invalid_params(self): ...
    def test_mean_dtype(self): ...
    def test_mean_out(self): ...
    def test_numpy_mean(self): ...
    def test_expm(self): ...
    def test_inv(self): ...
    def test_from_array(self): ...
    def test_from_matrix(self): ...
    def test_from_list(self): ...
    def test_from_sparse(self): ...
    def test_todense(self): ...
    def test_toarray(self): ...
    def test_astype(self): ...
    def test_astype_immutable(self): ...
    def test_asfptype(self): ...
    def test_mul_scalar(self): ...
    def test_rmul_scalar(self): ...
    def test_rmul_scalar_type_error(self): ...
    def test_add(self): ...
    def test_radd(self): ...
    def test_sub(self): ...
    def test_rsub(self): ...
    def test_add0(self): ...
    def test_elementwise_multiply(self): ...
    def test_elementwise_multiply_broadcast(self): ...
    def test_elementwise_divide(self): ...
    def test_pow(self): ...
    def test_rmatvec(self): ...
    def test_small_multiplication(self): ...
    def test_star_vs_at_sign_for_sparray_and_spmatrix(self): ...
    def test_binop_custom_type(self): ...
    def test_binop_custom_type_with_shape(self): ...
    scalar: Untyped
    def test_mul_custom_type(self) -> Untyped: ...
    def test_comparisons_custom_type(self): ...
    def test_dot_scalar(self): ...
    def test_matmul(self): ...
    def test_matvec(self): ...
    def test_matmat_sparse(self): ...
    def test_matmat_dense(self): ...
    def test_sparse_format_conversions(self): ...
    def test_tobsr(self): ...
    def test_transpose(self): ...
    def test_add_dense(self): ...
    def test_sub_dense(self): ...
    def test_maximum_minimum(self): ...
    def test_copy(self): ...
    def test_iterator(self): ...
    def test_size_zero_matrix_arithmetic(self): ...
    def test_size_zero_conversions(self): ...
    def test_pickle(self): ...
    def test_unary_ufunc_overrides(self): ...
    def test_resize(self): ...
    def test_constructor1_base(self): ...

class _TestInplaceArithmetic:
    def test_inplace_dense(self): ...
    def test_imul_scalar(self): ...
    def test_idiv_scalar(self): ...
    def test_inplace_success(self): ...

class _TestGetSet:
    def test_getelement(self): ...
    def test_setelement(self): ...
    def test_negative_index_assignment(self): ...
    def test_scalar_assign_2(self): ...
    def test_index_scalar_assign(self): ...

class _TestSolve:
    def test_solve(self): ...

class _TestSlicing:
    def test_dtype_preservation(self): ...
    def test_dtype_preservation_empty_slice(self): ...
    def test_get_horiz_slice(self): ...
    def test_get_vert_slice(self): ...
    def test_get_slices(self): ...
    def test_non_unit_stride_2d_indexing(self): ...
    def test_slicing_2(self): ...
    def test_slicing_3(self): ...
    def test_ellipsis_slicing(self): ...
    def test_multiple_ellipsis_slicing(self): ...

class _TestSlicingAssign:
    def test_slice_scalar_assign(self): ...
    def test_slice_assign_2(self): ...
    def test_self_self_assignment(self): ...
    def test_slice_assignment(self): ...
    def test_sparsity_modifying_assignment(self): ...
    def test_set_slice(self): ...
    def test_assign_empty(self): ...
    def test_assign_1d_slice(self): ...

class _TestFancyIndexing:
    def test_dtype_preservation_empty_index(self): ...
    def test_bad_index(self): ...
    def test_fancy_indexing(self): ...
    def test_fancy_indexing_randomized(self): ...
    def test_missized_masking(self): ...
    def test_fancy_indexing_boolean(self): ...
    def test_fancy_indexing_sparse_boolean(self): ...
    def test_fancy_indexing_regression_3087(self): ...
    def test_fancy_indexing_seq_assign(self): ...
    def test_fancy_indexing_2d_assign(self): ...
    def test_fancy_indexing_empty(self): ...

def check_remains_sorted(X) -> Generator[None, None, None]: ...

class _TestFancyIndexingAssign:
    def test_bad_index_assign(self): ...
    def test_fancy_indexing_set(self): ...
    def test_fancy_assignment_dtypes(self): ...
    def test_sequence_assignment(self): ...
    def test_fancy_assign_empty(self): ...

class _TestFancyMultidim:
    def test_fancy_indexing_ndarray(self): ...

class _TestFancyMultidimAssign:
    def test_fancy_assign_ndarray(self): ...
    def test_fancy_indexing_multidim_set(self): ...
    def test_fancy_assign_list(self): ...
    def test_fancy_assign_slice(self): ...

class _TestArithmetic:
    def test_add_sub(self): ...
    def test_mu(self): ...

class _TestMinMax:
    def test_minmax(self): ...
    def test_minmax_axis(self): ...
    def test_nanminmax(self): ...
    def test_minmax_invalid_params(self): ...
    def test_numpy_minmax(self): ...
    def test_argmax(self): ...

class _TestGetNnzAxis:
    def test_getnnz_axis(self): ...

def sparse_test_class(
    getset: bool = True,
    slicing: bool = True,
    slicing_assign: bool = True,
    fancy_indexing: bool = True,
    fancy_assign: bool = True,
    fancy_multidim_indexing: bool = True,
    fancy_multidim_assign: bool = True,
    minmax: bool = True,
    nnz_axis: bool = True,
) -> Untyped: ...

class TestCSR(Untyped):
    @classmethod
    def spcreator(cls, *args, **kwargs) -> Untyped: ...
    math_dtypes: Untyped
    def test_constructor1(self): ...
    def test_constructor2(self): ...
    def test_constructor3(self): ...
    def test_constructor4(self): ...
    def test_constructor5(self): ...
    def test_constructor6(self): ...
    def test_constructor_smallcol(self): ...
    def test_constructor_largecol(self): ...
    def test_sort_indices(self): ...
    def test_eliminate_zeros(self): ...
    def test_ufuncs(self): ...
    def test_unsorted_arithmetic(self): ...
    def test_fancy_indexing_broadcast(self): ...
    def test_has_sorted_indices(self): ...
    def test_has_canonical_format(self): ...
    def test_scalar_idx_dtype(self): ...
    def test_binop_explicit_zeros(self): ...

class TestCSC(Untyped):
    @classmethod
    def spcreator(cls, *args, **kwargs) -> Untyped: ...
    math_dtypes: Untyped
    def test_constructor1(self): ...
    def test_constructor2(self): ...
    def test_constructor3(self): ...
    def test_constructor4(self): ...
    def test_constructor5(self): ...
    def test_constructor6(self): ...
    def test_eliminate_zeros(self): ...
    def test_sort_indices(self): ...
    def test_ufuncs(self): ...
    def test_unsorted_arithmetic(self): ...
    def test_fancy_indexing_broadcast(self): ...
    def test_scalar_idx_dtype(self): ...

class TestDOK(Untyped):
    spcreator = dok_matrix
    math_dtypes: Untyped
    def test_mult(self): ...
    def test_add_nonzero(self): ...
    def test_dok_divide_scalar(self): ...
    def test_convert(self): ...
    def test_ctor(self): ...
    def test_ticket1160(self): ...

class TestLIL(Untyped):
    spcreator = lil_matrix
    math_dtypes: Untyped
    def test_dot(self): ...
    def test_scalar_mul(self): ...
    def test_truediv_scalar(self): ...
    def test_inplace_ops(self): ...
    def test_lil_iteration(self): ...
    def test_lil_from_csr(self): ...
    def test_fancy_indexing_lil(self): ...
    def test_point_wise_multiply(self): ...
    def test_lil_multiply_removal(self): ...

class TestCOO(Untyped):
    spcreator = coo_matrix
    math_dtypes: Untyped
    def test_constructor1(self): ...
    def test_constructor2(self): ...
    def test_constructor3(self): ...
    def test_constructor4(self): ...
    def test_constructor_data_ij_dtypeNone(self): ...
    def test_iterator(self): ...
    def test_todia_all_zeros(self): ...
    def test_sum_duplicates(self): ...
    def test_todok_duplicates(self): ...
    def test_tocompressed_duplicates(self): ...
    def test_eliminate_zeros(self): ...
    def test_reshape_copy(self): ...
    def test_large_dimensions_reshape(self): ...

class TestDIA(Untyped):
    spcreator = dia_matrix
    math_dtypes: Untyped
    def test_constructor1(self): ...
    def test_iterator(self): ...
    def test_setdiag_dtype(self): ...
    def test_getnnz_axis(self): ...
    def test_convert_gh14555(self): ...
    def test_tocoo_gh10050(self): ...
    def test_tocoo_tocsr_tocsc_gh19245(self): ...
    def test_mul_scalar(self): ...

class TestBSR(Untyped):
    spcreator = bsr_matrix
    math_dtypes: Untyped
    def test_constructor1(self): ...
    def test_constructor2(self): ...
    def test_constructor3(self): ...
    def test_constructor4(self): ...
    def test_constructor5(self): ...
    def test_default_dtype(self): ...
    def test_bsr_tocsr(self): ...
    def test_eliminate_zeros(self): ...
    def test_eliminate_zeros_all_zero(self): ...
    def test_bsr_matvec(self): ...
    def test_bsr_matvecs(self): ...
    def test_iterator(self): ...
    def test_setdiag(self): ...
    def test_resize_blocked(self): ...
    def test_setdiag_comprehensive(self): ...
    def test_scalar_idx_dtype(self): ...

class _NonCanonicalMixin:
    def spcreator(self, D, *args, sorted_indices: bool = False, **kwargs) -> Untyped: ...
    def test_bool(self): ...
    def test_getnnz_axis(self): ...
    def test_empty(self): ...

class _NonCanonicalCompressedMixin(_NonCanonicalMixin): ...

class _NonCanonicalCSMixin(_NonCanonicalCompressedMixin):
    def test_getelement(self): ...
    def test_setitem_sparse(self): ...
    def test_inv(self): ...
    def test_solve(self): ...

class TestCSRNonCanonical(_NonCanonicalCSMixin, TestCSR): ...
class TestCSCNonCanonical(_NonCanonicalCSMixin, TestCSC): ...

class TestBSRNonCanonical(_NonCanonicalCompressedMixin, TestBSR):
    def test_diagonal(self): ...
    def test_expm(self): ...

class TestCOONonCanonical(_NonCanonicalMixin, TestCOO):
    def test_setdiag_noncanonical(self): ...

def cases_64bit() -> Generator[Untyped, None, None]: ...

class Test64Bit:
    MAT_CLASSES: Untyped
    def test_decorator_maxval_limit(self): ...
    def test_decorator_maxval_random(self): ...
    def test_resiliency_limit_10(self, cls, method_name): ...
    def test_resiliency_random(self, cls, method_name): ...
    def test_resiliency_all_32(self, cls, method_name): ...
    def test_resiliency_all_64(self, cls, method_name): ...
    def test_no_64(self, cls, method_name): ...
    def test_downcast_intp(self): ...
