from types import ModuleType
from typing import Any, TypeAlias

from scipy._lib import array_api_compat as array_api_compat
from scipy._lib.array_api_compat import is_array_api_obj as is_array_api_obj
from scipy._typing import Untyped

SCIPY_ARRAY_API: str | bool
SCIPY_DEVICE: Untyped
Array: TypeAlias = Any
ArrayLike: Untyped

def array_namespace(*arrays: Array) -> ModuleType: ...
def xp_atleast_nd(x: Array, *, ndim: int, xp: ModuleType | None = None) -> Array: ...
def xp_copy(x: Array, *, xp: ModuleType | None = None) -> Array: ...
def is_numpy(xp: ModuleType) -> bool: ...
def is_cupy(xp: ModuleType) -> bool: ...
def is_torch(xp: ModuleType) -> bool: ...
def is_jax(xp) -> Untyped: ...
def is_array_api_strict(xp) -> Untyped: ...
def xp_assert_equal(
    actual,
    desired,
    check_namespace: bool = True,
    check_dtype: bool = True,
    check_shape: bool = True,
    allow_0d: bool = False,
    err_msg: str = "",
    xp: Untyped | None = None,
) -> Untyped: ...
def xp_assert_close(
    actual,
    desired,
    rtol: Untyped | None = None,
    atol: int = 0,
    check_namespace: bool = True,
    check_dtype: bool = True,
    check_shape: bool = True,
    allow_0d: bool = False,
    err_msg: str = "",
    xp: Untyped | None = None,
) -> Untyped: ...
def xp_assert_less(
    actual,
    desired,
    check_namespace: bool = True,
    check_dtype: bool = True,
    check_shape: bool = True,
    allow_0d: bool = False,
    err_msg: str = "",
    verbose: bool = True,
    xp: Untyped | None = None,
) -> Untyped: ...
def assert_array_almost_equal(actual, desired, decimal: int = 6, *args, **kwds) -> Untyped: ...
def assert_almost_equal(actual, desired, decimal: int = 7, *args, **kwds) -> Untyped: ...
def xp_cov(x: Array, *, xp: ModuleType | None = None) -> Array: ...
def xp_unsupported_param_msg(param: Any) -> str: ...
def is_complex(x: Array, xp: ModuleType) -> bool: ...
def get_xp_devices(xp: ModuleType) -> list[str] | list[None]: ...
def scipy_namespace_for(xp: ModuleType) -> ModuleType | None: ...
def xp_moveaxis_to_end(x: Array, source: int, /, *, xp: ModuleType | None = None) -> Array: ...
def xp_copysign(x1: Array, x2: Array, /, *, xp: ModuleType | None = None) -> Array: ...
def xp_sign(x: Array, /, *, xp: ModuleType | None = None) -> Array: ...
def xp_vector_norm(
    x: Array,
    /,
    *,
    axis: int | tuple[int] | None = None,
    keepdims: bool = False,
    ord: int | float = 2,
    xp: ModuleType | None = None,
) -> Array: ...
def xp_ravel(x: Array, /, *, xp: ModuleType | None = None) -> Array: ...
def xp_real(x: Array, /, *, xp: ModuleType | None = None) -> Array: ...
def xp_take_along_axis(arr: Array, indices: Array, /, *, axis: int = -1, xp: ModuleType | None = None) -> Array: ...
