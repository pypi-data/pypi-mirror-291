from ..problem import (
    BoundConstraints as BoundConstraints,
    LinearConstraints as LinearConstraints,
    NonlinearConstraints as NonlinearConstraints,
    ObjectiveFunction as ObjectiveFunction,
    Problem as Problem,
)
from ..settings import PRINT_OPTIONS as PRINT_OPTIONS
from ..utils import CallbackSuccess as CallbackSuccess
from scipy._typing import Untyped
from scipy.optimize import Bounds as Bounds, LinearConstraint as LinearConstraint, NonlinearConstraint as NonlinearConstraint
from scipy.optimize._minimize import standardize_constraints as standardize_constraints

class BaseTest:
    @staticmethod
    def rosen(x, c: float = 100.0) -> Untyped: ...
    class Rosen:
        def __call__(self, x) -> Untyped: ...

class TestObjectiveFunction(BaseTest):
    def test_simple(self, capsys): ...
    def test_args(self): ...
    def test_none(self): ...
    def test_wrapper(self): ...
    def test_verbose(self, capsys): ...

class TestBoundConstraints:
    def test_simple(self): ...
    def test_nan(self): ...
    def test_infeasible(self): ...

class TestLinearConstraints:
    def test_simple(self): ...
    def test_nan(self): ...
    def test_inf(self): ...

class TestNonlinearConstraint:
    def test_simple(self) -> Untyped: ...
    def test_args(self) -> Untyped: ...
    def test_verbose(self, capsys): ...
    def test_exceptions(self): ...

class TestProblem(BaseTest):
    def test_simple(self): ...
    def test_scale(self): ...
    def test_barrier(self) -> Untyped: ...
    def test_history(self): ...
    def test_filter(self): ...
    def test_callback(self): ...
    def test_type(self): ...
    def test_feasibility_problem(self): ...
    def test_best_eval(self): ...
    def test_exceptions(self): ...
