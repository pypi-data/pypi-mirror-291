from typing import NamedTuple

from scipy._typing import Untyped

class Infinity:
    def __hash__(self) -> Untyped: ...
    def __lt__(self, other) -> Untyped: ...
    def __le__(self, other) -> Untyped: ...
    def __eq__(self, other) -> Untyped: ...
    def __ne__(self, other) -> Untyped: ...
    def __gt__(self, other) -> Untyped: ...
    def __ge__(self, other) -> Untyped: ...
    def __neg__(self) -> Untyped: ...

class NegativeInfinity:
    def __hash__(self) -> Untyped: ...
    def __lt__(self, other) -> Untyped: ...
    def __le__(self, other) -> Untyped: ...
    def __eq__(self, other) -> Untyped: ...
    def __ne__(self, other) -> Untyped: ...
    def __gt__(self, other) -> Untyped: ...
    def __ge__(self, other) -> Untyped: ...
    def __neg__(self) -> Untyped: ...

class _Version(NamedTuple):
    epoch: Untyped
    release: Untyped
    dev: Untyped
    pre: Untyped
    post: Untyped
    local: Untyped

def parse(version) -> Untyped: ...

class InvalidVersion(ValueError): ...

class _BaseVersion:
    def __hash__(self) -> Untyped: ...
    def __lt__(self, other) -> Untyped: ...
    def __le__(self, other) -> Untyped: ...
    def __eq__(self, other) -> Untyped: ...
    def __ge__(self, other) -> Untyped: ...
    def __gt__(self, other) -> Untyped: ...
    def __ne__(self, other) -> Untyped: ...

class LegacyVersion(_BaseVersion):
    def __init__(self, version) -> None: ...
    @property
    def public(self) -> Untyped: ...
    @property
    def base_version(self) -> Untyped: ...
    @property
    def local(self): ...
    @property
    def is_prerelease(self) -> Untyped: ...
    @property
    def is_postrelease(self) -> Untyped: ...

VERSION_PATTERN: str

class Version(_BaseVersion):
    def __init__(self, version) -> None: ...
    @property
    def public(self) -> Untyped: ...
    @property
    def base_version(self) -> Untyped: ...
    @property
    def local(self) -> Untyped: ...
    @property
    def is_prerelease(self) -> Untyped: ...
    @property
    def is_postrelease(self) -> Untyped: ...
