from ._censored_data import CensoredData as CensoredData
from ._distr_params import distcont as distcont, distdiscrete as distdiscrete
from scipy import integrate as integrate, optimize as optimize, stats as stats
from scipy._lib import doccer as doccer
from scipy._lib._util import check_random_state as check_random_state
from scipy._typing import Untyped
from scipy.special import comb as comb, entr as entr
from scipy.stats._warnings_errors import FitError as FitError

docheaders: Untyped
docdict: Untyped
docdict_discrete: Untyped

class rv_frozen:
    args: Untyped
    kwds: Untyped
    dist: Untyped
    def __init__(self, dist, *args, **kwds) -> None: ...
    @property
    def random_state(self) -> Untyped: ...
    @random_state.setter
    def random_state(self, seed): ...
    def cdf(self, x) -> Untyped: ...
    def logcdf(self, x) -> Untyped: ...
    def ppf(self, q) -> Untyped: ...
    def isf(self, q) -> Untyped: ...
    def rvs(self, size: Untyped | None = None, random_state: Untyped | None = None) -> Untyped: ...
    def sf(self, x) -> Untyped: ...
    def logsf(self, x) -> Untyped: ...
    def stats(self, moments: str = "mv") -> Untyped: ...
    def median(self) -> Untyped: ...
    def mean(self) -> Untyped: ...
    def var(self) -> Untyped: ...
    def std(self) -> Untyped: ...
    def moment(self, order: Untyped | None = None) -> Untyped: ...
    def entropy(self) -> Untyped: ...
    def interval(self, confidence: Untyped | None = None) -> Untyped: ...
    def expect(
        self, func: Untyped | None = None, lb: Untyped | None = None, ub: Untyped | None = None, conditional: bool = False, **kwds
    ) -> Untyped: ...
    def support(self) -> Untyped: ...

class rv_discrete_frozen(rv_frozen):
    def pmf(self, k) -> Untyped: ...
    def logpmf(self, k) -> Untyped: ...

class rv_continuous_frozen(rv_frozen):
    def pdf(self, x) -> Untyped: ...
    def logpdf(self, x) -> Untyped: ...

def argsreduce(cond, *args) -> Untyped: ...

parse_arg_template: str

class rv_generic:
    def __init__(self, seed: Untyped | None = None): ...
    @property
    def random_state(self) -> Untyped: ...
    @random_state.setter
    def random_state(self, seed): ...
    def freeze(self, *args, **kwds) -> Untyped: ...
    def __call__(self, *args, **kwds) -> Untyped: ...
    def rvs(self, *args, **kwds) -> Untyped: ...
    def stats(self, *args, **kwds) -> Untyped: ...
    def entropy(self, *args, **kwds) -> Untyped: ...
    def moment(self, order, *args, **kwds) -> Untyped: ...
    def median(self, *args, **kwds) -> Untyped: ...
    def mean(self, *args, **kwds) -> Untyped: ...
    def var(self, *args, **kwds) -> Untyped: ...
    def std(self, *args, **kwds) -> Untyped: ...
    def interval(self, confidence, *args, **kwds) -> Untyped: ...
    def support(self, *args, **kwargs) -> Untyped: ...
    def nnlf(self, theta, x) -> Untyped: ...

class _ShapeInfo:
    name: Untyped
    integrality: Untyped
    domain: Untyped
    def __init__(self, name, integrality: bool = False, domain=..., inclusive=(True, True)): ...

class rv_continuous(rv_generic):
    badvalue: Untyped
    name: Untyped
    a: Untyped
    b: Untyped
    xtol: Untyped
    moment_type: Untyped
    shapes: Untyped
    def __init__(
        self,
        momtype: int = 1,
        a: Untyped | None = None,
        b: Untyped | None = None,
        xtol: float = 1e-14,
        badvalue: Untyped | None = None,
        name: Untyped | None = None,
        longname: Untyped | None = None,
        shapes: Untyped | None = None,
        seed: Untyped | None = None,
    ): ...
    def pdf(self, x, *args, **kwds) -> Untyped: ...
    def logpdf(self, x, *args, **kwds) -> Untyped: ...
    def cdf(self, x, *args, **kwds) -> Untyped: ...
    def logcdf(self, x, *args, **kwds) -> Untyped: ...
    def sf(self, x, *args, **kwds) -> Untyped: ...
    def logsf(self, x, *args, **kwds) -> Untyped: ...
    def ppf(self, q, *args, **kwds) -> Untyped: ...
    def isf(self, q, *args, **kwds) -> Untyped: ...
    def fit(self, data, *args, **kwds) -> Untyped: ...
    def fit_loc_scale(self, data, *args) -> Untyped: ...
    def expect(
        self,
        func: Untyped | None = None,
        args=(),
        loc: int = 0,
        scale: int = 1,
        lb: Untyped | None = None,
        ub: Untyped | None = None,
        conditional: bool = False,
        **kwds,
    ) -> Untyped: ...

class rv_discrete(rv_generic):
    def __new__(
        cls,
        a: int = 0,
        b=...,
        name: Untyped | None = None,
        badvalue: Untyped | None = None,
        moment_tol: float = 1e-08,
        values: Untyped | None = None,
        inc: int = 1,
        longname: Untyped | None = None,
        shapes: Untyped | None = None,
        seed: Untyped | None = None,
    ) -> Untyped: ...
    badvalue: Untyped
    a: Untyped
    b: Untyped
    moment_tol: Untyped
    inc: Untyped
    shapes: Untyped
    def __init__(
        self,
        a: int = 0,
        b=...,
        name: Untyped | None = None,
        badvalue: Untyped | None = None,
        moment_tol: float = 1e-08,
        values: Untyped | None = None,
        inc: int = 1,
        longname: Untyped | None = None,
        shapes: Untyped | None = None,
        seed: Untyped | None = None,
    ): ...
    def rvs(self, *args, **kwargs) -> Untyped: ...
    def pmf(self, k, *args, **kwds) -> Untyped: ...
    def logpmf(self, k, *args, **kwds) -> Untyped: ...
    def cdf(self, k, *args, **kwds) -> Untyped: ...
    def logcdf(self, k, *args, **kwds) -> Untyped: ...
    def sf(self, k, *args, **kwds) -> Untyped: ...
    def logsf(self, k, *args, **kwds) -> Untyped: ...
    def ppf(self, q, *args, **kwds) -> Untyped: ...
    def isf(self, q, *args, **kwds) -> Untyped: ...
    def expect(
        self,
        func: Untyped | None = None,
        args=(),
        loc: int = 0,
        lb: Untyped | None = None,
        ub: Untyped | None = None,
        conditional: bool = False,
        maxcount: int = 1000,
        tolerance: float = 1e-10,
        chunksize: int = 32,
    ) -> Untyped: ...

class rv_sample(rv_discrete):
    badvalue: Untyped
    moment_tol: Untyped
    inc: Untyped
    shapes: Untyped
    vecentropy: Untyped
    xk: Untyped
    pk: Untyped
    a: Untyped
    b: Untyped
    qvals: Untyped
    def __init__(
        self,
        a: int = 0,
        b=...,
        name: Untyped | None = None,
        badvalue: Untyped | None = None,
        moment_tol: float = 1e-08,
        values: Untyped | None = None,
        inc: int = 1,
        longname: Untyped | None = None,
        shapes: Untyped | None = None,
        seed: Untyped | None = None,
    ): ...
    def generic_moment(self, n) -> Untyped: ...

def get_distribution_names(namespace_pairs, rv_base_class) -> Untyped: ...
