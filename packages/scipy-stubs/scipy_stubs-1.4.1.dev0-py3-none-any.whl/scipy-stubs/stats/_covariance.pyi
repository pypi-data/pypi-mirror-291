from scipy import linalg as linalg
from scipy._typing import Untyped

class Covariance:
    def __init__(self) -> None: ...
    @staticmethod
    def from_diagonal(diagonal) -> Untyped: ...
    @staticmethod
    def from_precision(precision, covariance: Untyped | None = None) -> Untyped: ...
    @staticmethod
    def from_cholesky(cholesky) -> Untyped: ...
    @staticmethod
    def from_eigendecomposition(eigendecomposition) -> Untyped: ...
    def whiten(self, x) -> Untyped: ...
    def colorize(self, x) -> Untyped: ...
    @property
    def log_pdet(self) -> Untyped: ...
    @property
    def rank(self) -> Untyped: ...
    @property
    def covariance(self) -> Untyped: ...
    @property
    def shape(self) -> Untyped: ...

class CovViaPrecision(Covariance):
    def __init__(self, precision, covariance: Untyped | None = None): ...

class CovViaDiagonal(Covariance):
    def __init__(self, diagonal) -> None: ...

class CovViaCholesky(Covariance):
    def __init__(self, cholesky) -> None: ...

class CovViaEigendecomposition(Covariance):
    def __init__(self, eigendecomposition) -> None: ...

class CovViaPSD(Covariance):
    def __init__(self, psd) -> None: ...
