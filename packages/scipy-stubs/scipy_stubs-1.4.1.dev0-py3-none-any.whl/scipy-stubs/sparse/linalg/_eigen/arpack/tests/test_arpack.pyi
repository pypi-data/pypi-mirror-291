from scipy._lib._gcutils import IS_PYPY as IS_PYPY, assert_deallocated as assert_deallocated
from scipy._typing import Untyped
from scipy.linalg import eig as eig, eigh as eigh
from scipy.sparse import csc_matrix as csc_matrix, csr_matrix as csr_matrix, diags as diags, rand as rand
from scipy.sparse.linalg import LinearOperator as LinearOperator, aslinearoperator as aslinearoperator
from scipy.sparse.linalg._eigen.arpack import (
    ArpackNoConvergence as ArpackNoConvergence,
    arpack as arpack,
    eigs as eigs,
    eigsh as eigsh,
)

__usage__: str

def generate_matrix(
    N, complex_: bool = False, hermitian: bool = False, pos_definite: bool = False, sparse: bool = False
) -> Untyped: ...
def generate_matrix_symmetric(N, pos_definite: bool = False, sparse: bool = False) -> Untyped: ...
def assert_allclose_cc(actual, desired, **kw): ...
def argsort_which(
    eigenvalues, typ, k, which, sigma: Untyped | None = None, OPpart: Untyped | None = None, mode: Untyped | None = None
) -> Untyped: ...
def eval_evec(
    symmetric,
    d,
    typ,
    k,
    which,
    v0: Untyped | None = None,
    sigma: Untyped | None = None,
    mattype=...,
    OPpart: Untyped | None = None,
    mode: str = "normal",
): ...

class DictWithRepr(dict):
    name: Untyped
    def __init__(self, name) -> None: ...

class SymmetricParams:
    eigs: Untyped
    which: Untyped
    mattypes: Untyped
    sigmas_modes: Untyped
    real_test_cases: Untyped
    complex_test_cases: Untyped
    def __init__(self) -> None: ...

class NonSymmetricParams:
    eigs: Untyped
    which: Untyped
    mattypes: Untyped
    sigmas_OPparts: Untyped
    real_test_cases: Untyped
    complex_test_cases: Untyped
    def __init__(self) -> None: ...

def test_symmetric_modes(): ...
def test_hermitian_modes(): ...
def test_symmetric_starting_vector(): ...
def test_symmetric_no_convergence(): ...
def test_real_nonsymmetric_modes(): ...
def test_complex_nonsymmetric_modes(): ...
def test_standard_nonsymmetric_starting_vector(): ...
def test_general_nonsymmetric_starting_vector(): ...
def test_standard_nonsymmetric_no_convergence(): ...
def test_eigen_bad_shapes(): ...
def test_eigen_bad_kwargs(): ...
def test_ticket_1459_arpack_crash(): ...
def test_linearoperator_deallocation() -> Untyped: ...
def test_parallel_threads(): ...
def test_reentering() -> Untyped: ...
def test_regression_arpackng_1315(): ...
def test_eigs_for_k_greater(): ...
def test_eigsh_for_k_greater(): ...
def test_real_eigs_real_k_subset(): ...
