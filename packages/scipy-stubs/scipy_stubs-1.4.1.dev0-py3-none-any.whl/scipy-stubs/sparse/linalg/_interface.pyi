from scipy._typing import Untyped
from scipy.sparse import issparse as issparse
from scipy.sparse._sputils import (
    asmatrix as asmatrix,
    is_pydata_spmatrix as is_pydata_spmatrix,
    isintlike as isintlike,
    isshape as isshape,
)

class LinearOperator:
    ndim: int
    __array_ufunc__: Untyped
    def __new__(cls, *args, **kwargs) -> Untyped: ...
    dtype: Untyped
    shape: Untyped
    def __init__(self, dtype, shape) -> None: ...
    def matvec(self, x) -> Untyped: ...
    def rmatvec(self, x) -> Untyped: ...
    def matmat(self, X) -> Untyped: ...
    def rmatmat(self, X) -> Untyped: ...
    def __call__(self, x) -> Untyped: ...
    def __mul__(self, x) -> Untyped: ...
    def __truediv__(self, other) -> Untyped: ...
    def dot(self, x) -> Untyped: ...
    def __matmul__(self, other) -> Untyped: ...
    def __rmatmul__(self, other) -> Untyped: ...
    def __rmul__(self, x) -> Untyped: ...
    def __pow__(self, p) -> Untyped: ...
    def __add__(self, x) -> Untyped: ...
    def __neg__(self) -> Untyped: ...
    def __sub__(self, x) -> Untyped: ...
    def adjoint(self) -> Untyped: ...
    H: Untyped
    def transpose(self) -> Untyped: ...
    T: Untyped

class _CustomLinearOperator(LinearOperator):
    args: Untyped
    def __init__(
        self,
        shape,
        matvec,
        rmatvec: Untyped | None = None,
        matmat: Untyped | None = None,
        dtype: Untyped | None = None,
        rmatmat: Untyped | None = None,
    ): ...

class _AdjointLinearOperator(LinearOperator):
    A: Untyped
    args: Untyped
    def __init__(self, A) -> None: ...

class _TransposedLinearOperator(LinearOperator):
    A: Untyped
    args: Untyped
    def __init__(self, A) -> None: ...

class _SumLinearOperator(LinearOperator):
    args: Untyped
    def __init__(self, A, B) -> None: ...

class _ProductLinearOperator(LinearOperator):
    args: Untyped
    def __init__(self, A, B) -> None: ...

class _ScaledLinearOperator(LinearOperator):
    args: Untyped
    def __init__(self, A, alpha) -> None: ...

class _PowerLinearOperator(LinearOperator):
    args: Untyped
    def __init__(self, A, p) -> None: ...

class MatrixLinearOperator(LinearOperator):
    A: Untyped
    args: Untyped
    def __init__(self, A) -> None: ...

class _AdjointMatrixOperator(MatrixLinearOperator):
    A: Untyped
    args: Untyped
    shape: Untyped
    def __init__(self, adjoint) -> None: ...
    @property
    def dtype(self) -> Untyped: ...

class IdentityOperator(LinearOperator):
    def __init__(self, shape, dtype: Untyped | None = None): ...

def aslinearoperator(A) -> Untyped: ...
