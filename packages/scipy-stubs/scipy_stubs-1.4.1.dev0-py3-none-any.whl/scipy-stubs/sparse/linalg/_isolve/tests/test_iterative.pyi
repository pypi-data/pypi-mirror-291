from scipy._typing import Untyped
from scipy.sparse import csr_matrix as csr_matrix, kronsum as kronsum, spdiags as spdiags
from scipy.sparse.linalg import LinearOperator as LinearOperator, aslinearoperator as aslinearoperator
from scipy.sparse.linalg._isolve import (
    bicg as bicg,
    bicgstab as bicgstab,
    cg as cg,
    cgs as cgs,
    gcrotmk as gcrotmk,
    gmres as gmres,
    lgmres as lgmres,
    minres as minres,
    qmr as qmr,
    tfqmr as tfqmr,
)

CB_TYPE_FILTER: str

def solver(request) -> Untyped: ...

class Case:
    name: Untyped
    A: Untyped
    b: Untyped
    skip: Untyped
    nonconvergence: Untyped
    def __init__(self, name, A, b: Untyped | None = None, skip: Untyped | None = None, nonconvergence: Untyped | None = None): ...

class SingleTest:
    A: Untyped
    b: Untyped
    solver: Untyped
    name: Untyped
    convergence: Untyped
    def __init__(self, A, b, solver, casename, convergence: bool = True): ...

class IterativeParams:
    cases: Untyped
    def __init__(self) -> None: ...
    def generate_tests(self) -> Untyped: ...

cases: Untyped

def case(request) -> Untyped: ...
def test_maxiter(case): ...
def test_convergence(case): ...
def test_precond_dummy(case) -> Untyped: ...
def test_precond_inverse(case) -> Untyped: ...
def test_atol(solver): ...
def test_zero_rhs(solver): ...
def test_maxiter_worsening(solver): ...
def test_x0_working(solver): ...
def test_x0_equals_Mb(case): ...
def test_x0_solves_problem_exactly(solver): ...
def test_show(case, capsys): ...
def test_positional_error(solver): ...
def test_invalid_atol(solver, atol): ...

class TestQMR:
    def test_leftright_precond(self) -> Untyped: ...

class TestGMRES:
    def test_basic(self): ...
    def test_callback(self) -> Untyped: ...
    def test_abi(self): ...
    def test_atol_legacy(self): ...
    def test_defective_precond_breakdown(self): ...
    def test_defective_matrix_breakdown(self): ...
    def test_callback_type(self): ...
    def test_callback_x_monotonic(self): ...
