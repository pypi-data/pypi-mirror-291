from .models import Models as Models, Quadratic as Quadratic
from .settings import Constants as Constants, Options as Options
from .subsolvers import (
    cauchy_geometry as cauchy_geometry,
    constrained_tangential_byrd_omojokun as constrained_tangential_byrd_omojokun,
    normal_byrd_omojokun as normal_byrd_omojokun,
    spider_geometry as spider_geometry,
    tangential_byrd_omojokun as tangential_byrd_omojokun,
)
from .subsolvers.optim import qr_tangential_byrd_omojokun as qr_tangential_byrd_omojokun
from .utils import get_arrays_tol as get_arrays_tol
from scipy._typing import Untyped
from scipy.optimize import lsq_linear as lsq_linear

TINY: Untyped
EPS: Untyped

class TrustRegion:
    def __init__(self, pb, options, constants) -> None: ...
    @property
    def n(self) -> Untyped: ...
    @property
    def m_linear_ub(self) -> Untyped: ...
    @property
    def m_linear_eq(self) -> Untyped: ...
    @property
    def m_nonlinear_ub(self) -> Untyped: ...
    @property
    def m_nonlinear_eq(self) -> Untyped: ...
    @property
    def radius(self) -> Untyped: ...
    @radius.setter
    def radius(self, radius): ...
    @property
    def resolution(self) -> Untyped: ...
    @resolution.setter
    def resolution(self, resolution): ...
    @property
    def penalty(self) -> Untyped: ...
    @property
    def models(self) -> Untyped: ...
    @property
    def best_index(self) -> Untyped: ...
    @property
    def x_best(self) -> Untyped: ...
    @property
    def fun_best(self) -> Untyped: ...
    @property
    def cub_best(self) -> Untyped: ...
    @property
    def ceq_best(self) -> Untyped: ...
    def lag_model(self, x) -> Untyped: ...
    def lag_model_grad(self, x) -> Untyped: ...
    def lag_model_hess(self) -> Untyped: ...
    def lag_model_hess_prod(self, v) -> Untyped: ...
    def lag_model_curv(self, v) -> Untyped: ...
    def sqp_fun(self, step) -> Untyped: ...
    def sqp_cub(self, step) -> Untyped: ...
    def sqp_ceq(self, step) -> Untyped: ...
    def merit(
        self, x, fun_val: Untyped | None = None, cub_val: Untyped | None = None, ceq_val: Untyped | None = None
    ) -> Untyped: ...
    def get_constraint_linearizations(self, x) -> Untyped: ...
    def get_trust_region_step(self, options) -> Untyped: ...
    def get_geometry_step(self, k_new, options) -> Untyped: ...
    def get_second_order_correction_step(self, step, options) -> Untyped: ...
    def get_reduction_ratio(self, step, fun_val, cub_val, ceq_val) -> Untyped: ...
    def increase_penalty(self, step) -> Untyped: ...
    def decrease_penalty(self): ...
    def set_best_index(self): ...
    def get_index_to_remove(self, x_new: Untyped | None = None) -> Untyped: ...
    def update_radius(self, step, ratio): ...
    def enhance_resolution(self, options): ...
    def shift_x_base(self, options): ...
    def set_multipliers(self, x): ...
