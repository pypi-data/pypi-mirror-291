from .settings import Options as Options
from .utils import FeasibleSuccess as FeasibleSuccess, MaxEvalError as MaxEvalError, TargetSuccess as TargetSuccess
from scipy._typing import Untyped
from scipy.linalg import eigh as eigh

EPS: Untyped

class Interpolation:
    def __init__(self, pb, options) -> None: ...
    @property
    def n(self) -> Untyped: ...
    @property
    def npt(self) -> Untyped: ...
    @property
    def xpt(self) -> Untyped: ...
    @xpt.setter
    def xpt(self, xpt): ...
    @property
    def x_base(self) -> Untyped: ...
    @x_base.setter
    def x_base(self, x_base): ...
    def point(self, k) -> Untyped: ...

def build_system(interpolation) -> Untyped: ...

class Quadratic:
    def __init__(self, interpolation, values, debug) -> None: ...
    def __call__(self, x, interpolation) -> Untyped: ...
    @property
    def n(self) -> Untyped: ...
    @property
    def npt(self) -> Untyped: ...
    def grad(self, x, interpolation) -> Untyped: ...
    def hess(self, interpolation) -> Untyped: ...
    def hess_prod(self, v, interpolation) -> Untyped: ...
    def curv(self, v, interpolation) -> Untyped: ...
    def update(self, interpolation, k_new, dir_old, values_diff) -> Untyped: ...
    def shift_x_base(self, interpolation, new_x_base): ...
    @staticmethod
    def solve_systems(interpolation, rhs) -> Untyped: ...

class Models:
    def __init__(self, pb, options) -> None: ...
    @property
    def n(self) -> Untyped: ...
    @property
    def npt(self) -> Untyped: ...
    @property
    def m_nonlinear_ub(self) -> Untyped: ...
    @property
    def m_nonlinear_eq(self) -> Untyped: ...
    @property
    def interpolation(self) -> Untyped: ...
    @property
    def fun_val(self) -> Untyped: ...
    @property
    def cub_val(self) -> Untyped: ...
    @property
    def ceq_val(self) -> Untyped: ...
    def fun(self, x) -> Untyped: ...
    def fun_grad(self, x) -> Untyped: ...
    def fun_hess(self) -> Untyped: ...
    def fun_hess_prod(self, v) -> Untyped: ...
    def fun_curv(self, v) -> Untyped: ...
    def fun_alt_grad(self, x) -> Untyped: ...
    def cub(self, x, mask: Untyped | None = None) -> Untyped: ...
    def cub_grad(self, x, mask: Untyped | None = None) -> Untyped: ...
    def cub_hess(self, mask: Untyped | None = None) -> Untyped: ...
    def cub_hess_prod(self, v, mask: Untyped | None = None) -> Untyped: ...
    def cub_curv(self, v, mask: Untyped | None = None) -> Untyped: ...
    def ceq(self, x, mask: Untyped | None = None) -> Untyped: ...
    def ceq_grad(self, x, mask: Untyped | None = None) -> Untyped: ...
    def ceq_hess(self, mask: Untyped | None = None) -> Untyped: ...
    def ceq_hess_prod(self, v, mask: Untyped | None = None) -> Untyped: ...
    def ceq_curv(self, v, mask: Untyped | None = None) -> Untyped: ...
    def reset_models(self): ...
    def update_interpolation(self, k_new, x_new, fun_val, cub_val, ceq_val) -> Untyped: ...
    def determinants(self, x_new, k_new: Untyped | None = None) -> Untyped: ...
    def shift_x_base(self, new_x_base, options): ...
