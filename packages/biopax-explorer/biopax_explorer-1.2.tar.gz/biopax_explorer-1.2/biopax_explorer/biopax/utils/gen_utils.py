import pickle
import base64

##########################################
##TODO remove dependencies to rdfobj here

from rdfobj import  ModelPopulator
# +from .utils , .meta_model
##########################################


#utilities to manipulate the classes generated 

from biopax.entityreference import EntityReference
from biopax.pathwaystep import PathwayStep
from biopax.degradation import Degradation
from biopax.cellvocabulary import CellVocabulary
from biopax.modificationfeature import ModificationFeature
from biopax.dnaregion import DnaRegion
from biopax.pathway import Pathway
from biopax.templatereaction import TemplateReaction
from biopax.transportwithbiochemicalreaction import TransportWithBiochemicalReaction
from biopax.templatereactionregulation import TemplateReactionRegulation
from biopax.physicalentity import PhysicalEntity
from biopax.tissuevocabulary import TissueVocabulary
from biopax.conversion import Conversion
from biopax.phenotypevocabulary import PhenotypeVocabulary
from biopax.covalentbindingfeature import CovalentBindingFeature
from biopax.sequenceinterval import SequenceInterval
from biopax.chemicalstructure import ChemicalStructure
from biopax.rnaregionreference import RnaRegionReference
from biopax.evidence import Evidence
from biopax.rnaregion import RnaRegion
from biopax.proteinreference import ProteinReference
from biopax.xref import Xref
from biopax.evidencecodevocabulary import EvidenceCodeVocabulary
from biopax.biochemicalpathwaystep import BiochemicalPathwayStep
from biopax.entityreferencetypevocabulary import EntityReferenceTypeVocabulary
from biopax.kprime import KPrime
from biopax.publicationxref import PublicationXref
from biopax.molecularinteraction import MolecularInteraction
from biopax.catalysis import Catalysis
from biopax.dna import Dna
from biopax.sequenceregionvocabulary import SequenceRegionVocabulary
from biopax.sequencemodificationvocabulary import SequenceModificationVocabulary
from biopax.smallmolecule import SmallMolecule
from biopax.controlledvocabulary import ControlledVocabulary
from biopax.stoichiometry import Stoichiometry
from biopax.gene import Gene
from biopax.dnaregionreference import DnaRegionReference
from biopax.relationshiptypevocabulary import RelationshipTypeVocabulary
from biopax.geneticinteraction import GeneticInteraction
from biopax.experimentalformvocabulary import ExperimentalFormVocabulary
from biopax.sequencesite import SequenceSite
from biopax.cellularlocationvocabulary import CellularLocationVocabulary
from biopax.provenance import Provenance
from biopax.protein import Protein
from biopax.dnareference import DnaReference
from biopax.deltag import DeltaG
from biopax.interactionvocabulary import InteractionVocabulary
from biopax.smallmoleculereference import SmallMoleculeReference
from biopax.complex import Complex
from biopax.transport import Transport
from biopax.interaction import Interaction
from biopax.rna import Rna
from biopax.experimentalform import ExperimentalForm
from biopax.biosource import BioSource
from biopax.rnareference import RnaReference
from biopax.entityfeature import EntityFeature
from biopax.complexassembly import ComplexAssembly
from biopax.score import Score
from biopax.biochemicalreaction import BiochemicalReaction
from biopax.relationshipxref import RelationshipXref
from biopax.bindingfeature import BindingFeature
from biopax.fragmentfeature import FragmentFeature
from biopax.modulation import Modulation
from biopax.sequencelocation import SequenceLocation
from biopax.control import Control
from biopax.unificationxref import UnificationXref
from biopax.entity import Entity
from biopax.utilityclass import UtilityClass
  



#return an instance of a class corresponding to the input keywork
def define_model_instance(clsn):


  if clsn is None:
    inst=None
  else:
    clsn=str(clsn).strip().lower()
    if clsn =='':
      inst=None 
    elif clsn.lower() == 'entityreference':
      inst = EntityReference() 
    elif clsn.lower() == 'pathwaystep':
      inst = PathwayStep() 
    elif clsn.lower() == 'degradation':
      inst = Degradation() 
    elif clsn.lower() == 'cellvocabulary':
      inst = CellVocabulary() 
    elif clsn.lower() == 'modificationfeature':
      inst = ModificationFeature() 
    elif clsn.lower() == 'dnaregion':
      inst = DnaRegion() 
    elif clsn.lower() == 'pathway':
      inst = Pathway() 
    elif clsn.lower() == 'templatereaction':
      inst = TemplateReaction() 
    elif clsn.lower() == 'transportwithbiochemicalreaction':
      inst = TransportWithBiochemicalReaction() 
    elif clsn.lower() == 'templatereactionregulation':
      inst = TemplateReactionRegulation() 
    elif clsn.lower() == 'physicalentity':
      inst = PhysicalEntity() 
    elif clsn.lower() == 'tissuevocabulary':
      inst = TissueVocabulary() 
    elif clsn.lower() == 'conversion':
      inst = Conversion() 
    elif clsn.lower() == 'phenotypevocabulary':
      inst = PhenotypeVocabulary() 
    elif clsn.lower() == 'covalentbindingfeature':
      inst = CovalentBindingFeature() 
    elif clsn.lower() == 'sequenceinterval':
      inst = SequenceInterval() 
    elif clsn.lower() == 'chemicalstructure':
      inst = ChemicalStructure() 
    elif clsn.lower() == 'rnaregionreference':
      inst = RnaRegionReference() 
    elif clsn.lower() == 'evidence':
      inst = Evidence() 
    elif clsn.lower() == 'rnaregion':
      inst = RnaRegion() 
    elif clsn.lower() == 'proteinreference':
      inst = ProteinReference() 
    elif clsn.lower() == 'xref':
      inst = Xref() 
    elif clsn.lower() == 'evidencecodevocabulary':
      inst = EvidenceCodeVocabulary() 
    elif clsn.lower() == 'biochemicalpathwaystep':
      inst = BiochemicalPathwayStep() 
    elif clsn.lower() == 'entityreferencetypevocabulary':
      inst = EntityReferenceTypeVocabulary() 
    elif clsn.lower() == 'kprime':
      inst = KPrime() 
    elif clsn.lower() == 'publicationxref':
      inst = PublicationXref() 
    elif clsn.lower() == 'molecularinteraction':
      inst = MolecularInteraction() 
    elif clsn.lower() == 'catalysis':
      inst = Catalysis() 
    elif clsn.lower() == 'dna':
      inst = Dna() 
    elif clsn.lower() == 'sequenceregionvocabulary':
      inst = SequenceRegionVocabulary() 
    elif clsn.lower() == 'sequencemodificationvocabulary':
      inst = SequenceModificationVocabulary() 
    elif clsn.lower() == 'smallmolecule':
      inst = SmallMolecule() 
    elif clsn.lower() == 'controlledvocabulary':
      inst = ControlledVocabulary() 
    elif clsn.lower() == 'stoichiometry':
      inst = Stoichiometry() 
    elif clsn.lower() == 'gene':
      inst = Gene() 
    elif clsn.lower() == 'dnaregionreference':
      inst = DnaRegionReference() 
    elif clsn.lower() == 'relationshiptypevocabulary':
      inst = RelationshipTypeVocabulary() 
    elif clsn.lower() == 'geneticinteraction':
      inst = GeneticInteraction() 
    elif clsn.lower() == 'experimentalformvocabulary':
      inst = ExperimentalFormVocabulary() 
    elif clsn.lower() == 'sequencesite':
      inst = SequenceSite() 
    elif clsn.lower() == 'cellularlocationvocabulary':
      inst = CellularLocationVocabulary() 
    elif clsn.lower() == 'provenance':
      inst = Provenance() 
    elif clsn.lower() == 'protein':
      inst = Protein() 
    elif clsn.lower() == 'dnareference':
      inst = DnaReference() 
    elif clsn.lower() == 'deltag':
      inst = DeltaG() 
    elif clsn.lower() == 'interactionvocabulary':
      inst = InteractionVocabulary() 
    elif clsn.lower() == 'smallmoleculereference':
      inst = SmallMoleculeReference() 
    elif clsn.lower() == 'complex':
      inst = Complex() 
    elif clsn.lower() == 'transport':
      inst = Transport() 
    elif clsn.lower() == 'interaction':
      inst = Interaction() 
    elif clsn.lower() == 'rna':
      inst = Rna() 
    elif clsn.lower() == 'experimentalform':
      inst = ExperimentalForm() 
    elif clsn.lower() == 'biosource':
      inst = BioSource() 
    elif clsn.lower() == 'rnareference':
      inst = RnaReference() 
    elif clsn.lower() == 'entityfeature':
      inst = EntityFeature() 
    elif clsn.lower() == 'complexassembly':
      inst = ComplexAssembly() 
    elif clsn.lower() == 'score':
      inst = Score() 
    elif clsn.lower() == 'biochemicalreaction':
      inst = BiochemicalReaction() 
    elif clsn.lower() == 'relationshipxref':
      inst = RelationshipXref() 
    elif clsn.lower() == 'bindingfeature':
      inst = BindingFeature() 
    elif clsn.lower() == 'fragmentfeature':
      inst = FragmentFeature() 
    elif clsn.lower() == 'modulation':
      inst = Modulation() 
    elif clsn.lower() == 'sequencelocation':
      inst = SequenceLocation() 
    elif clsn.lower() == 'control':
      inst = Control() 
    elif clsn.lower() == 'unificationxref':
      inst = UnificationXref() 
    elif clsn.lower() == 'entity':
      inst = Entity() 
    elif clsn.lower() == 'utilityclass':
      inst = UtilityClass() 
   
    else:
      inst=None
  

  return inst

#return an dictionary class_name->[children class_name]
def classes_children():

  mchildren=dict()
  mchildren['EntityReference']= ['RnaRegionReference', 'SmallMoleculeReference', 'DnaReference', 'DnaRegionReference', 'ProteinReference', 'RnaReference']
  mchildren['PathwayStep']= ['BiochemicalPathwayStep']
  mchildren['Degradation']= []
  mchildren['CellVocabulary']= []
  mchildren['ModificationFeature']= ['CovalentBindingFeature']
  mchildren['DnaRegion']= []
  mchildren['Pathway']= []
  mchildren['TemplateReaction']= []
  mchildren['TransportWithBiochemicalReaction']= []
  mchildren['TemplateReactionRegulation']= []
  mchildren['PhysicalEntity']= ['SmallMolecule', 'DnaRegion', 'RnaRegion', 'Dna', 'Rna', 'Protein', 'Complex']
  mchildren['TissueVocabulary']= []
  mchildren['Conversion']= ['TransportWithBiochemicalReaction', 'ComplexAssembly', 'BiochemicalReaction', 'Transport', 'Degradation']
  mchildren['PhenotypeVocabulary']= []
  mchildren['CovalentBindingFeature']= []
  mchildren['SequenceInterval']= []
  mchildren['ChemicalStructure']= []
  mchildren['RnaRegionReference']= []
  mchildren['Evidence']= []
  mchildren['RnaRegion']= []
  mchildren['ProteinReference']= []
  mchildren['Xref']= ['RelationshipXref', 'PublicationXref', 'UnificationXref']
  mchildren['EvidenceCodeVocabulary']= []
  mchildren['BiochemicalPathwayStep']= []
  mchildren['EntityReferenceTypeVocabulary']= []
  mchildren['KPrime']= []
  mchildren['PublicationXref']= []
  mchildren['MolecularInteraction']= []
  mchildren['Catalysis']= []
  mchildren['Dna']= []
  mchildren['SequenceRegionVocabulary']= []
  mchildren['SequenceModificationVocabulary']= []
  mchildren['SmallMolecule']= []
  mchildren['ControlledVocabulary']= ['ExperimentalFormVocabulary', 'TissueVocabulary', 'EvidenceCodeVocabulary', 'CellVocabulary', 'SequenceRegionVocabulary', 'CellularLocationVocabulary', 'SequenceModificationVocabulary', 'RelationshipTypeVocabulary', 'PhenotypeVocabulary', 'InteractionVocabulary', 'EntityReferenceTypeVocabulary']
  mchildren['Stoichiometry']= []
  mchildren['Gene']= []
  mchildren['DnaRegionReference']= []
  mchildren['RelationshipTypeVocabulary']= []
  mchildren['GeneticInteraction']= []
  mchildren['ExperimentalFormVocabulary']= []
  mchildren['SequenceSite']= []
  mchildren['CellularLocationVocabulary']= []
  mchildren['Provenance']= []
  mchildren['Protein']= []
  mchildren['DnaReference']= []
  mchildren['DeltaG']= []
  mchildren['InteractionVocabulary']= []
  mchildren['SmallMoleculeReference']= []
  mchildren['Complex']= []
  mchildren['Transport']= ['TransportWithBiochemicalReaction']
  mchildren['Interaction']= ['Control', 'TransportWithBiochemicalReaction', 'Modulation', 'Conversion', 'ComplexAssembly', 'BiochemicalReaction', 'Catalysis', 'Transport', 'TemplateReaction', 'TemplateReactionRegulation', 'GeneticInteraction', 'Degradation', 'MolecularInteraction']
  mchildren['Rna']= []
  mchildren['ExperimentalForm']= []
  mchildren['BioSource']= []
  mchildren['RnaReference']= []
  mchildren['EntityFeature']= ['BindingFeature', 'FragmentFeature', 'ModificationFeature', 'CovalentBindingFeature']
  mchildren['ComplexAssembly']= []
  mchildren['Score']= []
  mchildren['BiochemicalReaction']= ['TransportWithBiochemicalReaction']
  mchildren['RelationshipXref']= []
  mchildren['BindingFeature']= ['CovalentBindingFeature']
  mchildren['FragmentFeature']= []
  mchildren['Modulation']= []
  mchildren['SequenceLocation']= ['SequenceSite', 'SequenceInterval']
  mchildren['Control']= ['Modulation', 'Catalysis', 'TemplateReactionRegulation']
  mchildren['UnificationXref']= []
  mchildren['Entity']= ['Modulation', 'Dna', 'Rna', 'Catalysis', 'GeneticInteraction', 'Degradation', 'MolecularInteraction', 'DnaRegion', 'TemplateReactionRegulation', 'Protein', 'Transport', 'PhysicalEntity', 'Control', 'Gene', 'SmallMolecule', 'BiochemicalReaction', 'TemplateReaction', 'Complex', 'Interaction', 'Pathway', 'TransportWithBiochemicalReaction', 'Conversion', 'RnaRegion', 'ComplexAssembly']
  mchildren['UtilityClass']= ['TissueVocabulary', 'ModificationFeature', 'EvidenceCodeVocabulary', 'SequenceRegionVocabulary', 'CellularLocationVocabulary', 'SequenceInterval', 'SequenceLocation', 'Provenance', 'Xref', 'Stoichiometry', 'RelationshipTypeVocabulary', 'DnaReference', 'RelationshipXref', 'PathwayStep', 'BioSource', 'FragmentFeature', 'DnaRegionReference', 'UnificationXref', 'RnaReference', 'EntityFeature', 'RnaRegionReference', 'KPrime', 'SmallMoleculeReference', 'CellVocabulary', 'InteractionVocabulary', 'SequenceSite', 'BiochemicalPathwayStep', 'SequenceModificationVocabulary', 'ChemicalStructure', 'ExperimentalFormVocabulary', 'DeltaG', 'ControlledVocabulary', 'PublicationXref', 'CovalentBindingFeature', 'Score', 'BindingFeature', 'ExperimentalForm', 'EntityReference', 'PhenotypeVocabulary', 'ProteinReference', 'EntityReferenceTypeVocabulary']
  
  return mchildren

def class_children(cln):
   mchildren=classes_children()
   if cln in mchildren.keys():
      return mchildren[cln]
   return None 

#list all classes of the model
def classesDict():
   model=dict() 
   model['EntityReference']=EntityReference
   model['PathwayStep']=PathwayStep
   model['Degradation']=Degradation
   model['CellVocabulary']=CellVocabulary
   model['ModificationFeature']=ModificationFeature
   model['DnaRegion']=DnaRegion
   model['Pathway']=Pathway
   model['TemplateReaction']=TemplateReaction
   model['TransportWithBiochemicalReaction']=TransportWithBiochemicalReaction
   model['TemplateReactionRegulation']=TemplateReactionRegulation
   model['PhysicalEntity']=PhysicalEntity
   model['TissueVocabulary']=TissueVocabulary
   model['Conversion']=Conversion
   model['PhenotypeVocabulary']=PhenotypeVocabulary
   model['CovalentBindingFeature']=CovalentBindingFeature
   model['SequenceInterval']=SequenceInterval
   model['ChemicalStructure']=ChemicalStructure
   model['RnaRegionReference']=RnaRegionReference
   model['Evidence']=Evidence
   model['RnaRegion']=RnaRegion
   model['ProteinReference']=ProteinReference
   model['Xref']=Xref
   model['EvidenceCodeVocabulary']=EvidenceCodeVocabulary
   model['BiochemicalPathwayStep']=BiochemicalPathwayStep
   model['EntityReferenceTypeVocabulary']=EntityReferenceTypeVocabulary
   model['KPrime']=KPrime
   model['PublicationXref']=PublicationXref
   model['MolecularInteraction']=MolecularInteraction
   model['Catalysis']=Catalysis
   model['Dna']=Dna
   model['SequenceRegionVocabulary']=SequenceRegionVocabulary
   model['SequenceModificationVocabulary']=SequenceModificationVocabulary
   model['SmallMolecule']=SmallMolecule
   model['ControlledVocabulary']=ControlledVocabulary
   model['Stoichiometry']=Stoichiometry
   model['Gene']=Gene
   model['DnaRegionReference']=DnaRegionReference
   model['RelationshipTypeVocabulary']=RelationshipTypeVocabulary
   model['GeneticInteraction']=GeneticInteraction
   model['ExperimentalFormVocabulary']=ExperimentalFormVocabulary
   model['SequenceSite']=SequenceSite
   model['CellularLocationVocabulary']=CellularLocationVocabulary
   model['Provenance']=Provenance
   model['Protein']=Protein
   model['DnaReference']=DnaReference
   model['DeltaG']=DeltaG
   model['InteractionVocabulary']=InteractionVocabulary
   model['SmallMoleculeReference']=SmallMoleculeReference
   model['Complex']=Complex
   model['Transport']=Transport
   model['Interaction']=Interaction
   model['Rna']=Rna
   model['ExperimentalForm']=ExperimentalForm
   model['BioSource']=BioSource
   model['RnaReference']=RnaReference
   model['EntityFeature']=EntityFeature
   model['ComplexAssembly']=ComplexAssembly
   model['Score']=Score
   model['BiochemicalReaction']=BiochemicalReaction
   model['RelationshipXref']=RelationshipXref
   model['BindingFeature']=BindingFeature
   model['FragmentFeature']=FragmentFeature
   model['Modulation']=Modulation
   model['SequenceLocation']=SequenceLocation
   model['Control']=Control
   model['UnificationXref']=UnificationXref
   model['Entity']=Entity
   model['UtilityClass']=UtilityClass
 
   return model 

#list all classes of the model
def classes():
   model=classesDict()
   return list(model.keys()) 

def createInstance(cln):
    model=classesDict()
    if cln in model.keys():
       cl=model[cln]
       return cl()
    return None 

def parentTree():
 parentdict=dict()
 chl=classes_children()
 for k in chl.keys():
    v=chl[k]
    for el in v:  
      if el in parentdict.keys():
        pad=parentdict[el]
      else:
        pad=dict()
      pad[k]=1
      parentdict[el]=pad
        
 for k in parentdict.keys():
    pad=parentdict[k]
    parentdict[k]=list(pad.keys())
 return parentdict




def modelPopulator():
    mp=PackageModelPopulator().mpop
    return mp


class  PackageModelPopulator():

  def __init__(self):
    self.package_name="biopax"
    self.classDict=None
    self.mpop= None
    self.config()

  def config(self):
    self.classDict=self.classDictConf()
    self.mpop= ModelPopulator(self.classDict,self.package_name)

  def classDictConf(self)  :

     b64conf=b''

     obj = pickle.loads(base64.b64decode(b64conf))
     return obj

def domain():
    return "http://www.biopax.org/release/biopax-level3.owl#"

def prefix():
    return "biopax"    
def shortPrefix():
    return "bi"       


#return parent hierarchy
def get_parent_hierarchy(cls):
    parents = []
    bases = cls.__bases__
    for base in bases:
        if base != object:
            parents.append(base)
            parents.extend(get_parent_hierarchy(base))
    return parents
    
# a generic tostring helper    
def entityToString(entity,help):
    msg=""
    members =classes_children().keys() 
    clsn=entity.__class__.__name__
    msg+= "  uri/pk: %s\n" %( entity.pk)
    msg+= "  class:%s\n" %(clsn )  
    #attributes using getter
    
    hl=get_parent_hierarchy(entity.__class__)
    hl.append(entity.__class__)
    attl_all={} 
    for cn in hl:
      dh=help.select(cn.__name__)  
      if dh is not None:  
        attl=(dh.attributeNames())  
        for attn in attl:
           attl_all[attn]=1 
    
    #attributes using helper 
    for attn in attl_all.keys():
          val=getattr(entity, '_'+attn  )
          
          if val is not None:
            if isinstance(val, object) and  val.__class__.__name__ in members:    
               val="(%s, %s)" %( val.__class__.__name__, val.pk )
            msg+="  %s : %s \n"  %(attn,val  )  
    return msg
