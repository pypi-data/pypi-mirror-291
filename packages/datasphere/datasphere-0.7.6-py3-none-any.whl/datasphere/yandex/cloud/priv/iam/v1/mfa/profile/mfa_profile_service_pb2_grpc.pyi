"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import collections.abc
import google.protobuf.empty_pb2
import grpc
import grpc.aio
import typing
import datasphere.yandex.cloud.priv.iam.v1.mfa.profile.mfa_profile_service_pb2

_T = typing.TypeVar('_T')

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta):
    ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore
    ...

class MfaProfileServiceStub:
    """A set of methods for managing mfa profiles.
    The user credentials should be passed in the authorization header.
    """

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    GetProfilesConfig: grpc.UnaryUnaryMultiCallable[
        google.protobuf.empty_pb2.Empty,
        yandex.cloud.priv.iam.v1.mfa.profile.mfa_profile_service_pb2.GetProfilesConfigResponse,
    ]
    """Returns allowed mfa profile types and configured mfa profiles."""

class MfaProfileServiceAsyncStub:
    """A set of methods for managing mfa profiles.
    The user credentials should be passed in the authorization header.
    """

    GetProfilesConfig: grpc.aio.UnaryUnaryMultiCallable[
        google.protobuf.empty_pb2.Empty,
        yandex.cloud.priv.iam.v1.mfa.profile.mfa_profile_service_pb2.GetProfilesConfigResponse,
    ]
    """Returns allowed mfa profile types and configured mfa profiles."""

class MfaProfileServiceServicer(metaclass=abc.ABCMeta):
    """A set of methods for managing mfa profiles.
    The user credentials should be passed in the authorization header.
    """

    @abc.abstractmethod
    def GetProfilesConfig(
        self,
        request: google.protobuf.empty_pb2.Empty,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.priv.iam.v1.mfa.profile.mfa_profile_service_pb2.GetProfilesConfigResponse, collections.abc.Awaitable[yandex.cloud.priv.iam.v1.mfa.profile.mfa_profile_service_pb2.GetProfilesConfigResponse]]:
        """Returns allowed mfa profile types and configured mfa profiles."""

def add_MfaProfileServiceServicer_to_server(servicer: MfaProfileServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
