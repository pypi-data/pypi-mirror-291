[tool.poetry]
name = "meilisearch-python-sdk"
version = "3.2.0"
description = "A Python client providing both async and sync support for the Meilisearch API"
authors = ["Paul Sanders <psanders1@gmail.com>"]
license = "MIT"
readme = "README.md"
repository = "https://github.com/sanders41/meilisearch-python-sdk"
homepage = "https://github.com/sanders41/meilisearch-python-sdk"
documentation = "https://meilisearch-python-sdk.paulsanders.dev"
keywords = ["meilisearch", "async", "python", "client", "sdk"]
classifiers=[
  "Development Status :: 5 - Production/Stable",
  "Intended Audience :: Developers",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
  "Typing :: Typed",
]
include = ["meilisearch_python_sdk/py.typed"]

[tool.poetry.dependencies]
python = "^3.9"
aiofiles = ">=0.7"
camel-converter = ">=1.0.0"
eval-type-backport = {version = ">=0.2.0", python = "<3.10"}  # allows pydantic to use pipe instead of Union
httpx = ">=0.17"
orjson = { version = ">=3.10.6", optional = true }
pydantic = ">=2.0.0"
PyJWT = ">=2.3.0"
ujson = { version = ">=5.10.0", optional = true }

[tool.poetry.extras]
orjson = ["orjson"]
ujson = ["ujson"]
all = ["orjson", "ujson"]

[tool.poetry.group.dev.dependencies]
mkdocs = "1.6.0"
mkdocs-material = "9.5.31"
mkdocstrings = {version = "0.25.2", extras = ["python"]}
mypy = "1.11.1"
pre-commit = "3.8.0"
pytest = "8.3.2"
pytest-cov = "5.0.0"
pytest-asyncio = "0.23.8"
pytest-xdist = "3.6.1"
ruff = "0.6.1"
tomli = {version = "2.0.1", python = "<3.11"}
types-aiofiles = "24.1.0.20240626"
typing-extensions = "4.12.2"
types-ujson = "5.10.0.20240515"

[tool.poetry.group.benchmark.dependencies]
meilisearch = ">=0.26.0"
rich = ">=13.3.5"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "--cov=meilisearch_python_sdk --cov-report term-missing --no-cov-on-fail"
asyncio_mode = "auto"
markers = ["no_parallel"]

[tool.mypy]
check_untyped_defs = true
disallow_untyped_defs = true
plugins = ["pydantic.mypy"]

[[tool.mypy.overrides]]
module = ["tests.*"]
disallow_untyped_defs = false

[[tool.mypy.overrides]]
module = ["aiocache.*"]
ignore_missing_imports = true

[tool.ruff]
line-length = 100
target-version = "py39"
fix = true

[tool.ruff.lint]
select=[
  "E",  # pycodestyle
  "B",  #
  "F",  # pyflakes
  "UP",  # pyupgrade
  "I001",  # unsorted-imports
  "T201",
  "T203",
  "ASYNC"  # flake8-async
]
ignore=[
  # Recommened ignores by ruff when using formatter
  "E501",
  "W191",
  "E111",
  "E114",
  "E117",
  "D206",
  "D300",
  "Q000",
  "Q001",
  "Q002",
  "Q003",
  "COM812",
  "COM819",
  "ISC001",
  "ISC002",
]
