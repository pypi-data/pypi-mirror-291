from typing import Callable, override, Generator

from statemonad.stateapplicative import StateApplicative


class StateMonad[State, U](StateApplicative[State, U]):
    def __iter__(self) -> Generator[None, None, U]: ...
    @override
    def apply(self, state: State) -> tuple[State, U]: ...
    def cache(self) -> StateMonad[State, U]: ...
    def copy(self, /, **changes) -> StateMonad[State, U]: ...
    def flat_map[V](
        self, func: Callable[[U], StateApplicative[State, V]]
    ) -> StateMonad[State, V]: ...
    def get(self) -> StateMonad[State, State]: ...
    def map[V](self, func: Callable[[U], V]) -> StateMonad[State, V]: ...
    def zip[V](self, other: StateMonad[State, V]) -> StateMonad[State, tuple[U, V]]: ...
    def put(self, state: State) -> StateMonad[State, U]: ...
