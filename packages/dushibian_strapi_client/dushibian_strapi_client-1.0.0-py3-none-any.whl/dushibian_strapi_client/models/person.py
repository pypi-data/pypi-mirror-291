# coding: utf-8

"""
    DOCUMENTATION

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Contact: contact-email@something.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from dushibian_strapi_client.models.activity_created_by import ActivityCreatedBy
from dushibian_strapi_client.models.article_tags_data_inner_attributes_books_data_inner_attributes_cover import ArticleTagsDataInnerAttributesBooksDataInnerAttributesCover
from dushibian_strapi_client.models.book_tags import BookTags
from dushibian_strapi_client.models.shared_banner_component_image_data_attributes_related import SharedBannerComponentImageDataAttributesRelated
from dushibian_strapi_client.models.shared_seo_component import SharedSeoComponent
from dushibian_strapi_client.models.shared_social_component import SharedSocialComponent
from typing import Optional, Set
from typing_extensions import Self

class Person(BaseModel):
    """
    Person
    """ # noqa: E501
    name: StrictStr
    image: Optional[ArticleTagsDataInnerAttributesBooksDataInnerAttributesCover] = None
    description: Optional[StrictStr] = None
    uuid: StrictStr
    tags: Optional[BookTags] = None
    blocked: Optional[StrictBool] = None
    recommends: Optional[SharedBannerComponentImageDataAttributesRelated] = None
    title: StrictStr
    social: Optional[List[SharedSocialComponent]] = None
    seo: Optional[SharedSeoComponent] = None
    weight: StrictInt
    dead: Optional[StrictBool] = None
    nickname: Optional[StrictStr] = None
    created_at: Optional[datetime] = Field(default=None, alias="createdAt")
    updated_at: Optional[datetime] = Field(default=None, alias="updatedAt")
    published_at: Optional[datetime] = Field(default=None, alias="publishedAt")
    created_by: Optional[ActivityCreatedBy] = Field(default=None, alias="createdBy")
    updated_by: Optional[ActivityCreatedBy] = Field(default=None, alias="updatedBy")
    __properties: ClassVar[List[str]] = ["name", "image", "description", "uuid", "tags", "blocked", "recommends", "title", "social", "seo", "weight", "dead", "nickname", "createdAt", "updatedAt", "publishedAt", "createdBy", "updatedBy"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Person from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of image
        if self.image:
            _dict['image'] = self.image.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tags
        if self.tags:
            _dict['tags'] = self.tags.to_dict()
        # override the default output from pydantic by calling `to_dict()` of recommends
        if self.recommends:
            _dict['recommends'] = self.recommends.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in social (list)
        _items = []
        if self.social:
            for _item_social in self.social:
                if _item_social:
                    _items.append(_item_social.to_dict())
            _dict['social'] = _items
        # override the default output from pydantic by calling `to_dict()` of seo
        if self.seo:
            _dict['seo'] = self.seo.to_dict()
        # override the default output from pydantic by calling `to_dict()` of created_by
        if self.created_by:
            _dict['createdBy'] = self.created_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of updated_by
        if self.updated_by:
            _dict['updatedBy'] = self.updated_by.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Person from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "image": ArticleTagsDataInnerAttributesBooksDataInnerAttributesCover.from_dict(obj["image"]) if obj.get("image") is not None else None,
            "description": obj.get("description"),
            "uuid": obj.get("uuid"),
            "tags": BookTags.from_dict(obj["tags"]) if obj.get("tags") is not None else None,
            "blocked": obj.get("blocked"),
            "recommends": SharedBannerComponentImageDataAttributesRelated.from_dict(obj["recommends"]) if obj.get("recommends") is not None else None,
            "title": obj.get("title"),
            "social": [SharedSocialComponent.from_dict(_item) for _item in obj["social"]] if obj.get("social") is not None else None,
            "seo": SharedSeoComponent.from_dict(obj["seo"]) if obj.get("seo") is not None else None,
            "weight": obj.get("weight"),
            "dead": obj.get("dead"),
            "nickname": obj.get("nickname"),
            "createdAt": obj.get("createdAt"),
            "updatedAt": obj.get("updatedAt"),
            "publishedAt": obj.get("publishedAt"),
            "createdBy": ActivityCreatedBy.from_dict(obj["createdBy"]) if obj.get("createdBy") is not None else None,
            "updatedBy": ActivityCreatedBy.from_dict(obj["updatedBy"]) if obj.get("updatedBy") is not None else None
        })
        return _obj


