# coding: utf-8

"""
    DOCUMENTATION

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Contact: contact-email@something.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from dushibian_strapi_client.models.activity_created_by import ActivityCreatedBy
from dushibian_strapi_client.models.shared_banner_component_image import SharedBannerComponentImage
from dushibian_strapi_client.models.shared_banner_component_image_data_attributes_related import SharedBannerComponentImageDataAttributesRelated
from dushibian_strapi_client.models.shared_section_list_item_component_books_data_inner_attributes_tags_data_inner_attributes_articles_data_inner_attributes_book_list_inner import SharedSectionListItemComponentBooksDataInnerAttributesTagsDataInnerAttributesArticlesDataInnerAttributesBookListInner
from dushibian_strapi_client.models.shared_section_list_item_component_books_data_inner_attributes_tags_data_inner_attributes_people_data_inner_attributes_seo import SharedSectionListItemComponentBooksDataInnerAttributesTagsDataInnerAttributesPeopleDataInnerAttributesSeo
from typing import Optional, Set
from typing_extensions import Self

class SharedSectionListItemComponentBooksDataInnerAttributesTagsDataInnerAttributesArticlesDataInnerAttributes(BaseModel):
    """
    SharedSectionListItemComponentBooksDataInnerAttributesTagsDataInnerAttributesArticlesDataInnerAttributes
    """ # noqa: E501
    title: Optional[StrictStr] = None
    uuid: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    tags: Optional[SharedBannerComponentImageDataAttributesRelated] = None
    image: Optional[SharedBannerComponentImage] = None
    author: Optional[StrictStr] = None
    blocked: Optional[StrictBool] = None
    seo: Optional[SharedSectionListItemComponentBooksDataInnerAttributesTagsDataInnerAttributesPeopleDataInnerAttributesSeo] = None
    book_list: Optional[List[SharedSectionListItemComponentBooksDataInnerAttributesTagsDataInnerAttributesArticlesDataInnerAttributesBookListInner]] = None
    summary: Optional[StrictStr] = None
    article: Optional[StrictStr] = None
    weight: Optional[StrictInt] = None
    created_at: Optional[datetime] = Field(default=None, alias="createdAt")
    updated_at: Optional[datetime] = Field(default=None, alias="updatedAt")
    published_at: Optional[datetime] = Field(default=None, alias="publishedAt")
    created_by: Optional[ActivityCreatedBy] = Field(default=None, alias="createdBy")
    updated_by: Optional[ActivityCreatedBy] = Field(default=None, alias="updatedBy")
    __properties: ClassVar[List[str]] = ["title", "uuid", "description", "tags", "image", "author", "blocked", "seo", "book_list", "summary", "article", "weight", "createdAt", "updatedAt", "publishedAt", "createdBy", "updatedBy"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SharedSectionListItemComponentBooksDataInnerAttributesTagsDataInnerAttributesArticlesDataInnerAttributes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of tags
        if self.tags:
            _dict['tags'] = self.tags.to_dict()
        # override the default output from pydantic by calling `to_dict()` of image
        if self.image:
            _dict['image'] = self.image.to_dict()
        # override the default output from pydantic by calling `to_dict()` of seo
        if self.seo:
            _dict['seo'] = self.seo.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in book_list (list)
        _items = []
        if self.book_list:
            for _item_book_list in self.book_list:
                if _item_book_list:
                    _items.append(_item_book_list.to_dict())
            _dict['book_list'] = _items
        # override the default output from pydantic by calling `to_dict()` of created_by
        if self.created_by:
            _dict['createdBy'] = self.created_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of updated_by
        if self.updated_by:
            _dict['updatedBy'] = self.updated_by.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SharedSectionListItemComponentBooksDataInnerAttributesTagsDataInnerAttributesArticlesDataInnerAttributes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "title": obj.get("title"),
            "uuid": obj.get("uuid"),
            "description": obj.get("description"),
            "tags": SharedBannerComponentImageDataAttributesRelated.from_dict(obj["tags"]) if obj.get("tags") is not None else None,
            "image": SharedBannerComponentImage.from_dict(obj["image"]) if obj.get("image") is not None else None,
            "author": obj.get("author"),
            "blocked": obj.get("blocked"),
            "seo": SharedSectionListItemComponentBooksDataInnerAttributesTagsDataInnerAttributesPeopleDataInnerAttributesSeo.from_dict(obj["seo"]) if obj.get("seo") is not None else None,
            "book_list": [SharedSectionListItemComponentBooksDataInnerAttributesTagsDataInnerAttributesArticlesDataInnerAttributesBookListInner.from_dict(_item) for _item in obj["book_list"]] if obj.get("book_list") is not None else None,
            "summary": obj.get("summary"),
            "article": obj.get("article"),
            "weight": obj.get("weight"),
            "createdAt": obj.get("createdAt"),
            "updatedAt": obj.get("updatedAt"),
            "publishedAt": obj.get("publishedAt"),
            "createdBy": ActivityCreatedBy.from_dict(obj["createdBy"]) if obj.get("createdBy") is not None else None,
            "updatedBy": ActivityCreatedBy.from_dict(obj["updatedBy"]) if obj.get("updatedBy") is not None else None
        })
        return _obj


