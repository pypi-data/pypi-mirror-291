# coding: utf-8

"""
    DOCUMENTATION

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Contact: contact-email@something.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class SharedCostPerSellComponent(BaseModel):
    """
    SharedCostPerSellComponent
    """ # noqa: E501
    id: Optional[Union[StrictFloat, StrictInt]] = None
    platform: Optional[StrictStr] = None
    url: Optional[StrictStr] = None
    price: Optional[Union[StrictFloat, StrictInt]] = None
    earn: Optional[Union[StrictFloat, StrictInt]] = None
    sell_count: Optional[StrictInt] = None
    good_id: Optional[StrictStr] = None
    expire_at: Optional[date] = None
    __properties: ClassVar[List[str]] = ["id", "platform", "url", "price", "earn", "sell_count", "good_id", "expire_at"]

    @field_validator('platform')
    def platform_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['jd', 'taobao', 'pinduoduo', 'douyin']):
            raise ValueError("must be one of enum values ('jd', 'taobao', 'pinduoduo', 'douyin')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SharedCostPerSellComponent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SharedCostPerSellComponent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "platform": obj.get("platform"),
            "url": obj.get("url"),
            "price": obj.get("price"),
            "earn": obj.get("earn"),
            "sell_count": obj.get("sell_count"),
            "good_id": obj.get("good_id"),
            "expire_at": obj.get("expire_at")
        })
        return _obj


