# coding: utf-8

"""
    DOCUMENTATION

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Contact: contact-email@something.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from dushibian_strapi_client.models.shared_banner_component_image import SharedBannerComponentImage
from dushibian_strapi_client.models.shared_section_list_item_component_books_data_inner_attributes_tags_data_inner_attributes_people_data_inner_attributes_seo_meta_social_inner import SharedSectionListItemComponentBooksDataInnerAttributesTagsDataInnerAttributesPeopleDataInnerAttributesSeoMetaSocialInner
from typing import Optional, Set
from typing_extensions import Self

class SharedSectionListItemComponentBooksDataInnerAttributesTagsDataInnerAttributesPeopleDataInnerAttributesSeo(BaseModel):
    """
    SharedSectionListItemComponentBooksDataInnerAttributesTagsDataInnerAttributesPeopleDataInnerAttributesSeo
    """ # noqa: E501
    id: Optional[Union[StrictFloat, StrictInt]] = None
    meta_title: Optional[StrictStr] = Field(default=None, alias="metaTitle")
    meta_description: Optional[StrictStr] = Field(default=None, alias="metaDescription")
    meta_image: Optional[SharedBannerComponentImage] = Field(default=None, alias="metaImage")
    meta_social: Optional[List[SharedSectionListItemComponentBooksDataInnerAttributesTagsDataInnerAttributesPeopleDataInnerAttributesSeoMetaSocialInner]] = Field(default=None, alias="metaSocial")
    keywords: Optional[StrictStr] = None
    meta_robots: Optional[StrictStr] = Field(default=None, alias="metaRobots")
    structured_data: Optional[Any] = Field(default=None, alias="structuredData")
    meta_viewport: Optional[StrictStr] = Field(default=None, alias="metaViewport")
    canonical_url: Optional[StrictStr] = Field(default=None, alias="canonicalURL")
    __properties: ClassVar[List[str]] = ["id", "metaTitle", "metaDescription", "metaImage", "metaSocial", "keywords", "metaRobots", "structuredData", "metaViewport", "canonicalURL"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SharedSectionListItemComponentBooksDataInnerAttributesTagsDataInnerAttributesPeopleDataInnerAttributesSeo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of meta_image
        if self.meta_image:
            _dict['metaImage'] = self.meta_image.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in meta_social (list)
        _items = []
        if self.meta_social:
            for _item_meta_social in self.meta_social:
                if _item_meta_social:
                    _items.append(_item_meta_social.to_dict())
            _dict['metaSocial'] = _items
        # set to None if structured_data (nullable) is None
        # and model_fields_set contains the field
        if self.structured_data is None and "structured_data" in self.model_fields_set:
            _dict['structuredData'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SharedSectionListItemComponentBooksDataInnerAttributesTagsDataInnerAttributesPeopleDataInnerAttributesSeo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "metaTitle": obj.get("metaTitle"),
            "metaDescription": obj.get("metaDescription"),
            "metaImage": SharedBannerComponentImage.from_dict(obj["metaImage"]) if obj.get("metaImage") is not None else None,
            "metaSocial": [SharedSectionListItemComponentBooksDataInnerAttributesTagsDataInnerAttributesPeopleDataInnerAttributesSeoMetaSocialInner.from_dict(_item) for _item in obj["metaSocial"]] if obj.get("metaSocial") is not None else None,
            "keywords": obj.get("keywords"),
            "metaRobots": obj.get("metaRobots"),
            "structuredData": obj.get("structuredData"),
            "metaViewport": obj.get("metaViewport"),
            "canonicalURL": obj.get("canonicalURL")
        })
        return _obj


