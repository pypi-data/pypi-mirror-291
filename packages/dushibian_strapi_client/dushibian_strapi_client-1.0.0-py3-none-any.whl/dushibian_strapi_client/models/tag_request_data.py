# coding: utf-8

"""
    DOCUMENTATION

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Contact: contact-email@something.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from dushibian_strapi_client.models.article_request_data_tags_inner import ArticleRequestDataTagsInner
from dushibian_strapi_client.models.shared_seo_component import SharedSeoComponent
from typing import Optional, Set
from typing_extensions import Self

class TagRequestData(BaseModel):
    """
    TagRequestData
    """ # noqa: E501
    name: StrictStr
    uuid: StrictStr
    father: Optional[ArticleRequestDataTagsInner] = None
    children: Optional[List[ArticleRequestDataTagsInner]] = None
    level: Optional[StrictInt] = None
    books: Optional[List[ArticleRequestDataTagsInner]] = None
    people: Optional[List[ArticleRequestDataTagsInner]] = None
    category: Optional[StrictStr] = None
    display_name: Optional[StrictStr] = None
    articles: Optional[List[ArticleRequestDataTagsInner]] = None
    title: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    seo: Optional[SharedSeoComponent] = None
    image: Optional[ArticleRequestDataTagsInner] = None
    __properties: ClassVar[List[str]] = ["name", "uuid", "father", "children", "level", "books", "people", "category", "display_name", "articles", "title", "description", "seo", "image"]

    @field_validator('category')
    def category_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Book', 'Person', 'Article']):
            raise ValueError("must be one of enum values ('Book', 'Person', 'Article')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TagRequestData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of father
        if self.father:
            _dict['father'] = self.father.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in children (list)
        _items = []
        if self.children:
            for _item_children in self.children:
                if _item_children:
                    _items.append(_item_children.to_dict())
            _dict['children'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in books (list)
        _items = []
        if self.books:
            for _item_books in self.books:
                if _item_books:
                    _items.append(_item_books.to_dict())
            _dict['books'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in people (list)
        _items = []
        if self.people:
            for _item_people in self.people:
                if _item_people:
                    _items.append(_item_people.to_dict())
            _dict['people'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in articles (list)
        _items = []
        if self.articles:
            for _item_articles in self.articles:
                if _item_articles:
                    _items.append(_item_articles.to_dict())
            _dict['articles'] = _items
        # override the default output from pydantic by calling `to_dict()` of seo
        if self.seo:
            _dict['seo'] = self.seo.to_dict()
        # override the default output from pydantic by calling `to_dict()` of image
        if self.image:
            _dict['image'] = self.image.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TagRequestData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "uuid": obj.get("uuid"),
            "father": ArticleRequestDataTagsInner.from_dict(obj["father"]) if obj.get("father") is not None else None,
            "children": [ArticleRequestDataTagsInner.from_dict(_item) for _item in obj["children"]] if obj.get("children") is not None else None,
            "level": obj.get("level"),
            "books": [ArticleRequestDataTagsInner.from_dict(_item) for _item in obj["books"]] if obj.get("books") is not None else None,
            "people": [ArticleRequestDataTagsInner.from_dict(_item) for _item in obj["people"]] if obj.get("people") is not None else None,
            "category": obj.get("category"),
            "display_name": obj.get("display_name"),
            "articles": [ArticleRequestDataTagsInner.from_dict(_item) for _item in obj["articles"]] if obj.get("articles") is not None else None,
            "title": obj.get("title"),
            "description": obj.get("description"),
            "seo": SharedSeoComponent.from_dict(obj["seo"]) if obj.get("seo") is not None else None,
            "image": ArticleRequestDataTagsInner.from_dict(obj["image"]) if obj.get("image") is not None else None
        })
        return _obj


