# coding: utf-8

"""
    DOCUMENTATION

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Contact: contact-email@something.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from dushibian_strapi_client.models.shared_banner_component_image_data_attributes_related import SharedBannerComponentImageDataAttributesRelated
from dushibian_strapi_client.models.shared_section_list_item_component_books import SharedSectionListItemComponentBooks
from typing import Optional, Set
from typing_extensions import Self

class SharedSectionListItemComponent(BaseModel):
    """
    SharedSectionListItemComponent
    """ # noqa: E501
    id: Optional[Union[StrictFloat, StrictInt]] = None
    books: Optional[SharedSectionListItemComponentBooks] = None
    people: Optional[SharedBannerComponentImageDataAttributesRelated] = None
    articles: Optional[SharedBannerComponentImageDataAttributesRelated] = None
    title: Optional[StrictStr] = None
    target_title: Optional[StrictStr] = None
    target_url: Optional[StrictStr] = None
    uuid: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["id", "books", "people", "articles", "title", "target_title", "target_url", "uuid"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SharedSectionListItemComponent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of books
        if self.books:
            _dict['books'] = self.books.to_dict()
        # override the default output from pydantic by calling `to_dict()` of people
        if self.people:
            _dict['people'] = self.people.to_dict()
        # override the default output from pydantic by calling `to_dict()` of articles
        if self.articles:
            _dict['articles'] = self.articles.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SharedSectionListItemComponent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "books": SharedSectionListItemComponentBooks.from_dict(obj["books"]) if obj.get("books") is not None else None,
            "people": SharedBannerComponentImageDataAttributesRelated.from_dict(obj["people"]) if obj.get("people") is not None else None,
            "articles": SharedBannerComponentImageDataAttributesRelated.from_dict(obj["articles"]) if obj.get("articles") is not None else None,
            "title": obj.get("title"),
            "target_title": obj.get("target_title"),
            "target_url": obj.get("target_url"),
            "uuid": obj.get("uuid")
        })
        return _obj


