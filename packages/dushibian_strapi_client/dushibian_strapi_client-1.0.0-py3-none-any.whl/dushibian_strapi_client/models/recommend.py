# coding: utf-8

"""
    DOCUMENTATION

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Contact: contact-email@something.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from dushibian_strapi_client.models.activity_created_by import ActivityCreatedBy
from dushibian_strapi_client.models.recommend_book import RecommendBook
from dushibian_strapi_client.models.shared_social_component import SharedSocialComponent
from typing import Optional, Set
from typing_extensions import Self

class Recommend(BaseModel):
    """
    Recommend
    """ # noqa: E501
    content: Optional[StrictStr] = None
    recommended_at: Optional[date] = None
    book: Optional[RecommendBook] = None
    person: Optional[ActivityCreatedBy] = None
    source: Optional[SharedSocialComponent] = None
    created_at: Optional[datetime] = Field(default=None, alias="createdAt")
    updated_at: Optional[datetime] = Field(default=None, alias="updatedAt")
    published_at: Optional[datetime] = Field(default=None, alias="publishedAt")
    created_by: Optional[ActivityCreatedBy] = Field(default=None, alias="createdBy")
    updated_by: Optional[ActivityCreatedBy] = Field(default=None, alias="updatedBy")
    __properties: ClassVar[List[str]] = ["content", "recommended_at", "book", "person", "source", "createdAt", "updatedAt", "publishedAt", "createdBy", "updatedBy"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Recommend from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of book
        if self.book:
            _dict['book'] = self.book.to_dict()
        # override the default output from pydantic by calling `to_dict()` of person
        if self.person:
            _dict['person'] = self.person.to_dict()
        # override the default output from pydantic by calling `to_dict()` of source
        if self.source:
            _dict['source'] = self.source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of created_by
        if self.created_by:
            _dict['createdBy'] = self.created_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of updated_by
        if self.updated_by:
            _dict['updatedBy'] = self.updated_by.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Recommend from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "content": obj.get("content"),
            "recommended_at": obj.get("recommended_at"),
            "book": RecommendBook.from_dict(obj["book"]) if obj.get("book") is not None else None,
            "person": ActivityCreatedBy.from_dict(obj["person"]) if obj.get("person") is not None else None,
            "source": SharedSocialComponent.from_dict(obj["source"]) if obj.get("source") is not None else None,
            "createdAt": obj.get("createdAt"),
            "updatedAt": obj.get("updatedAt"),
            "publishedAt": obj.get("publishedAt"),
            "createdBy": ActivityCreatedBy.from_dict(obj["createdBy"]) if obj.get("createdBy") is not None else None,
            "updatedBy": ActivityCreatedBy.from_dict(obj["updatedBy"]) if obj.get("updatedBy") is not None else None
        })
        return _obj


