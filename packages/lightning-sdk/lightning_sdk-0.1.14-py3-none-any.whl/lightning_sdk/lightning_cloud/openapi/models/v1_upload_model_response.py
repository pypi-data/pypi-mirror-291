# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1UploadModelResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cluster_id': 'str',
        'model_id': 'str',
        'upload_dir': 'str',
        'upload_url': 'str',
        'version': 'str'
    }

    attribute_map = {
        'cluster_id': 'clusterId',
        'model_id': 'modelId',
        'upload_dir': 'uploadDir',
        'upload_url': 'uploadUrl',
        'version': 'version'
    }

    def __init__(self, cluster_id: 'str' =None, model_id: 'str' =None, upload_dir: 'str' =None, upload_url: 'str' =None, version: 'str' =None):  # noqa: E501
        """V1UploadModelResponse - a model defined in Swagger"""  # noqa: E501
        self._cluster_id = None
        self._model_id = None
        self._upload_dir = None
        self._upload_url = None
        self._version = None
        self.discriminator = None
        if cluster_id is not None:
            self.cluster_id = cluster_id
        if model_id is not None:
            self.model_id = model_id
        if upload_dir is not None:
            self.upload_dir = upload_dir
        if upload_url is not None:
            self.upload_url = upload_url
        if version is not None:
            self.version = version

    @property
    def cluster_id(self) -> 'str':
        """Gets the cluster_id of this V1UploadModelResponse.  # noqa: E501


        :return: The cluster_id of this V1UploadModelResponse.  # noqa: E501
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id: 'str'):
        """Sets the cluster_id of this V1UploadModelResponse.


        :param cluster_id: The cluster_id of this V1UploadModelResponse.  # noqa: E501
        :type: str
        """

        self._cluster_id = cluster_id

    @property
    def model_id(self) -> 'str':
        """Gets the model_id of this V1UploadModelResponse.  # noqa: E501


        :return: The model_id of this V1UploadModelResponse.  # noqa: E501
        :rtype: str
        """
        return self._model_id

    @model_id.setter
    def model_id(self, model_id: 'str'):
        """Sets the model_id of this V1UploadModelResponse.


        :param model_id: The model_id of this V1UploadModelResponse.  # noqa: E501
        :type: str
        """

        self._model_id = model_id

    @property
    def upload_dir(self) -> 'str':
        """Gets the upload_dir of this V1UploadModelResponse.  # noqa: E501


        :return: The upload_dir of this V1UploadModelResponse.  # noqa: E501
        :rtype: str
        """
        return self._upload_dir

    @upload_dir.setter
    def upload_dir(self, upload_dir: 'str'):
        """Sets the upload_dir of this V1UploadModelResponse.


        :param upload_dir: The upload_dir of this V1UploadModelResponse.  # noqa: E501
        :type: str
        """

        self._upload_dir = upload_dir

    @property
    def upload_url(self) -> 'str':
        """Gets the upload_url of this V1UploadModelResponse.  # noqa: E501


        :return: The upload_url of this V1UploadModelResponse.  # noqa: E501
        :rtype: str
        """
        return self._upload_url

    @upload_url.setter
    def upload_url(self, upload_url: 'str'):
        """Sets the upload_url of this V1UploadModelResponse.


        :param upload_url: The upload_url of this V1UploadModelResponse.  # noqa: E501
        :type: str
        """

        self._upload_url = upload_url

    @property
    def version(self) -> 'str':
        """Gets the version of this V1UploadModelResponse.  # noqa: E501


        :return: The version of this V1UploadModelResponse.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version: 'str'):
        """Sets the version of this V1UploadModelResponse.


        :param version: The version of this V1UploadModelResponse.  # noqa: E501
        :type: str
        """

        self._version = version

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1UploadModelResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1UploadModelResponse') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1UploadModelResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1UploadModelResponse') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
