from typing import Type
from legitcli.git.client import GitReadonlyClient
from legitcli.model.config import Config
from legitcli.model.rules import Rule
from legitcli.model.ruleset import ScopedRuleset
from legitcli.model.scope_conditions import ScopeCondition, ScopeConditionAction
from legitcli.model.validator_results import (
    FailedRule,
    CommitScopedRulesetValidatorResult,
)
from legitcli.utils.lazy import LazyFileReader
from legitcli.validator.generic import CommitRuleValidator, CommitScopeConditionMatcher
from legitcli.model.bindings import (
    scope_matcher_bindings_map,
    rule_validator_bindings_map,
)


class CommitScopedRulesetValidator:
    """Verifies that the ongoing commit is valid"""

    def __init__(
        self,
        git_client: GitReadonlyClient,
        commit_message_file: LazyFileReader,
        config: Config,
    ) -> None:
        self.__git = git_client
        self.__commit_message_file = commit_message_file
        self.__config = config

    def validate_commit_scoped_ruleset(
        self, scoped_ruleset: ScopedRuleset
    ) -> CommitScopedRulesetValidatorResult:
        """Verifies if a given scoped_ruleset is in-scope and if its rules passed.

        Args:
            scoped_ruleset (ScopedRuleset): the scoped ruleset to evaluate
            commit_message_file (str): the temporary file generated by git with the commit message as content

        Returns:
            CommitScopedRulesetValidatorResult: data class with info such as failed rules and whether or not scope is in-scope or if the commit should fail
        """
        result = CommitScopedRulesetValidatorResult(
            triggered_scope=None, should_fail=False
        )

        for scope_condition in scoped_ruleset.scope:
            scope_condition_matcher = self.__get_scope_matcher(scope_condition)
            action = scope_condition_matcher.get_action()
            if action is None or action == ScopeConditionAction.EXCLUDE:
                return result

        result.triggered_scope = scoped_ruleset.scope_name
        result.failed_rules = []

        for rule in scoped_ruleset.ruleset:
            rule_validator = self.__get_rule_validator(rule)
            rule_result = rule_validator.validate_commit()
            if rule_result.failed:
                result.failed_rules.append(
                    FailedRule(rule, rule_result.fail_reason or "Unknown reason")
                )

        if len(result.failed_rules) > 0:
            result.should_fail = True
        return result

    def __get_scope_matcher(
        self, scope_condition: ScopeCondition
    ) -> CommitScopeConditionMatcher:
        ScopeConditionMatcher = scope_matcher_bindings_map[scope_condition.__class__]
        return ScopeConditionMatcher(
            scope_condition, self.__git, self.__commit_message_file
        )

    def __get_rule_validator(self, rule: Rule) -> CommitRuleValidator:
        RuleValidator = rule_validator_bindings_map[rule.__class__]
        return RuleValidator(rule, self.__git, self.__commit_message_file)
